
Aman_Scope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001300c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002258  080131b0  080131b0  000141b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015408  08015408  00017320  2**0
                  CONTENTS
  4 .ARM          00000008  08015408  08015408  00016408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015410  08015410  00017320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015410  08015410  00016410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015414  08015414  00016414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000320  20000000  08015418  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ca4  20000320  08015738  00017320  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002fc4  08015738  00017fc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017320  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff15  00000000  00000000  00017350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bb2  00000000  00000000  00037265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d98  00000000  00000000  0003be18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016ce  00000000  00000000  0003dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e0f3  00000000  00000000  0003f27e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026648  00000000  00000000  0005d371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5dcf  00000000  00000000  000839b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129788  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fe8  00000000  00000000  001297cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001327b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000320 	.word	0x20000320
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013194 	.word	0x08013194

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000324 	.word	0x20000324
 80001dc:	08013194 	.word	0x08013194

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <main>:
/* USER CODE END 0 */
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af02      	add	r7, sp, #8
    /* USER CODE BEGIN 1 */
    /* USER CODE END 1 */
    /* MCU Configuration--------------------------------------------------------*/
    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000f8e:	f004 f97f 	bl	8005290 <HAL_Init>
    /* USER CODE BEGIN Init */
    /* USER CODE END Init */
    /* Configure the system clock */
    SystemClock_Config();
 8000f92:	f000 fa2d 	bl	80013f0 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */
    /* USER CODE END SysInit */
    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000f96:	f000 fc3b 	bl	8001810 <MX_GPIO_Init>
    MX_DMA_Init();
 8000f9a:	f000 fc11 	bl	80017c0 <MX_DMA_Init>
    MX_SPI1_Init();
 8000f9e:	f000 fb11 	bl	80015c4 <MX_SPI1_Init>
    MX_ADC1_Init();
 8000fa2:	f000 fa8f 	bl	80014c4 <MX_ADC1_Init>
    MX_TIM2_Init();
 8000fa6:	f000 fb43 	bl	8001630 <MX_TIM2_Init>
    MX_TIM4_Init();
 8000faa:	f000 fbb5 	bl	8001718 <MX_TIM4_Init>
    MX_I2C1_Init();
 8000fae:	f000 fadb 	bl	8001568 <MX_I2C1_Init>
    MX_USB_DEVICE_Init();
 8000fb2:	f00e fd39 	bl	800fa28 <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 2 */
    //initialize and start display, ADC, and timers
    LCD_init();
 8000fb6:	f004 f907 	bl	80051c8 <LCD_init>
    HAL_TIM_Base_Start( & htim2);
 8000fba:	489d      	ldr	r0, [pc, #628]	@ (8001230 <main+0x2a8>)
 8000fbc:	f008 fa74 	bl	80094a8 <HAL_TIM_Base_Start>
    HAL_ADC_Start_DMA( & hadc1, (uint32_t * ) DMA_values, 312);
 8000fc0:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8000fc4:	499b      	ldr	r1, [pc, #620]	@ (8001234 <main+0x2ac>)
 8000fc6:	489c      	ldr	r0, [pc, #624]	@ (8001238 <main+0x2b0>)
 8000fc8:	f004 fb4c 	bl	8005664 <HAL_ADC_Start_DMA>
    HAL_TIM_OC_Start( & htim2, TIM_CHANNEL_1); //Debugging timer to see time between measurements
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4898      	ldr	r0, [pc, #608]	@ (8001230 <main+0x2a8>)
 8000fd0:	f008 fb44 	bl	800965c <HAL_TIM_OC_Start>
    //initialize to first menu
    menu_val = 0;
 8000fd4:	4b99      	ldr	r3, [pc, #612]	@ (800123c <main+0x2b4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
    selected_option = 0;
 8000fda:	4b99      	ldr	r3, [pc, #612]	@ (8001240 <main+0x2b8>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	801a      	strh	r2, [r3, #0]
    grid_flag = 1;
 8000fe0:	4b98      	ldr	r3, [pc, #608]	@ (8001244 <main+0x2bc>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]
    rolling_flag = 0;
 8000fe6:	4b98      	ldr	r3, [pc, #608]	@ (8001248 <main+0x2c0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
    //initialize and start rotary encoder and draw initial GUI
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2102      	movs	r1, #2
 8000ff0:	4896      	ldr	r0, [pc, #600]	@ (800124c <main+0x2c4>)
 8000ff2:	f005 fdeb 	bl	8006bcc <HAL_GPIO_WritePin>
    HAL_TIM_Encoder_Start_IT( & htim4, TIM_CHANNEL_ALL);
 8000ff6:	213c      	movs	r1, #60	@ 0x3c
 8000ff8:	4895      	ldr	r0, [pc, #596]	@ (8001250 <main+0x2c8>)
 8000ffa:	f008 fc85 	bl	8009908 <HAL_TIM_Encoder_Start_IT>
    scopeMenu();
 8000ffe:	f002 f9cf 	bl	80033a0 <scopeMenu>
    drawTriggerIcon(trigger_mode);
 8001002:	4b94      	ldr	r3, [pc, #592]	@ (8001254 <main+0x2cc>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f003 f9a0 	bl	800434c <drawTriggerIcon>
    menu_val = 12: Y offset menu
    menu_val = 13: Y division menu
    */

    while (1) {
        if (menu_val == 0) {
 800100c:	4b8b      	ldr	r3, [pc, #556]	@ (800123c <main+0x2b4>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d138      	bne.n	8001086 <main+0xfe>
            selected_option = result % 5;
 8001014:	4b90      	ldr	r3, [pc, #576]	@ (8001258 <main+0x2d0>)
 8001016:	6819      	ldr	r1, [r3, #0]
 8001018:	4b90      	ldr	r3, [pc, #576]	@ (800125c <main+0x2d4>)
 800101a:	fba3 2301 	umull	r2, r3, r3, r1
 800101e:	089a      	lsrs	r2, r3, #2
 8001020:	4613      	mov	r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	1aca      	subs	r2, r1, r3
 8001028:	b292      	uxth	r2, r2
 800102a:	4b85      	ldr	r3, [pc, #532]	@ (8001240 <main+0x2b8>)
 800102c:	801a      	strh	r2, [r3, #0]
            init_scope();
 800102e:	f000 fcc3 	bl	80019b8 <init_scope>
            drawOscButtons(selected_option, values_preScale, cursor_x, cursor_y, afe_toggle);
 8001032:	4b83      	ldr	r3, [pc, #524]	@ (8001240 <main+0x2b8>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	b2d8      	uxtb	r0, r3
 8001038:	4b89      	ldr	r3, [pc, #548]	@ (8001260 <main+0x2d8>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b89      	ldr	r3, [pc, #548]	@ (8001264 <main+0x2dc>)
 800103e:	6819      	ldr	r1, [r3, #0]
 8001040:	4b89      	ldr	r3, [pc, #548]	@ (8001268 <main+0x2e0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	460b      	mov	r3, r1
 8001048:	4988      	ldr	r1, [pc, #544]	@ (800126c <main+0x2e4>)
 800104a:	f002 fabf 	bl	80035cc <drawOscButtons>
            if (usb_mode == 1) {
 800104e:	4b88      	ldr	r3, [pc, #544]	@ (8001270 <main+0x2e8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d1da      	bne.n	800100c <main+0x84>
                drawOscButtons(selected_option, values_preScale, cursor_x, cursor_y, afe_toggle);
 8001056:	4b7a      	ldr	r3, [pc, #488]	@ (8001240 <main+0x2b8>)
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	b2d8      	uxtb	r0, r3
 800105c:	4b80      	ldr	r3, [pc, #512]	@ (8001260 <main+0x2d8>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b80      	ldr	r3, [pc, #512]	@ (8001264 <main+0x2dc>)
 8001062:	6819      	ldr	r1, [r3, #0]
 8001064:	4b80      	ldr	r3, [pc, #512]	@ (8001268 <main+0x2e0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	460b      	mov	r3, r1
 800106c:	497f      	ldr	r1, [pc, #508]	@ (800126c <main+0x2e4>)
 800106e:	f002 faad 	bl	80035cc <drawOscButtons>
                if (completed_adc) {
 8001072:	4b80      	ldr	r3, [pc, #512]	@ (8001274 <main+0x2ec>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0c8      	beq.n	800100c <main+0x84>
                    CDC_Transmit_FS((uint8_t * ) DMA_values, 624); // 624 = 312 * 2
 800107a:	f44f 711c 	mov.w	r1, #624	@ 0x270
 800107e:	486d      	ldr	r0, [pc, #436]	@ (8001234 <main+0x2ac>)
 8001080:	f00e fd90 	bl	800fba4 <CDC_Transmit_FS>
 8001084:	e7c2      	b.n	800100c <main+0x84>
                }
            }
        } else if (menu_val == 1) {
 8001086:	4b6d      	ldr	r3, [pc, #436]	@ (800123c <main+0x2b4>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d102      	bne.n	8001094 <main+0x10c>
            drawMenu1();
 800108e:	f002 fc0d 	bl	80038ac <drawMenu1>
 8001092:	e7bb      	b.n	800100c <main+0x84>
        } else if (menu_val == 2) {
 8001094:	4b69      	ldr	r3, [pc, #420]	@ (800123c <main+0x2b4>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d112      	bne.n	80010c2 <main+0x13a>
            selected_option = result % 3;
 800109c:	4b6e      	ldr	r3, [pc, #440]	@ (8001258 <main+0x2d0>)
 800109e:	6819      	ldr	r1, [r3, #0]
 80010a0:	4b75      	ldr	r3, [pc, #468]	@ (8001278 <main+0x2f0>)
 80010a2:	fba3 2301 	umull	r2, r3, r3, r1
 80010a6:	085a      	lsrs	r2, r3, #1
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	1aca      	subs	r2, r1, r3
 80010b0:	b292      	uxth	r2, r2
 80010b2:	4b63      	ldr	r3, [pc, #396]	@ (8001240 <main+0x2b8>)
 80010b4:	801a      	strh	r2, [r3, #0]
            drawMenu2(selected_option);
 80010b6:	4b62      	ldr	r3, [pc, #392]	@ (8001240 <main+0x2b8>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f002 fc5c 	bl	8003978 <drawMenu2>
 80010c0:	e7a4      	b.n	800100c <main+0x84>
        } else if (menu_val == 3) {
 80010c2:	4b5e      	ldr	r3, [pc, #376]	@ (800123c <main+0x2b4>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d112      	bne.n	80010f0 <main+0x168>
            selected_option = result % 3;
 80010ca:	4b63      	ldr	r3, [pc, #396]	@ (8001258 <main+0x2d0>)
 80010cc:	6819      	ldr	r1, [r3, #0]
 80010ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001278 <main+0x2f0>)
 80010d0:	fba3 2301 	umull	r2, r3, r3, r1
 80010d4:	085a      	lsrs	r2, r3, #1
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	1aca      	subs	r2, r1, r3
 80010de:	b292      	uxth	r2, r2
 80010e0:	4b57      	ldr	r3, [pc, #348]	@ (8001240 <main+0x2b8>)
 80010e2:	801a      	strh	r2, [r3, #0]
            drawMenu3(selected_option);
 80010e4:	4b56      	ldr	r3, [pc, #344]	@ (8001240 <main+0x2b8>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 fd4b 	bl	8003b84 <drawMenu3>
 80010ee:	e78d      	b.n	800100c <main+0x84>
        } else if (menu_val == 4) {
 80010f0:	4b52      	ldr	r3, [pc, #328]	@ (800123c <main+0x2b4>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d112      	bne.n	800111e <main+0x196>
            selected_option = result % 3;
 80010f8:	4b57      	ldr	r3, [pc, #348]	@ (8001258 <main+0x2d0>)
 80010fa:	6819      	ldr	r1, [r3, #0]
 80010fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001278 <main+0x2f0>)
 80010fe:	fba3 2301 	umull	r2, r3, r3, r1
 8001102:	085a      	lsrs	r2, r3, #1
 8001104:	4613      	mov	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	1aca      	subs	r2, r1, r3
 800110c:	b292      	uxth	r2, r2
 800110e:	4b4c      	ldr	r3, [pc, #304]	@ (8001240 <main+0x2b8>)
 8001110:	801a      	strh	r2, [r3, #0]
            drawMenu4(selected_option);
 8001112:	4b4b      	ldr	r3, [pc, #300]	@ (8001240 <main+0x2b8>)
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f002 fe3a 	bl	8003d90 <drawMenu4>
 800111c:	e776      	b.n	800100c <main+0x84>
        } else if (menu_val == 5) {
 800111e:	4b47      	ldr	r3, [pc, #284]	@ (800123c <main+0x2b4>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b05      	cmp	r3, #5
 8001124:	d112      	bne.n	800114c <main+0x1c4>
            selected_option = result % 3;
 8001126:	4b4c      	ldr	r3, [pc, #304]	@ (8001258 <main+0x2d0>)
 8001128:	6819      	ldr	r1, [r3, #0]
 800112a:	4b53      	ldr	r3, [pc, #332]	@ (8001278 <main+0x2f0>)
 800112c:	fba3 2301 	umull	r2, r3, r3, r1
 8001130:	085a      	lsrs	r2, r3, #1
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	1aca      	subs	r2, r1, r3
 800113a:	b292      	uxth	r2, r2
 800113c:	4b40      	ldr	r3, [pc, #256]	@ (8001240 <main+0x2b8>)
 800113e:	801a      	strh	r2, [r3, #0]
            drawMenu5(selected_option);
 8001140:	4b3f      	ldr	r3, [pc, #252]	@ (8001240 <main+0x2b8>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f002 ff29 	bl	8003f9c <drawMenu5>
 800114a:	e75f      	b.n	800100c <main+0x84>
        } else if (menu_val == 6) {
 800114c:	4b3b      	ldr	r3, [pc, #236]	@ (800123c <main+0x2b4>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b06      	cmp	r3, #6
 8001152:	d116      	bne.n	8001182 <main+0x1fa>
            selected_option = result % 5;
 8001154:	4b40      	ldr	r3, [pc, #256]	@ (8001258 <main+0x2d0>)
 8001156:	6819      	ldr	r1, [r3, #0]
 8001158:	4b40      	ldr	r3, [pc, #256]	@ (800125c <main+0x2d4>)
 800115a:	fba3 2301 	umull	r2, r3, r3, r1
 800115e:	089a      	lsrs	r2, r3, #2
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	1aca      	subs	r2, r1, r3
 8001168:	b292      	uxth	r2, r2
 800116a:	4b35      	ldr	r3, [pc, #212]	@ (8001240 <main+0x2b8>)
 800116c:	801a      	strh	r2, [r3, #0]
            wave_color = drawMenu6(selected_option);
 800116e:	4b34      	ldr	r3, [pc, #208]	@ (8001240 <main+0x2b8>)
 8001170:	881b      	ldrh	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f003 f818 	bl	80041a8 <drawMenu6>
 8001178:	4603      	mov	r3, r0
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b3f      	ldr	r3, [pc, #252]	@ (800127c <main+0x2f4>)
 800117e:	801a      	strh	r2, [r3, #0]
 8001180:	e744      	b.n	800100c <main+0x84>
        } else if (menu_val == 7) {
 8001182:	4b2e      	ldr	r3, [pc, #184]	@ (800123c <main+0x2b4>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b07      	cmp	r3, #7
 8001188:	d12f      	bne.n	80011ea <main+0x262>
            rotary_divider = 5;
 800118a:	4b3d      	ldr	r3, [pc, #244]	@ (8001280 <main+0x2f8>)
 800118c:	2205      	movs	r2, #5
 800118e:	601a      	str	r2, [r3, #0]
            old_trigger_level = selected_option;
 8001190:	4b2b      	ldr	r3, [pc, #172]	@ (8001240 <main+0x2b8>)
 8001192:	881a      	ldrh	r2, [r3, #0]
 8001194:	4b3b      	ldr	r3, [pc, #236]	@ (8001284 <main+0x2fc>)
 8001196:	801a      	strh	r2, [r3, #0]
            selected_option = (result % 159) + 31;
 8001198:	4b2f      	ldr	r3, [pc, #188]	@ (8001258 <main+0x2d0>)
 800119a:	6819      	ldr	r1, [r3, #0]
 800119c:	4b3a      	ldr	r3, [pc, #232]	@ (8001288 <main+0x300>)
 800119e:	fba3 2301 	umull	r2, r3, r3, r1
 80011a2:	1aca      	subs	r2, r1, r3
 80011a4:	0852      	lsrs	r2, r2, #1
 80011a6:	4413      	add	r3, r2
 80011a8:	09da      	lsrs	r2, r3, #7
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	015b      	lsls	r3, r3, #5
 80011b2:	1a9b      	subs	r3, r3, r2
 80011b4:	1aca      	subs	r2, r1, r3
 80011b6:	b293      	uxth	r3, r2
 80011b8:	331f      	adds	r3, #31
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	4b20      	ldr	r3, [pc, #128]	@ (8001240 <main+0x2b8>)
 80011be:	801a      	strh	r2, [r3, #0]
            drawTriggerLevel(selected_option, old_trigger_level);
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <main+0x2b8>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001284 <main+0x2fc>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	4619      	mov	r1, r3
 80011cc:	4610      	mov	r0, r2
 80011ce:	f003 f89d 	bl	800430c <drawTriggerLevel>
            trigger_level = 4096 - (selected_option - 31) * 32;
 80011d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001240 <main+0x2b8>)
 80011d4:	881b      	ldrh	r3, [r3, #0]
 80011d6:	f1c3 039f 	rsb	r3, r3, #159	@ 0x9f
 80011da:	b29b      	uxth	r3, r3
 80011dc:	015b      	lsls	r3, r3, #5
 80011de:	b29a      	uxth	r2, r3
 80011e0:	4b2a      	ldr	r3, [pc, #168]	@ (800128c <main+0x304>)
 80011e2:	801a      	strh	r2, [r3, #0]
            init_scope();
 80011e4:	f000 fbe8 	bl	80019b8 <init_scope>
 80011e8:	e710      	b.n	800100c <main+0x84>
        } else if (menu_val == 8) {
 80011ea:	4b14      	ldr	r3, [pc, #80]	@ (800123c <main+0x2b4>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d152      	bne.n	8001298 <main+0x310>
            rotary_divider = 1;
 80011f2:	4b23      	ldr	r3, [pc, #140]	@ (8001280 <main+0x2f8>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]
            selected_option = (result % 314) + 3; //display is 3 to 316 pixels wide where graph is shown
 80011f8:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <main+0x2d0>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4b24      	ldr	r3, [pc, #144]	@ (8001290 <main+0x308>)
 80011fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001202:	099b      	lsrs	r3, r3, #6
 8001204:	f44f 719d 	mov.w	r1, #314	@ 0x13a
 8001208:	fb01 f303 	mul.w	r3, r1, r3
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	b29b      	uxth	r3, r3
 8001210:	3303      	adds	r3, #3
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <main+0x2b8>)
 8001216:	801a      	strh	r2, [r3, #0]
            prev_cursor_x = cursor_x;
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <main+0x2d8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a1d      	ldr	r2, [pc, #116]	@ (8001294 <main+0x30c>)
 800121e:	6013      	str	r3, [r2, #0]
            cursor_x = selected_option;
 8001220:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <main+0x2b8>)
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	461a      	mov	r2, r3
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <main+0x2d8>)
 8001228:	601a      	str	r2, [r3, #0]
            init_scope();
 800122a:	f000 fbc5 	bl	80019b8 <init_scope>
 800122e:	e6ed      	b.n	800100c <main+0x84>
 8001230:	200004f0 	.word	0x200004f0
 8001234:	20000cd0 	.word	0x20000cd0
 8001238:	2000033c 	.word	0x2000033c
 800123c:	200011be 	.word	0x200011be
 8001240:	200011bc 	.word	0x200011bc
 8001244:	200011c0 	.word	0x200011c0
 8001248:	200011c8 	.word	0x200011c8
 800124c:	40020000 	.word	0x40020000
 8001250:	20000538 	.word	0x20000538
 8001254:	200011b0 	.word	0x200011b0
 8001258:	200011b8 	.word	0x200011b8
 800125c:	cccccccd 	.word	0xcccccccd
 8001260:	20000008 	.word	0x20000008
 8001264:	2000000c 	.word	0x2000000c
 8001268:	200011f4 	.word	0x200011f4
 800126c:	200007f0 	.word	0x200007f0
 8001270:	200011e8 	.word	0x200011e8
 8001274:	200011d0 	.word	0x200011d0
 8001278:	aaaaaaab 	.word	0xaaaaaaab
 800127c:	20000000 	.word	0x20000000
 8001280:	20000024 	.word	0x20000024
 8001284:	20000004 	.word	0x20000004
 8001288:	9c2d14ef 	.word	0x9c2d14ef
 800128c:	20000002 	.word	0x20000002
 8001290:	342da7f3 	.word	0x342da7f3
 8001294:	20000010 	.word	0x20000010
        } else if (menu_val == 9) {
 8001298:	4b47      	ldr	r3, [pc, #284]	@ (80013b8 <main+0x430>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b09      	cmp	r3, #9
 800129e:	d122      	bne.n	80012e6 <main+0x35e>
            rotary_divider = 1;
 80012a0:	4b46      	ldr	r3, [pc, #280]	@ (80013bc <main+0x434>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]
            selected_option = (result % 159) + 31;
 80012a6:	4b46      	ldr	r3, [pc, #280]	@ (80013c0 <main+0x438>)
 80012a8:	6819      	ldr	r1, [r3, #0]
 80012aa:	4b46      	ldr	r3, [pc, #280]	@ (80013c4 <main+0x43c>)
 80012ac:	fba3 2301 	umull	r2, r3, r3, r1
 80012b0:	1aca      	subs	r2, r1, r3
 80012b2:	0852      	lsrs	r2, r2, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	09da      	lsrs	r2, r3, #7
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	015b      	lsls	r3, r3, #5
 80012c0:	1a9b      	subs	r3, r3, r2
 80012c2:	1aca      	subs	r2, r1, r3
 80012c4:	b293      	uxth	r3, r2
 80012c6:	331f      	adds	r3, #31
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b3f      	ldr	r3, [pc, #252]	@ (80013c8 <main+0x440>)
 80012cc:	801a      	strh	r2, [r3, #0]
            prev_cursor_y = cursor_y;
 80012ce:	4b3f      	ldr	r3, [pc, #252]	@ (80013cc <main+0x444>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a3f      	ldr	r2, [pc, #252]	@ (80013d0 <main+0x448>)
 80012d4:	6013      	str	r3, [r2, #0]
            cursor_y = selected_option;
 80012d6:	4b3c      	ldr	r3, [pc, #240]	@ (80013c8 <main+0x440>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	4b3b      	ldr	r3, [pc, #236]	@ (80013cc <main+0x444>)
 80012de:	601a      	str	r2, [r3, #0]
            init_scope();
 80012e0:	f000 fb6a 	bl	80019b8 <init_scope>
 80012e4:	e692      	b.n	800100c <main+0x84>
        } else if (menu_val == 10) {
 80012e6:	4b34      	ldr	r3, [pc, #208]	@ (80013b8 <main+0x430>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b0a      	cmp	r3, #10
 80012ec:	d116      	bne.n	800131c <main+0x394>
            selected_option = result % 11;
 80012ee:	4b34      	ldr	r3, [pc, #208]	@ (80013c0 <main+0x438>)
 80012f0:	6819      	ldr	r1, [r3, #0]
 80012f2:	4b38      	ldr	r3, [pc, #224]	@ (80013d4 <main+0x44c>)
 80012f4:	fba3 2301 	umull	r2, r3, r3, r1
 80012f8:	08da      	lsrs	r2, r3, #3
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	4413      	add	r3, r2
 8001304:	1aca      	subs	r2, r1, r3
 8001306:	b292      	uxth	r2, r2
 8001308:	4b2f      	ldr	r3, [pc, #188]	@ (80013c8 <main+0x440>)
 800130a:	801a      	strh	r2, [r3, #0]
            x_div_option = selected_option;
 800130c:	4b2e      	ldr	r3, [pc, #184]	@ (80013c8 <main+0x440>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b31      	ldr	r3, [pc, #196]	@ (80013d8 <main+0x450>)
 8001314:	601a      	str	r2, [r3, #0]
            init_scope();
 8001316:	f000 fb4f 	bl	80019b8 <init_scope>
 800131a:	e677      	b.n	800100c <main+0x84>
        } else if (menu_val == 11) {
 800131c:	4b26      	ldr	r3, [pc, #152]	@ (80013b8 <main+0x430>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b0b      	cmp	r3, #11
 8001322:	d11a      	bne.n	800135a <main+0x3d2>
            rotary_divider = 1;
 8001324:	4b25      	ldr	r3, [pc, #148]	@ (80013bc <main+0x434>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]
            selected_option = (result % 314) + 3; //display is 3 to 316 pixels wide where graph is shown
 800132a:	4b25      	ldr	r3, [pc, #148]	@ (80013c0 <main+0x438>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4b2b      	ldr	r3, [pc, #172]	@ (80013dc <main+0x454>)
 8001330:	fba3 1302 	umull	r1, r3, r3, r2
 8001334:	099b      	lsrs	r3, r3, #6
 8001336:	f44f 719d 	mov.w	r1, #314	@ 0x13a
 800133a:	fb01 f303 	mul.w	r3, r1, r3
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	b29b      	uxth	r3, r3
 8001342:	3303      	adds	r3, #3
 8001344:	b29a      	uxth	r2, r3
 8001346:	4b20      	ldr	r3, [pc, #128]	@ (80013c8 <main+0x440>)
 8001348:	801a      	strh	r2, [r3, #0]
            x_shift = selected_option;
 800134a:	4b1f      	ldr	r3, [pc, #124]	@ (80013c8 <main+0x440>)
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <main+0x458>)
 8001352:	601a      	str	r2, [r3, #0]
            init_scope();
 8001354:	f000 fb30 	bl	80019b8 <init_scope>
 8001358:	e658      	b.n	800100c <main+0x84>
        } else if (menu_val == 12) {
 800135a:	4b17      	ldr	r3, [pc, #92]	@ (80013b8 <main+0x430>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b0c      	cmp	r3, #12
 8001360:	d10f      	bne.n	8001382 <main+0x3fa>
            rotary_divider = 1;
 8001362:	4b16      	ldr	r3, [pc, #88]	@ (80013bc <main+0x434>)
 8001364:	2201      	movs	r2, #1
 8001366:	601a      	str	r2, [r3, #0]
            selected_option = result;
 8001368:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <main+0x438>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	b29a      	uxth	r2, r3
 800136e:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <main+0x440>)
 8001370:	801a      	strh	r2, [r3, #0]
            y_shift = selected_option;
 8001372:	4b15      	ldr	r3, [pc, #84]	@ (80013c8 <main+0x440>)
 8001374:	881b      	ldrh	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <main+0x45c>)
 800137a:	601a      	str	r2, [r3, #0]
            init_scope();
 800137c:	f000 fb1c 	bl	80019b8 <init_scope>
 8001380:	e644      	b.n	800100c <main+0x84>
        } else if (menu_val == 13) {
 8001382:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <main+0x430>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b0d      	cmp	r3, #13
 8001388:	f47f ae40 	bne.w	800100c <main+0x84>
            //0.825/div, 0.50/div, 0.25/div, 0.1/div, 0.05/div
            //conv factor: 1, 1.65, 3.3, 8.25, 16.5
            selected_option = result % 5;
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <main+0x438>)
 800138e:	6819      	ldr	r1, [r3, #0]
 8001390:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <main+0x460>)
 8001392:	fba3 2301 	umull	r2, r3, r3, r1
 8001396:	089a      	lsrs	r2, r3, #2
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	1aca      	subs	r2, r1, r3
 80013a0:	b292      	uxth	r2, r2
 80013a2:	4b09      	ldr	r3, [pc, #36]	@ (80013c8 <main+0x440>)
 80013a4:	801a      	strh	r2, [r3, #0]
            y_div_option = selected_option;
 80013a6:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <main+0x440>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <main+0x464>)
 80013ae:	601a      	str	r2, [r3, #0]
            init_scope();
 80013b0:	f000 fb02 	bl	80019b8 <init_scope>
        if (menu_val == 0) {
 80013b4:	e62a      	b.n	800100c <main+0x84>
 80013b6:	bf00      	nop
 80013b8:	200011be 	.word	0x200011be
 80013bc:	20000024 	.word	0x20000024
 80013c0:	200011b8 	.word	0x200011b8
 80013c4:	9c2d14ef 	.word	0x9c2d14ef
 80013c8:	200011bc 	.word	0x200011bc
 80013cc:	2000000c 	.word	0x2000000c
 80013d0:	20000014 	.word	0x20000014
 80013d4:	ba2e8ba3 	.word	0xba2e8ba3
 80013d8:	200011dc 	.word	0x200011dc
 80013dc:	342da7f3 	.word	0x342da7f3
 80013e0:	20000020 	.word	0x20000020
 80013e4:	200011e4 	.word	0x200011e4
 80013e8:	cccccccd 	.word	0xcccccccd
 80013ec:	200011e0 	.word	0x200011e0

080013f0 <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b094      	sub	sp, #80	@ 0x50
 80013f4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {
 80013f6:	f107 0320 	add.w	r3, r7, #32
 80013fa:	2230      	movs	r2, #48	@ 0x30
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f00f fe92 	bl	8011128 <memset>
        0
    };
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
        0
    };
    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	4b28      	ldr	r3, [pc, #160]	@ (80014bc <SystemClock_Config+0xcc>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141c:	4a27      	ldr	r2, [pc, #156]	@ (80014bc <SystemClock_Config+0xcc>)
 800141e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001422:	6413      	str	r3, [r2, #64]	@ 0x40
 8001424:	4b25      	ldr	r3, [pc, #148]	@ (80014bc <SystemClock_Config+0xcc>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001428:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	4b22      	ldr	r3, [pc, #136]	@ (80014c0 <SystemClock_Config+0xd0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a21      	ldr	r2, [pc, #132]	@ (80014c0 <SystemClock_Config+0xd0>)
 800143a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b1f      	ldr	r3, [pc, #124]	@ (80014c0 <SystemClock_Config+0xd0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800144c:	2301      	movs	r3, #1
 800144e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001450:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001456:	2302      	movs	r3, #2
 8001458:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800145a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800145e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 15;
 8001460:	230f      	movs	r3, #15
 8001462:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 144;
 8001464:	2390      	movs	r3, #144	@ 0x90
 8001466:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001468:	2304      	movs	r3, #4
 800146a:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 5;
 800146c:	2305      	movs	r3, #5
 800146e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig( & RCC_OscInitStruct) != HAL_OK) {
 8001470:	f107 0320 	add.w	r3, r7, #32
 8001474:	4618      	mov	r0, r3
 8001476:	f006 ff89 	bl	800838c <HAL_RCC_OscConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SystemClock_Config+0x94>
        Error_Handler();
 8001480:	f001 f9f0 	bl	8002864 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8001484:	230f      	movs	r3, #15
 8001486:	60fb      	str	r3, [r7, #12]
        RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001488:	2302      	movs	r3, #2
 800148a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001494:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001496:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800149a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCC_ClockConfig( & RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	2101      	movs	r1, #1
 80014a2:	4618      	mov	r0, r3
 80014a4:	f007 f9ea 	bl	800887c <HAL_RCC_ClockConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <SystemClock_Config+0xc2>
        Error_Handler();
 80014ae:	f001 f9d9 	bl	8002864 <Error_Handler>
    }
}
 80014b2:	bf00      	nop
 80014b4:	3750      	adds	r7, #80	@ 0x50
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40007000 	.word	0x40007000

080014c4 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN ADC1_Init 0 */
    /* USER CODE END ADC1_Init 0 */
    ADC_ChannelConfTypeDef sConfig = {
 80014ca:	463b      	mov	r3, r7
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
    };
    /* USER CODE BEGIN ADC1_Init 1 */
    /* USER CODE END ADC1_Init 1 */
    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 80014d6:	4b22      	ldr	r3, [pc, #136]	@ (8001560 <MX_ADC1_Init+0x9c>)
 80014d8:	4a22      	ldr	r2, [pc, #136]	@ (8001564 <MX_ADC1_Init+0xa0>)
 80014da:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014dc:	4b20      	ldr	r3, [pc, #128]	@ (8001560 <MX_ADC1_Init+0x9c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001560 <MX_ADC1_Init+0x9c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 80014e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001560 <MX_ADC1_Init+0x9c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 80014ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001560 <MX_ADC1_Init+0x9c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <MX_ADC1_Init+0x9c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80014fc:	4b18      	ldr	r3, [pc, #96]	@ (8001560 <MX_ADC1_Init+0x9c>)
 80014fe:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001502:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001504:	4b16      	ldr	r3, [pc, #88]	@ (8001560 <MX_ADC1_Init+0x9c>)
 8001506:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800150a:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800150c:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <MX_ADC1_Init+0x9c>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001512:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <MX_ADC1_Init+0x9c>)
 8001514:	2201      	movs	r2, #1
 8001516:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = ENABLE;
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <MX_ADC1_Init+0x9c>)
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001520:	4b0f      	ldr	r3, [pc, #60]	@ (8001560 <MX_ADC1_Init+0x9c>)
 8001522:	2201      	movs	r2, #1
 8001524:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init( & hadc1) != HAL_OK) {
 8001526:	480e      	ldr	r0, [pc, #56]	@ (8001560 <MX_ADC1_Init+0x9c>)
 8001528:	f003 ff48 	bl	80053bc <HAL_ADC_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_ADC1_Init+0x72>
        Error_Handler();
 8001532:	f001 f997 	bl	8002864 <Error_Handler>
    }
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_2;
 8001536:	2302      	movs	r3, #2
 8001538:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 800153a:	2301      	movs	r3, #1
 800153c:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800153e:	2300      	movs	r3, #0
 8001540:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel( & hadc1, & sConfig) != HAL_OK) {
 8001542:	463b      	mov	r3, r7
 8001544:	4619      	mov	r1, r3
 8001546:	4806      	ldr	r0, [pc, #24]	@ (8001560 <MX_ADC1_Init+0x9c>)
 8001548:	f004 fa02 	bl	8005950 <HAL_ADC_ConfigChannel>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC1_Init+0x92>
        Error_Handler();
 8001552:	f001 f987 	bl	8002864 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */
    /* USER CODE END ADC1_Init 2 */
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	2000033c 	.word	0x2000033c
 8001564:	40012000 	.word	0x40012000

08001568 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN I2C1_Init 0 */
    /* USER CODE END I2C1_Init 0 */
    /* USER CODE BEGIN I2C1_Init 1 */
    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <MX_I2C1_Init+0x50>)
 800156e:	4a13      	ldr	r2, [pc, #76]	@ (80015bc <MX_I2C1_Init+0x54>)
 8001570:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_I2C1_Init+0x50>)
 8001574:	4a12      	ldr	r2, [pc, #72]	@ (80015c0 <MX_I2C1_Init+0x58>)
 8001576:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <MX_I2C1_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 800157e:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <MX_I2C1_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <MX_I2C1_Init+0x50>)
 8001586:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800158a:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8001592:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001598:	4b07      	ldr	r3, [pc, #28]	@ (80015b8 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init( & hi2c1) != HAL_OK) {
 80015a4:	4804      	ldr	r0, [pc, #16]	@ (80015b8 <MX_I2C1_Init+0x50>)
 80015a6:	f005 fb5d 	bl	8006c64 <HAL_I2C_Init>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_I2C1_Init+0x4c>
        Error_Handler();
 80015b0:	f001 f958 	bl	8002864 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */
    /* USER CODE END I2C1_Init 2 */
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	200003e4 	.word	0x200003e4
 80015bc:	40005400 	.word	0x40005400
 80015c0:	000186a0 	.word	0x000186a0

080015c4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SPI1_Init 0 */
    /* USER CODE END SPI1_Init 0 */
    /* USER CODE BEGIN SPI1_Init 1 */
    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 80015c8:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015ca:	4a18      	ldr	r2, [pc, #96]	@ (800162c <MX_SPI1_Init+0x68>)
 80015cc:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ce:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015d4:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015d6:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015f4:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <MX_SPI1_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_SPI1_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001608:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <MX_SPI1_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_SPI1_Init+0x64>)
 8001610:	220a      	movs	r2, #10
 8001612:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init( & hspi1) != HAL_OK) {
 8001614:	4804      	ldr	r0, [pc, #16]	@ (8001628 <MX_SPI1_Init+0x64>)
 8001616:	f007 fafd 	bl	8008c14 <HAL_SPI_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_SPI1_Init+0x60>
        Error_Handler();
 8001620:	f001 f920 	bl	8002864 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */
    /* USER CODE END SPI1_Init 2 */
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000438 	.word	0x20000438
 800162c:	40013000 	.word	0x40013000

08001630 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b08e      	sub	sp, #56	@ 0x38
 8001634:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM2_Init 0 */
    /* USER CODE END TIM2_Init 0 */
    TIM_ClockConfigTypeDef sClockSourceConfig = {
 8001636:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
        0
    };
    TIM_MasterConfigTypeDef sMasterConfig = {
 8001644:	f107 0320 	add.w	r3, r7, #32
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
        0
    };
    TIM_OC_InitTypeDef sConfigOC = {
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
 800165a:	611a      	str	r2, [r3, #16]
 800165c:	615a      	str	r2, [r3, #20]
 800165e:	619a      	str	r2, [r3, #24]
        0
    };
    /* USER CODE BEGIN TIM2_Init 1 */
    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8001660:	4b2c      	ldr	r3, [pc, #176]	@ (8001714 <MX_TIM2_Init+0xe4>)
 8001662:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001666:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 0;
 8001668:	4b2a      	ldr	r3, [pc, #168]	@ (8001714 <MX_TIM2_Init+0xe4>)
 800166a:	2200      	movs	r2, #0
 800166c:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166e:	4b29      	ldr	r3, [pc, #164]	@ (8001714 <MX_TIM2_Init+0xe4>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 23;
 8001674:	4b27      	ldr	r3, [pc, #156]	@ (8001714 <MX_TIM2_Init+0xe4>)
 8001676:	2217      	movs	r2, #23
 8001678:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b26      	ldr	r3, [pc, #152]	@ (8001714 <MX_TIM2_Init+0xe4>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001680:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <MX_TIM2_Init+0xe4>)
 8001682:	2280      	movs	r2, #128	@ 0x80
 8001684:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init( & htim2) != HAL_OK) {
 8001686:	4823      	ldr	r0, [pc, #140]	@ (8001714 <MX_TIM2_Init+0xe4>)
 8001688:	f007 febe 	bl	8009408 <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM2_Init+0x66>
        Error_Handler();
 8001692:	f001 f8e7 	bl	8002864 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001696:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800169a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_TIM_ConfigClockSource( & htim2, & sClockSourceConfig) != HAL_OK) {
 800169c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016a0:	4619      	mov	r1, r3
 80016a2:	481c      	ldr	r0, [pc, #112]	@ (8001714 <MX_TIM2_Init+0xe4>)
 80016a4:	f008 fb2a 	bl	8009cfc <HAL_TIM_ConfigClockSource>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM2_Init+0x82>
        Error_Handler();
 80016ae:	f001 f8d9 	bl	8002864 <Error_Handler>
    }
    if (HAL_TIM_OC_Init( & htim2) != HAL_OK) {
 80016b2:	4818      	ldr	r0, [pc, #96]	@ (8001714 <MX_TIM2_Init+0xe4>)
 80016b4:	f007 ff79 	bl	80095aa <HAL_TIM_OC_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM2_Init+0x92>
        Error_Handler();
 80016be:	f001 f8d1 	bl	8002864 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016c2:	2320      	movs	r3, #32
 80016c4:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_TIMEx_MasterConfigSynchronization( & htim2, & sMasterConfig) != HAL_OK) {
 80016ca:	f107 0320 	add.w	r3, r7, #32
 80016ce:	4619      	mov	r1, r3
 80016d0:	4810      	ldr	r0, [pc, #64]	@ (8001714 <MX_TIM2_Init+0xe4>)
 80016d2:	f008 fedb 	bl	800a48c <HAL_TIMEx_MasterConfigSynchronization>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM2_Init+0xb0>
        Error_Handler();
 80016dc:	f001 f8c2 	bl	8002864 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80016e0:	2330      	movs	r3, #48	@ 0x30
 80016e2:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_OC_ConfigChannel( & htim2, & sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2200      	movs	r2, #0
 80016f4:	4619      	mov	r1, r3
 80016f6:	4807      	ldr	r0, [pc, #28]	@ (8001714 <MX_TIM2_Init+0xe4>)
 80016f8:	f008 faa4 	bl	8009c44 <HAL_TIM_OC_ConfigChannel>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM2_Init+0xd6>
        Error_Handler();
 8001702:	f001 f8af 	bl	8002864 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */
    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit( & htim2);
 8001706:	4803      	ldr	r0, [pc, #12]	@ (8001714 <MX_TIM2_Init+0xe4>)
 8001708:	f001 fc38 	bl	8002f7c <HAL_TIM_MspPostInit>
}
 800170c:	bf00      	nop
 800170e:	3738      	adds	r7, #56	@ 0x38
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	200004f0 	.word	0x200004f0

08001718 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b08c      	sub	sp, #48	@ 0x30
 800171c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM4_Init 0 */
    /* USER CODE END TIM4_Init 0 */
    TIM_Encoder_InitTypeDef sConfig = {
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	2224      	movs	r2, #36	@ 0x24
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f00f fcfe 	bl	8011128 <memset>
        0
    };
    TIM_MasterConfigTypeDef sMasterConfig = {
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
        0
    };
    /* USER CODE BEGIN TIM4_Init 1 */
    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 8001734:	4b20      	ldr	r3, [pc, #128]	@ (80017b8 <MX_TIM4_Init+0xa0>)
 8001736:	4a21      	ldr	r2, [pc, #132]	@ (80017bc <MX_TIM4_Init+0xa4>)
 8001738:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 0;
 800173a:	4b1f      	ldr	r3, [pc, #124]	@ (80017b8 <MX_TIM4_Init+0xa0>)
 800173c:	2200      	movs	r2, #0
 800173e:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001740:	4b1d      	ldr	r3, [pc, #116]	@ (80017b8 <MX_TIM4_Init+0xa0>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 21000;
 8001746:	4b1c      	ldr	r3, [pc, #112]	@ (80017b8 <MX_TIM4_Init+0xa0>)
 8001748:	f245 2208 	movw	r2, #21000	@ 0x5208
 800174c:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174e:	4b1a      	ldr	r3, [pc, #104]	@ (80017b8 <MX_TIM4_Init+0xa0>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001754:	4b18      	ldr	r3, [pc, #96]	@ (80017b8 <MX_TIM4_Init+0xa0>)
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800175a:	2303      	movs	r3, #3
 800175c:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800175e:	2302      	movs	r3, #2
 8001760:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001762:	2301      	movs	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001766:	2300      	movs	r3, #0
 8001768:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800176e:	2302      	movs	r3, #2
 8001770:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001772:	2301      	movs	r3, #1
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	62bb      	str	r3, [r7, #40]	@ 0x28
    sConfig.IC2Filter = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_TIM_Encoder_Init( & htim4, & sConfig) != HAL_OK) {
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	4619      	mov	r1, r3
 8001784:	480c      	ldr	r0, [pc, #48]	@ (80017b8 <MX_TIM4_Init+0xa0>)
 8001786:	f008 f819 	bl	80097bc <HAL_TIM_Encoder_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM4_Init+0x7c>
        Error_Handler();
 8001790:	f001 f868 	bl	8002864 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001794:	2300      	movs	r3, #0
 8001796:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization( & htim4, & sMasterConfig) != HAL_OK) {
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	4619      	mov	r1, r3
 80017a0:	4805      	ldr	r0, [pc, #20]	@ (80017b8 <MX_TIM4_Init+0xa0>)
 80017a2:	f008 fe73 	bl	800a48c <HAL_TIMEx_MasterConfigSynchronization>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM4_Init+0x98>
        Error_Handler();
 80017ac:	f001 f85a 	bl	8002864 <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */
    /* USER CODE END TIM4_Init 2 */
}
 80017b0:	bf00      	nop
 80017b2:	3730      	adds	r7, #48	@ 0x30
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000538 	.word	0x20000538
 80017bc:	40000800 	.word	0x40000800

080017c0 <MX_DMA_Init>:
/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <MX_DMA_Init+0x4c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	4a0f      	ldr	r2, [pc, #60]	@ (800180c <MX_DMA_Init+0x4c>)
 80017d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d6:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <MX_DMA_Init+0x4c>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
    /* DMA interrupt init */
    /* DMA2_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2038      	movs	r0, #56	@ 0x38
 80017e8:	f004 fc47 	bl	800607a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017ec:	2038      	movs	r0, #56	@ 0x38
 80017ee:	f004 fc60 	bl	80060b2 <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream2_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	203a      	movs	r0, #58	@ 0x3a
 80017f8:	f004 fc3f 	bl	800607a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80017fc:	203a      	movs	r0, #58	@ 0x3a
 80017fe:	f004 fc58 	bl	80060b2 <HAL_NVIC_EnableIRQ>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800

08001810 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]
        0
    };
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */
    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b5f      	ldr	r3, [pc, #380]	@ (80019a8 <MX_GPIO_Init+0x198>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a5e      	ldr	r2, [pc, #376]	@ (80019a8 <MX_GPIO_Init+0x198>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b5c      	ldr	r3, [pc, #368]	@ (80019a8 <MX_GPIO_Init+0x198>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0304 	and.w	r3, r3, #4
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b58      	ldr	r3, [pc, #352]	@ (80019a8 <MX_GPIO_Init+0x198>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a57      	ldr	r2, [pc, #348]	@ (80019a8 <MX_GPIO_Init+0x198>)
 800184c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b55      	ldr	r3, [pc, #340]	@ (80019a8 <MX_GPIO_Init+0x198>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	4b51      	ldr	r3, [pc, #324]	@ (80019a8 <MX_GPIO_Init+0x198>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	4a50      	ldr	r2, [pc, #320]	@ (80019a8 <MX_GPIO_Init+0x198>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	@ 0x30
 800186e:	4b4e      	ldr	r3, [pc, #312]	@ (80019a8 <MX_GPIO_Init+0x198>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	4b4a      	ldr	r3, [pc, #296]	@ (80019a8 <MX_GPIO_Init+0x198>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a49      	ldr	r2, [pc, #292]	@ (80019a8 <MX_GPIO_Init+0x198>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b47      	ldr	r3, [pc, #284]	@ (80019a8 <MX_GPIO_Init+0x198>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800189c:	4843      	ldr	r0, [pc, #268]	@ (80019ac <MX_GPIO_Init+0x19c>)
 800189e:	f005 f995 	bl	8006bcc <HAL_GPIO_WritePin>
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2102      	movs	r1, #2
 80018a6:	4842      	ldr	r0, [pc, #264]	@ (80019b0 <MX_GPIO_Init+0x1a0>)
 80018a8:	f005 f990 	bl	8006bcc <HAL_GPIO_WritePin>
    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin | LCD_RST_Pin | LCD_CS_Pin, GPIO_PIN_SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	2107      	movs	r1, #7
 80018b0:	4840      	ldr	r0, [pc, #256]	@ (80019b4 <MX_GPIO_Init+0x1a4>)
 80018b2:	f005 f98b 	bl	8006bcc <HAL_GPIO_WritePin>
    /*Configure GPIO pin : PC13 */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018bc:	2301      	movs	r3, #1
 80018be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c4:	2300      	movs	r3, #0
 80018c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, & GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	4837      	ldr	r0, [pc, #220]	@ (80019ac <MX_GPIO_Init+0x19c>)
 80018d0:	f004 fff8 	bl	80068c4 <HAL_GPIO_Init>
    /*Configure GPIO pin : PA1 */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018d4:	2302      	movs	r3, #2
 80018d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, & GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	4831      	ldr	r0, [pc, #196]	@ (80019b0 <MX_GPIO_Init+0x1a0>)
 80018ec:	f004 ffea 	bl	80068c4 <HAL_GPIO_Init>
    /*Configure GPIO pins : LOGIC_CH1_Pin LOGIC_CH2_Pin */
    GPIO_InitStruct.Pin = LOGIC_CH1_Pin | LOGIC_CH2_Pin;
 80018f0:	2318      	movs	r3, #24
 80018f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, & GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	482b      	ldr	r0, [pc, #172]	@ (80019b0 <MX_GPIO_Init+0x1a0>)
 8001904:	f004 ffde 	bl	80068c4 <HAL_GPIO_Init>
    /*Configure GPIO pin : LCD_DC_Pin */
    GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001908:	2301      	movs	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001910:	2301      	movs	r3, #1
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001914:	2302      	movs	r3, #2
 8001916:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LCD_DC_GPIO_Port, & GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4825      	ldr	r0, [pc, #148]	@ (80019b4 <MX_GPIO_Init+0x1a4>)
 8001920:	f004 ffd0 	bl	80068c4 <HAL_GPIO_Init>
    /*Configure GPIO pins : LCD_RST_Pin LCD_CS_Pin */
    GPIO_InitStruct.Pin = LCD_RST_Pin | LCD_CS_Pin;
 8001924:	2306      	movs	r3, #6
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001928:	2301      	movs	r3, #1
 800192a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800192c:	2301      	movs	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, & GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	481e      	ldr	r0, [pc, #120]	@ (80019b4 <MX_GPIO_Init+0x1a4>)
 800193c:	f004 ffc2 	bl	80068c4 <HAL_GPIO_Init>
    /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin BTN_3_Pin BTN_4_Pin */
    GPIO_InitStruct.Pin = BTN_1_Pin | BTN_2_Pin | BTN_3_Pin | BTN_4_Pin;
 8001940:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001946:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800194a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800194c:	2302      	movs	r3, #2
 800194e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, & GPIO_InitStruct);
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4619      	mov	r1, r3
 8001956:	4817      	ldr	r0, [pc, #92]	@ (80019b4 <MX_GPIO_Init+0x1a4>)
 8001958:	f004 ffb4 	bl	80068c4 <HAL_GPIO_Init>
    /*Configure GPIO pin : ROTARY_Key_Pin */
    GPIO_InitStruct.Pin = ROTARY_Key_Pin;
 800195c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001962:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001968:	2301      	movs	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ROTARY_Key_GPIO_Port, & GPIO_InitStruct);
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4619      	mov	r1, r3
 8001972:	480f      	ldr	r0, [pc, #60]	@ (80019b0 <MX_GPIO_Init+0x1a0>)
 8001974:	f004 ffa6 	bl	80068c4 <HAL_GPIO_Init>
    /*Configure GPIO pins : LOGIC_CH4_Pin LOGIC_CH3_Pin ROTARY_BTN_Pin */
    GPIO_InitStruct.Pin = LOGIC_CH4_Pin | LOGIC_CH3_Pin | ROTARY_BTN_Pin;
 8001978:	2338      	movs	r3, #56	@ 0x38
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197c:	2300      	movs	r3, #0
 800197e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, & GPIO_InitStruct);
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4619      	mov	r1, r3
 800198a:	480a      	ldr	r0, [pc, #40]	@ (80019b4 <MX_GPIO_Init+0x1a4>)
 800198c:	f004 ff9a 	bl	80068c4 <HAL_GPIO_Init>
    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	2100      	movs	r1, #0
 8001994:	2028      	movs	r0, #40	@ 0x28
 8001996:	f004 fb70 	bl	800607a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800199a:	2028      	movs	r0, #40	@ 0x28
 800199c:	f004 fb89 	bl	80060b2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80019a0:	bf00      	nop
 80019a2:	3728      	adds	r7, #40	@ 0x28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020800 	.word	0x40020800
 80019b0:	40020000 	.word	0x40020000
 80019b4:	40020400 	.word	0x40020400

080019b8 <init_scope>:
/* USER CODE BEGIN 4 */
//This function is responsible for drawing the waveform and restarting new measurements
void init_scope() {
 80019b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ba:	b089      	sub	sp, #36	@ 0x24
 80019bc:	af06      	add	r7, sp, #24
    //Toggles drawing the grid, clearing frame, and trigger icon on the GUI
    if (grid_flag) {
 80019be:	4b93      	ldr	r3, [pc, #588]	@ (8001c0c <init_scope+0x254>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <init_scope+0x12>
        drawGrid();
 80019c6:	f001 fdb5 	bl	8003534 <drawGrid>
    }
    if (clearFrame == 1) {
 80019ca:	4b91      	ldr	r3, [pc, #580]	@ (8001c10 <init_scope+0x258>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d105      	bne.n	80019de <init_scope+0x26>
        clearMenuFrame();
 80019d2:	f002 fc7d 	bl	80042d0 <clearMenuFrame>
        clearFrame = 0;
 80019d6:	4b8e      	ldr	r3, [pc, #568]	@ (8001c10 <init_scope+0x258>)
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	e008      	b.n	80019f0 <init_scope+0x38>
    } else if (clearFrame == 2) {
 80019de:	4b8c      	ldr	r3, [pc, #560]	@ (8001c10 <init_scope+0x258>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d104      	bne.n	80019f0 <init_scope+0x38>
        clearFullFrame();
 80019e6:	f002 fc82 	bl	80042ee <clearFullFrame>
        clearFrame = 0;
 80019ea:	4b89      	ldr	r3, [pc, #548]	@ (8001c10 <init_scope+0x258>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
    }
    if (draw_trigger_flag == 1) {
 80019f0:	4b88      	ldr	r3, [pc, #544]	@ (8001c14 <init_scope+0x25c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d107      	bne.n	8001a08 <init_scope+0x50>
        drawTriggerIcon(trigger_mode);
 80019f8:	4b87      	ldr	r3, [pc, #540]	@ (8001c18 <init_scope+0x260>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f002 fca5 	bl	800434c <drawTriggerIcon>
        draw_trigger_flag = 0;
 8001a02:	4b84      	ldr	r3, [pc, #528]	@ (8001c14 <init_scope+0x25c>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
    }
    //Moves collected ADC values into new array, restarts ADC, then runs main oscilloscope functionality
    if (completed_adc == 1 && !rolling_flag && run_scope) {
 8001a08:	4b84      	ldr	r3, [pc, #528]	@ (8001c1c <init_scope+0x264>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d16b      	bne.n	8001ae8 <init_scope+0x130>
 8001a10:	4b83      	ldr	r3, [pc, #524]	@ (8001c20 <init_scope+0x268>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d167      	bne.n	8001ae8 <init_scope+0x130>
 8001a18:	4b82      	ldr	r3, [pc, #520]	@ (8001c24 <init_scope+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d063      	beq.n	8001ae8 <init_scope+0x130>
        memmove(values, DMA_values, 312 * sizeof(uint16_t));
 8001a20:	4a81      	ldr	r2, [pc, #516]	@ (8001c28 <init_scope+0x270>)
 8001a22:	4b82      	ldr	r3, [pc, #520]	@ (8001c2c <init_scope+0x274>)
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f44f 731c 	mov.w	r3, #624	@ 0x270
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f00f fbfa 	bl	8011226 <memcpy>
        memmove(values_preScale, DMA_values, 312 * sizeof(uint16_t));
 8001a32:	4a7f      	ldr	r2, [pc, #508]	@ (8001c30 <init_scope+0x278>)
 8001a34:	4b7d      	ldr	r3, [pc, #500]	@ (8001c2c <init_scope+0x274>)
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f44f 731c 	mov.w	r3, #624	@ 0x270
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f00f fbf1 	bl	8011226 <memcpy>
        completed_adc = 0;
 8001a44:	4b75      	ldr	r3, [pc, #468]	@ (8001c1c <init_scope+0x264>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
        startScope( & htim2, PSC, ARR);
 8001a4a:	4b7a      	ldr	r3, [pc, #488]	@ (8001c34 <init_scope+0x27c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a7a      	ldr	r2, [pc, #488]	@ (8001c38 <init_scope+0x280>)
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	4619      	mov	r1, r3
 8001a54:	4879      	ldr	r0, [pc, #484]	@ (8001c3c <init_scope+0x284>)
 8001a56:	f000 ff16 	bl	8002886 <startScope>
        HAL_ADC_Start_DMA( & hadc1, (uint32_t * ) DMA_values, 312);
 8001a5a:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8001a5e:	4973      	ldr	r1, [pc, #460]	@ (8001c2c <init_scope+0x274>)
 8001a60:	4877      	ldr	r0, [pc, #476]	@ (8001c40 <init_scope+0x288>)
 8001a62:	f003 fdff 	bl	8005664 <HAL_ADC_Start_DMA>
        mapScreen(values, y_shift, y_div_option, map_vals, afe_toggle);
 8001a66:	4b77      	ldr	r3, [pc, #476]	@ (8001c44 <init_scope+0x28c>)
 8001a68:	6819      	ldr	r1, [r3, #0]
 8001a6a:	4b77      	ldr	r3, [pc, #476]	@ (8001c48 <init_scope+0x290>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4b77      	ldr	r3, [pc, #476]	@ (8001c4c <init_scope+0x294>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	4b76      	ldr	r3, [pc, #472]	@ (8001c50 <init_scope+0x298>)
 8001a76:	486c      	ldr	r0, [pc, #432]	@ (8001c28 <init_scope+0x270>)
 8001a78:	f000 ffaa 	bl	80029d0 <mapScreen>
        drawWaveform(values, old_values, wave_color);
 8001a7c:	4b75      	ldr	r3, [pc, #468]	@ (8001c54 <init_scope+0x29c>)
 8001a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	4974      	ldr	r1, [pc, #464]	@ (8001c58 <init_scope+0x2a0>)
 8001a88:	4867      	ldr	r0, [pc, #412]	@ (8001c28 <init_scope+0x270>)
 8001a8a:	f001 fc0b 	bl	80032a4 <drawWaveform>
        drawCursors(show_cursors, cursor_x, cursor_y, prev_cursor_x, prev_cursor_y, PSC, ARR, map_vals, values, afe_toggle);
 8001a8e:	4b73      	ldr	r3, [pc, #460]	@ (8001c5c <init_scope+0x2a4>)
 8001a90:	681c      	ldr	r4, [r3, #0]
 8001a92:	4b73      	ldr	r3, [pc, #460]	@ (8001c60 <init_scope+0x2a8>)
 8001a94:	681d      	ldr	r5, [r3, #0]
 8001a96:	4b73      	ldr	r3, [pc, #460]	@ (8001c64 <init_scope+0x2ac>)
 8001a98:	681e      	ldr	r6, [r3, #0]
 8001a9a:	4b73      	ldr	r3, [pc, #460]	@ (8001c68 <init_scope+0x2b0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	4b72      	ldr	r3, [pc, #456]	@ (8001c6c <init_scope+0x2b4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a63      	ldr	r2, [pc, #396]	@ (8001c34 <init_scope+0x27c>)
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	4963      	ldr	r1, [pc, #396]	@ (8001c38 <init_scope+0x280>)
 8001aaa:	6809      	ldr	r1, [r1, #0]
 8001aac:	4867      	ldr	r0, [pc, #412]	@ (8001c4c <init_scope+0x294>)
 8001aae:	6800      	ldr	r0, [r0, #0]
 8001ab0:	9005      	str	r0, [sp, #20]
 8001ab2:	485d      	ldr	r0, [pc, #372]	@ (8001c28 <init_scope+0x270>)
 8001ab4:	9004      	str	r0, [sp, #16]
 8001ab6:	4866      	ldr	r0, [pc, #408]	@ (8001c50 <init_scope+0x298>)
 8001ab8:	9003      	str	r0, [sp, #12]
 8001aba:	9102      	str	r1, [sp, #8]
 8001abc:	9201      	str	r2, [sp, #4]
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4632      	mov	r2, r6
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f002 fc66 	bl	8004398 <drawCursors>
        drawUsbMode(usb_mode);
 8001acc:	4b68      	ldr	r3, [pc, #416]	@ (8001c70 <init_scope+0x2b8>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f001 fec3 	bl	800385c <drawUsbMode>
        drawDiv(x_div_option, & PSC, & ARR, y_div_option);
 8001ad6:	4b67      	ldr	r3, [pc, #412]	@ (8001c74 <init_scope+0x2bc>)
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	4b5b      	ldr	r3, [pc, #364]	@ (8001c48 <init_scope+0x290>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a56      	ldr	r2, [pc, #344]	@ (8001c38 <init_scope+0x280>)
 8001ae0:	4954      	ldr	r1, [pc, #336]	@ (8001c34 <init_scope+0x27c>)
 8001ae2:	f002 fe53 	bl	800478c <drawDiv>
 8001ae6:	e083      	b.n	8001bf0 <init_scope+0x238>
        //updates waveform with previously stored values if ADC did not complete a transfer
    } else if (completed_adc == 0 && !rolling_flag && run_scope == 0) {
 8001ae8:	4b4c      	ldr	r3, [pc, #304]	@ (8001c1c <init_scope+0x264>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d13d      	bne.n	8001b6c <init_scope+0x1b4>
 8001af0:	4b4b      	ldr	r3, [pc, #300]	@ (8001c20 <init_scope+0x268>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d139      	bne.n	8001b6c <init_scope+0x1b4>
 8001af8:	4b4a      	ldr	r3, [pc, #296]	@ (8001c24 <init_scope+0x26c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d135      	bne.n	8001b6c <init_scope+0x1b4>
        drawWaveform(values, old_values, wave_color);
 8001b00:	4b54      	ldr	r3, [pc, #336]	@ (8001c54 <init_scope+0x29c>)
 8001b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4953      	ldr	r1, [pc, #332]	@ (8001c58 <init_scope+0x2a0>)
 8001b0c:	4846      	ldr	r0, [pc, #280]	@ (8001c28 <init_scope+0x270>)
 8001b0e:	f001 fbc9 	bl	80032a4 <drawWaveform>
        drawCursors(show_cursors, cursor_x, cursor_y, prev_cursor_x, prev_cursor_y, PSC, ARR, map_vals, values, afe_toggle);
 8001b12:	4b52      	ldr	r3, [pc, #328]	@ (8001c5c <init_scope+0x2a4>)
 8001b14:	681c      	ldr	r4, [r3, #0]
 8001b16:	4b52      	ldr	r3, [pc, #328]	@ (8001c60 <init_scope+0x2a8>)
 8001b18:	681d      	ldr	r5, [r3, #0]
 8001b1a:	4b52      	ldr	r3, [pc, #328]	@ (8001c64 <init_scope+0x2ac>)
 8001b1c:	681e      	ldr	r6, [r3, #0]
 8001b1e:	4b52      	ldr	r3, [pc, #328]	@ (8001c68 <init_scope+0x2b0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	4b51      	ldr	r3, [pc, #324]	@ (8001c6c <init_scope+0x2b4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a42      	ldr	r2, [pc, #264]	@ (8001c34 <init_scope+0x27c>)
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	4942      	ldr	r1, [pc, #264]	@ (8001c38 <init_scope+0x280>)
 8001b2e:	6809      	ldr	r1, [r1, #0]
 8001b30:	4846      	ldr	r0, [pc, #280]	@ (8001c4c <init_scope+0x294>)
 8001b32:	6800      	ldr	r0, [r0, #0]
 8001b34:	9005      	str	r0, [sp, #20]
 8001b36:	483c      	ldr	r0, [pc, #240]	@ (8001c28 <init_scope+0x270>)
 8001b38:	9004      	str	r0, [sp, #16]
 8001b3a:	4845      	ldr	r0, [pc, #276]	@ (8001c50 <init_scope+0x298>)
 8001b3c:	9003      	str	r0, [sp, #12]
 8001b3e:	9102      	str	r1, [sp, #8]
 8001b40:	9201      	str	r2, [sp, #4]
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4632      	mov	r2, r6
 8001b48:	4629      	mov	r1, r5
 8001b4a:	4620      	mov	r0, r4
 8001b4c:	f002 fc24 	bl	8004398 <drawCursors>
        drawUsbMode(usb_mode);
 8001b50:	4b47      	ldr	r3, [pc, #284]	@ (8001c70 <init_scope+0x2b8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 fe81 	bl	800385c <drawUsbMode>
        drawDiv(x_div_option, & PSC, & ARR, y_div_option);
 8001b5a:	4b46      	ldr	r3, [pc, #280]	@ (8001c74 <init_scope+0x2bc>)
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c48 <init_scope+0x290>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a35      	ldr	r2, [pc, #212]	@ (8001c38 <init_scope+0x280>)
 8001b64:	4933      	ldr	r1, [pc, #204]	@ (8001c34 <init_scope+0x27c>)
 8001b66:	f002 fe11 	bl	800478c <drawDiv>
 8001b6a:	e041      	b.n	8001bf0 <init_scope+0x238>
        //ROLLING MODE
    } else if (rolling_flag && run_scope) {
 8001b6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c20 <init_scope+0x268>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d03d      	beq.n	8001bf0 <init_scope+0x238>
 8001b74:	4b2b      	ldr	r3, [pc, #172]	@ (8001c24 <init_scope+0x26c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d039      	beq.n	8001bf0 <init_scope+0x238>
        if (counter == 312) {
 8001b7c:	4b3e      	ldr	r3, [pc, #248]	@ (8001c78 <init_scope+0x2c0>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001b84:	d102      	bne.n	8001b8c <init_scope+0x1d4>
            counter = 0;
 8001b86:	4b3c      	ldr	r3, [pc, #240]	@ (8001c78 <init_scope+0x2c0>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
        }
        UG_DrawLine(counter + 3, 31, counter + 3, 189, C_BLACK);
 8001b8c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c78 <init_scope+0x2c0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	3303      	adds	r3, #3
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	b218      	sxth	r0, r3
 8001b98:	4b37      	ldr	r3, [pc, #220]	@ (8001c78 <init_scope+0x2c0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3303      	adds	r3, #3
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	b21a      	sxth	r2, r3
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	23bd      	movs	r3, #189	@ 0xbd
 8001baa:	211f      	movs	r1, #31
 8001bac:	f00a f9ec 	bl	800bf88 <UG_DrawLine>
        LCD_DrawPixel(counter + 3, 189 - HAL_ADC_GetValue( & hadc1) / 26, wave_color);
 8001bb0:	4b31      	ldr	r3, [pc, #196]	@ (8001c78 <init_scope+0x2c0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	3303      	adds	r3, #3
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	b21c      	sxth	r4, r3
 8001bbc:	4820      	ldr	r0, [pc, #128]	@ (8001c40 <init_scope+0x288>)
 8001bbe:	f003 fe9b 	bl	80058f8 <HAL_ADC_GetValue>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4a2d      	ldr	r2, [pc, #180]	@ (8001c7c <init_scope+0x2c4>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	08db      	lsrs	r3, r3, #3
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	f1c3 03bd 	rsb	r3, r3, #189	@ 0xbd
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c54 <init_scope+0x29c>)
 8001bd8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001bdc:	b292      	uxth	r2, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	4620      	mov	r0, r4
 8001be2:	f003 f933 	bl	8004e4c <LCD_DrawPixel>
        counter++;
 8001be6:	4b24      	ldr	r3, [pc, #144]	@ (8001c78 <init_scope+0x2c0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	3301      	adds	r3, #1
 8001bec:	4a22      	ldr	r2, [pc, #136]	@ (8001c78 <init_scope+0x2c0>)
 8001bee:	6013      	str	r3, [r2, #0]
    }
    //copies current waveform into old_values to be used for clearing
    memcpy(old_values, values, 312 * sizeof(uint16_t));
 8001bf0:	4a19      	ldr	r2, [pc, #100]	@ (8001c58 <init_scope+0x2a0>)
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c28 <init_scope+0x270>)
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f44f 731c 	mov.w	r3, #624	@ 0x270
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	f00f fb12 	bl	8011226 <memcpy>
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200011c0 	.word	0x200011c0
 8001c10:	200011f0 	.word	0x200011f0
 8001c14:	200011c4 	.word	0x200011c4
 8001c18:	200011b0 	.word	0x200011b0
 8001c1c:	200011d0 	.word	0x200011d0
 8001c20:	200011c8 	.word	0x200011c8
 8001c24:	20000018 	.word	0x20000018
 8001c28:	20000580 	.word	0x20000580
 8001c2c:	20000cd0 	.word	0x20000cd0
 8001c30:	200007f0 	.word	0x200007f0
 8001c34:	200011d8 	.word	0x200011d8
 8001c38:	2000001c 	.word	0x2000001c
 8001c3c:	200004f0 	.word	0x200004f0
 8001c40:	2000033c 	.word	0x2000033c
 8001c44:	200011e4 	.word	0x200011e4
 8001c48:	200011e0 	.word	0x200011e0
 8001c4c:	200011f4 	.word	0x200011f4
 8001c50:	20000f40 	.word	0x20000f40
 8001c54:	20000000 	.word	0x20000000
 8001c58:	20000a60 	.word	0x20000a60
 8001c5c:	200011d4 	.word	0x200011d4
 8001c60:	20000008 	.word	0x20000008
 8001c64:	2000000c 	.word	0x2000000c
 8001c68:	20000010 	.word	0x20000010
 8001c6c:	20000014 	.word	0x20000014
 8001c70:	200011e8 	.word	0x200011e8
 8001c74:	200011dc 	.word	0x200011dc
 8001c78:	200011cc 	.word	0x200011cc
 8001c7c:	4ec4ec4f 	.word	0x4ec4ec4f

08001c80 <HAL_ADC_ConvCpltCallback>:
//ADC callback function, gets called once a full conversion of 312 values is measured and transferred via DMA
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef * hadc) {
 8001c80:	b5b0      	push	{r4, r5, r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
    //stop ADC once one full conversion of 312 values is complete
    HAL_TIM_Base_Stop( & htim2);
 8001c88:	4867      	ldr	r0, [pc, #412]	@ (8001e28 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001c8a:	f007 fc67 	bl	800955c <HAL_TIM_Base_Stop>
    HAL_ADC_Stop_DMA( & hadc1);
 8001c8e:	4867      	ldr	r0, [pc, #412]	@ (8001e2c <HAL_ADC_ConvCpltCallback+0x1ac>)
 8001c90:	f003 fdd8 	bl	8005844 <HAL_ADC_Stop_DMA>
    //Toggles GPIO Pin for debugging purposes, to measure time between measurements
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8001c94:	2102      	movs	r1, #2
 8001c96:	4866      	ldr	r0, [pc, #408]	@ (8001e30 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001c98:	f004 ffb1 	bl	8006bfe <HAL_GPIO_TogglePin>
    //Trigger logic, checks if it is rising or falling with a 10% tolerance
    if ((DMA_values[x_shift] > trigger_level / 1.10 && DMA_values[x_shift] < trigger_level * 1.10) && (trigger_mode == 1) && (DMA_values[x_shift] > DMA_values[x_shift - 6]) && !rolling_flag) {
 8001c9c:	4b65      	ldr	r3, [pc, #404]	@ (8001e34 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a65      	ldr	r2, [pc, #404]	@ (8001e38 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fc44 	bl	8000534 <__aeabi_i2d>
 8001cac:	4604      	mov	r4, r0
 8001cae:	460d      	mov	r5, r1
 8001cb0:	4b62      	ldr	r3, [pc, #392]	@ (8001e3c <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fc3d 	bl	8000534 <__aeabi_i2d>
 8001cba:	a359      	add	r3, pc, #356	@ (adr r3, 8001e20 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	f7fe fdcc 	bl	800085c <__aeabi_ddiv>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4620      	mov	r0, r4
 8001cca:	4629      	mov	r1, r5
 8001ccc:	f7fe ff2c 	bl	8000b28 <__aeabi_dcmpgt>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d035      	beq.n	8001d42 <HAL_ADC_ConvCpltCallback+0xc2>
 8001cd6:	4b57      	ldr	r3, [pc, #348]	@ (8001e34 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a57      	ldr	r2, [pc, #348]	@ (8001e38 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fc27 	bl	8000534 <__aeabi_i2d>
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	460d      	mov	r5, r1
 8001cea:	4b54      	ldr	r3, [pc, #336]	@ (8001e3c <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fc20 	bl	8000534 <__aeabi_i2d>
 8001cf4:	a34a      	add	r3, pc, #296	@ (adr r3, 8001e20 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f7fe fc85 	bl	8000608 <__aeabi_dmul>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4620      	mov	r0, r4
 8001d04:	4629      	mov	r1, r5
 8001d06:	f7fe fef1 	bl	8000aec <__aeabi_dcmplt>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d018      	beq.n	8001d42 <HAL_ADC_ConvCpltCallback+0xc2>
 8001d10:	4b4b      	ldr	r3, [pc, #300]	@ (8001e40 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d114      	bne.n	8001d42 <HAL_ADC_ConvCpltCallback+0xc2>
 8001d18:	4b46      	ldr	r3, [pc, #280]	@ (8001e34 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a46      	ldr	r2, [pc, #280]	@ (8001e38 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001d1e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d22:	4b44      	ldr	r3, [pc, #272]	@ (8001e34 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	3b06      	subs	r3, #6
 8001d28:	4943      	ldr	r1, [pc, #268]	@ (8001e38 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001d2a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d907      	bls.n	8001d42 <HAL_ADC_ConvCpltCallback+0xc2>
 8001d32:	4b44      	ldr	r3, [pc, #272]	@ (8001e44 <HAL_ADC_ConvCpltCallback+0x1c4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d103      	bne.n	8001d42 <HAL_ADC_ConvCpltCallback+0xc2>
        completed_adc = 1;
 8001d3a:	4b43      	ldr	r3, [pc, #268]	@ (8001e48 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e069      	b.n	8001e16 <HAL_ADC_ConvCpltCallback+0x196>
    } else if ((DMA_values[x_shift] > trigger_level / 1.10 && DMA_values[x_shift] < trigger_level * 1.10) && (trigger_mode == 2) && (DMA_values[x_shift] < DMA_values[x_shift - 6]) && !rolling_flag) {
 8001d42:	4b3c      	ldr	r3, [pc, #240]	@ (8001e34 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a3c      	ldr	r2, [pc, #240]	@ (8001e38 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001d48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fbf1 	bl	8000534 <__aeabi_i2d>
 8001d52:	4604      	mov	r4, r0
 8001d54:	460d      	mov	r5, r1
 8001d56:	4b39      	ldr	r3, [pc, #228]	@ (8001e3c <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fbea 	bl	8000534 <__aeabi_i2d>
 8001d60:	a32f      	add	r3, pc, #188	@ (adr r3, 8001e20 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d66:	f7fe fd79 	bl	800085c <__aeabi_ddiv>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4620      	mov	r0, r4
 8001d70:	4629      	mov	r1, r5
 8001d72:	f7fe fed9 	bl	8000b28 <__aeabi_dcmpgt>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d035      	beq.n	8001de8 <HAL_ADC_ConvCpltCallback+0x168>
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e34 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2d      	ldr	r2, [pc, #180]	@ (8001e38 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001d82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fbd4 	bl	8000534 <__aeabi_i2d>
 8001d8c:	4604      	mov	r4, r0
 8001d8e:	460d      	mov	r5, r1
 8001d90:	4b2a      	ldr	r3, [pc, #168]	@ (8001e3c <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbcd 	bl	8000534 <__aeabi_i2d>
 8001d9a:	a321      	add	r3, pc, #132	@ (adr r3, 8001e20 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f7fe fc32 	bl	8000608 <__aeabi_dmul>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4620      	mov	r0, r4
 8001daa:	4629      	mov	r1, r5
 8001dac:	f7fe fe9e 	bl	8000aec <__aeabi_dcmplt>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d018      	beq.n	8001de8 <HAL_ADC_ConvCpltCallback+0x168>
 8001db6:	4b22      	ldr	r3, [pc, #136]	@ (8001e40 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d114      	bne.n	8001de8 <HAL_ADC_ConvCpltCallback+0x168>
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001e34 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e38 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001dc4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e34 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	3b06      	subs	r3, #6
 8001dce:	491a      	ldr	r1, [pc, #104]	@ (8001e38 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001dd0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d207      	bcs.n	8001de8 <HAL_ADC_ConvCpltCallback+0x168>
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001e44 <HAL_ADC_ConvCpltCallback+0x1c4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d103      	bne.n	8001de8 <HAL_ADC_ConvCpltCallback+0x168>
        completed_adc = 1;
 8001de0:	4b19      	ldr	r3, [pc, #100]	@ (8001e48 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	e016      	b.n	8001e16 <HAL_ADC_ConvCpltCallback+0x196>
    } else if (trigger_mode == 0) {
 8001de8:	4b15      	ldr	r3, [pc, #84]	@ (8001e40 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d103      	bne.n	8001df8 <HAL_ADC_ConvCpltCallback+0x178>
        completed_adc = 1;
 8001df0:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
    } else {
        startScope( & htim2, PSC, ARR);
        HAL_ADC_Start_DMA( & hadc1, (uint32_t * ) DMA_values, 312);
    }
}
 8001df6:	e00e      	b.n	8001e16 <HAL_ADC_ConvCpltCallback+0x196>
        startScope( & htim2, PSC, ARR);
 8001df8:	4b14      	ldr	r3, [pc, #80]	@ (8001e4c <HAL_ADC_ConvCpltCallback+0x1cc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a14      	ldr	r2, [pc, #80]	@ (8001e50 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	4619      	mov	r1, r3
 8001e02:	4809      	ldr	r0, [pc, #36]	@ (8001e28 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001e04:	f000 fd3f 	bl	8002886 <startScope>
        HAL_ADC_Start_DMA( & hadc1, (uint32_t * ) DMA_values, 312);
 8001e08:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8001e0c:	490a      	ldr	r1, [pc, #40]	@ (8001e38 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001e0e:	4807      	ldr	r0, [pc, #28]	@ (8001e2c <HAL_ADC_ConvCpltCallback+0x1ac>)
 8001e10:	f003 fc28 	bl	8005664 <HAL_ADC_Start_DMA>
}
 8001e14:	e7ff      	b.n	8001e16 <HAL_ADC_ConvCpltCallback+0x196>
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	9999999a 	.word	0x9999999a
 8001e24:	3ff19999 	.word	0x3ff19999
 8001e28:	200004f0 	.word	0x200004f0
 8001e2c:	2000033c 	.word	0x2000033c
 8001e30:	40020000 	.word	0x40020000
 8001e34:	20000020 	.word	0x20000020
 8001e38:	20000cd0 	.word	0x20000cd0
 8001e3c:	20000002 	.word	0x20000002
 8001e40:	200011b0 	.word	0x200011b0
 8001e44:	200011c8 	.word	0x200011c8
 8001e48:	200011d0 	.word	0x200011d0
 8001e4c:	200011d8 	.word	0x200011d8
 8001e50:	2000001c 	.word	0x2000001c

08001e54 <HAL_GPIO_EXTI_Callback>:
menu_val = 11: X offset menu
menu_val = 12: Y offset menu
menu_val = 13: Y division menu
*/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_interrupt_time = 0;
    uint32_t current_time = HAL_GetTick();
 8001e5e:	f003 fa7d 	bl	800535c <HAL_GetTick>
 8001e62:	60f8      	str	r0, [r7, #12]
    if ((current_time - last_interrupt_time) > DEBOUNCE_DELAY_MS) {
 8001e64:	4b95      	ldr	r3, [pc, #596]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x268>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2bc8      	cmp	r3, #200	@ 0xc8
 8001e6e:	f240 84b9 	bls.w	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
        last_interrupt_time = current_time;
 8001e72:	4a92      	ldr	r2, [pc, #584]	@ (80020bc <HAL_GPIO_EXTI_Callback+0x268>)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6013      	str	r3, [r2, #0]
        if (GPIO_Pin == ROTARY_Key_Pin) {
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e7e:	f040 82e8 	bne.w	8002452 <HAL_GPIO_EXTI_Callback+0x5fe>
            //main osc menu, go to one of the 5 buttons
            if (menu_val == 0) {
 8001e82:	4b8f      	ldr	r3, [pc, #572]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d151      	bne.n	8001f2e <HAL_GPIO_EXTI_Callback+0xda>
                if (selected_option == 0) {
 8001e8a:	4b8e      	ldr	r3, [pc, #568]	@ (80020c4 <HAL_GPIO_EXTI_Callback+0x270>)
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d11c      	bne.n	8001ecc <HAL_GPIO_EXTI_Callback+0x78>
                    usb_mode = !usb_mode;
 8001e92:	4b8d      	ldr	r3, [pc, #564]	@ (80020c8 <HAL_GPIO_EXTI_Callback+0x274>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bf0c      	ite	eq
 8001e9a:	2301      	moveq	r3, #1
 8001e9c:	2300      	movne	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b89      	ldr	r3, [pc, #548]	@ (80020c8 <HAL_GPIO_EXTI_Callback+0x274>)
 8001ea4:	601a      	str	r2, [r3, #0]
                    menu_val = 0;
 8001ea6:	4b86      	ldr	r3, [pc, #536]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
                    clearFrame = 2;
 8001eac:	4b87      	ldr	r3, [pc, #540]	@ (80020cc <HAL_GPIO_EXTI_Callback+0x278>)
 8001eae:	2202      	movs	r2, #2
 8001eb0:	601a      	str	r2, [r3, #0]
                    counter = 0;
 8001eb2:	4b87      	ldr	r3, [pc, #540]	@ (80020d0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
                    startScope( & htim2, PSC, ARR);
 8001eb8:	4b86      	ldr	r3, [pc, #536]	@ (80020d4 <HAL_GPIO_EXTI_Callback+0x280>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a86      	ldr	r2, [pc, #536]	@ (80020d8 <HAL_GPIO_EXTI_Callback+0x284>)
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4886      	ldr	r0, [pc, #536]	@ (80020dc <HAL_GPIO_EXTI_Callback+0x288>)
 8001ec4:	f000 fcdf 	bl	8002886 <startScope>
            //RUN/STOP BUTTOn
        } else if (GPIO_Pin == BTN_2_Pin) { //pauses or resumes the scope from displaying new waveforms
            run_scope = !run_scope;
        }
    }
}
 8001ec8:	f000 bc8c 	b.w	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                } else if (selected_option == 1) {
 8001ecc:	4b7d      	ldr	r3, [pc, #500]	@ (80020c4 <HAL_GPIO_EXTI_Callback+0x270>)
 8001ece:	881b      	ldrh	r3, [r3, #0]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d107      	bne.n	8001ee4 <HAL_GPIO_EXTI_Callback+0x90>
                    menu_val = 2;
 8001ed4:	4b7a      	ldr	r3, [pc, #488]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	701a      	strb	r2, [r3, #0]
                    stopScope( & htim2);
 8001eda:	4880      	ldr	r0, [pc, #512]	@ (80020dc <HAL_GPIO_EXTI_Callback+0x288>)
 8001edc:	f000 fcc8 	bl	8002870 <stopScope>
}
 8001ee0:	f000 bc80 	b.w	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                } else if (selected_option == 2) {
 8001ee4:	4b77      	ldr	r3, [pc, #476]	@ (80020c4 <HAL_GPIO_EXTI_Callback+0x270>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d107      	bne.n	8001efc <HAL_GPIO_EXTI_Callback+0xa8>
                    menu_val = 3;
 8001eec:	4b74      	ldr	r3, [pc, #464]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001eee:	2203      	movs	r2, #3
 8001ef0:	701a      	strb	r2, [r3, #0]
                    stopScope( & htim2);
 8001ef2:	487a      	ldr	r0, [pc, #488]	@ (80020dc <HAL_GPIO_EXTI_Callback+0x288>)
 8001ef4:	f000 fcbc 	bl	8002870 <stopScope>
}
 8001ef8:	f000 bc74 	b.w	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                } else if (selected_option == 3) {
 8001efc:	4b71      	ldr	r3, [pc, #452]	@ (80020c4 <HAL_GPIO_EXTI_Callback+0x270>)
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d107      	bne.n	8001f14 <HAL_GPIO_EXTI_Callback+0xc0>
                    menu_val = 4;
 8001f04:	4b6e      	ldr	r3, [pc, #440]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001f06:	2204      	movs	r2, #4
 8001f08:	701a      	strb	r2, [r3, #0]
                    stopScope( & htim2);
 8001f0a:	4874      	ldr	r0, [pc, #464]	@ (80020dc <HAL_GPIO_EXTI_Callback+0x288>)
 8001f0c:	f000 fcb0 	bl	8002870 <stopScope>
}
 8001f10:	f000 bc68 	b.w	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                } else if (selected_option == 4) {
 8001f14:	4b6b      	ldr	r3, [pc, #428]	@ (80020c4 <HAL_GPIO_EXTI_Callback+0x270>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	2b04      	cmp	r3, #4
 8001f1a:	f040 8463 	bne.w	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                    menu_val = 5;
 8001f1e:	4b68      	ldr	r3, [pc, #416]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001f20:	2205      	movs	r2, #5
 8001f22:	701a      	strb	r2, [r3, #0]
                    stopScope( & htim2);
 8001f24:	486d      	ldr	r0, [pc, #436]	@ (80020dc <HAL_GPIO_EXTI_Callback+0x288>)
 8001f26:	f000 fca3 	bl	8002870 <stopScope>
}
 8001f2a:	f000 bc5b 	b.w	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 2) {
 8001f2e:	4b64      	ldr	r3, [pc, #400]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	f040 8092 	bne.w	800205c <HAL_GPIO_EXTI_Callback+0x208>
                if (selected_option == 0) {
 8001f38:	4b62      	ldr	r3, [pc, #392]	@ (80020c4 <HAL_GPIO_EXTI_Callback+0x270>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d112      	bne.n	8001f66 <HAL_GPIO_EXTI_Callback+0x112>
                    menu_val = 7;
 8001f40:	4b5f      	ldr	r3, [pc, #380]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001f42:	2207      	movs	r2, #7
 8001f44:	701a      	strb	r2, [r3, #0]
                    clearFrame = 2;
 8001f46:	4b61      	ldr	r3, [pc, #388]	@ (80020cc <HAL_GPIO_EXTI_Callback+0x278>)
 8001f48:	2202      	movs	r2, #2
 8001f4a:	601a      	str	r2, [r3, #0]
                    counter = 0;
 8001f4c:	4b60      	ldr	r3, [pc, #384]	@ (80020d0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
                    startScope( & htim2, PSC, ARR);
 8001f52:	4b60      	ldr	r3, [pc, #384]	@ (80020d4 <HAL_GPIO_EXTI_Callback+0x280>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a60      	ldr	r2, [pc, #384]	@ (80020d8 <HAL_GPIO_EXTI_Callback+0x284>)
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	485f      	ldr	r0, [pc, #380]	@ (80020dc <HAL_GPIO_EXTI_Callback+0x288>)
 8001f5e:	f000 fc92 	bl	8002886 <startScope>
}
 8001f62:	f000 bc3f 	b.w	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                } else if (selected_option == 1) {
 8001f66:	4b57      	ldr	r3, [pc, #348]	@ (80020c4 <HAL_GPIO_EXTI_Callback+0x270>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d139      	bne.n	8001fe2 <HAL_GPIO_EXTI_Callback+0x18e>
                    if (trigger_mode == 2 || trigger_mode == 0) {
 8001f6e:	4b5c      	ldr	r3, [pc, #368]	@ (80020e0 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_EXTI_Callback+0x12a>
 8001f76:	4b5a      	ldr	r3, [pc, #360]	@ (80020e0 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d118      	bne.n	8001fb0 <HAL_GPIO_EXTI_Callback+0x15c>
                        trigger_mode = 1;
 8001f7e:	4b58      	ldr	r3, [pc, #352]	@ (80020e0 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
                        draw_trigger_flag = 1;
 8001f84:	4b57      	ldr	r3, [pc, #348]	@ (80020e4 <HAL_GPIO_EXTI_Callback+0x290>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
                        menu_val = 0;
 8001f8a:	4b4d      	ldr	r3, [pc, #308]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
                        clearFrame = 2;
 8001f90:	4b4e      	ldr	r3, [pc, #312]	@ (80020cc <HAL_GPIO_EXTI_Callback+0x278>)
 8001f92:	2202      	movs	r2, #2
 8001f94:	601a      	str	r2, [r3, #0]
                        counter = 0;
 8001f96:	4b4e      	ldr	r3, [pc, #312]	@ (80020d0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
                        startScope( & htim2, PSC, ARR);
 8001f9c:	4b4d      	ldr	r3, [pc, #308]	@ (80020d4 <HAL_GPIO_EXTI_Callback+0x280>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a4d      	ldr	r2, [pc, #308]	@ (80020d8 <HAL_GPIO_EXTI_Callback+0x284>)
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	484d      	ldr	r0, [pc, #308]	@ (80020dc <HAL_GPIO_EXTI_Callback+0x288>)
 8001fa8:	f000 fc6d 	bl	8002886 <startScope>
 8001fac:	f000 bc1a 	b.w	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                        trigger_mode = 0;
 8001fb0:	4b4b      	ldr	r3, [pc, #300]	@ (80020e0 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
                        draw_trigger_flag = 1;
 8001fb6:	4b4b      	ldr	r3, [pc, #300]	@ (80020e4 <HAL_GPIO_EXTI_Callback+0x290>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
                        menu_val = 0;
 8001fbc:	4b40      	ldr	r3, [pc, #256]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x26c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
                        clearFrame = 2;
 8001fc2:	4b42      	ldr	r3, [pc, #264]	@ (80020cc <HAL_GPIO_EXTI_Callback+0x278>)
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	601a      	str	r2, [r3, #0]
                        counter = 0;
 8001fc8:	4b41      	ldr	r3, [pc, #260]	@ (80020d0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
                        startScope( & htim2, PSC, ARR);
 8001fce:	4b41      	ldr	r3, [pc, #260]	@ (80020d4 <HAL_GPIO_EXTI_Callback+0x280>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a41      	ldr	r2, [pc, #260]	@ (80020d8 <HAL_GPIO_EXTI_Callback+0x284>)
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4840      	ldr	r0, [pc, #256]	@ (80020dc <HAL_GPIO_EXTI_Callback+0x288>)
 8001fda:	f000 fc54 	bl	8002886 <startScope>
}
 8001fde:	f000 bc01 	b.w	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                } else if (selected_option == 2) {
 8001fe2:	4b38      	ldr	r3, [pc, #224]	@ (80020c4 <HAL_GPIO_EXTI_Callback+0x270>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	f040 83fc 	bne.w	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                    if (trigger_mode == 1 || trigger_mode == 0) {
 8001fec:	4b3c      	ldr	r3, [pc, #240]	@ (80020e0 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_EXTI_Callback+0x1a8>
 8001ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80020e0 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d117      	bne.n	800202c <HAL_GPIO_EXTI_Callback+0x1d8>
                        trigger_mode = 2;
 8001ffc:	4b38      	ldr	r3, [pc, #224]	@ (80020e0 <HAL_GPIO_EXTI_Callback+0x28c>)
 8001ffe:	2202      	movs	r2, #2
 8002000:	701a      	strb	r2, [r3, #0]
                        draw_trigger_flag = 1;
 8002002:	4b38      	ldr	r3, [pc, #224]	@ (80020e4 <HAL_GPIO_EXTI_Callback+0x290>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]
                        menu_val = 0;
 8002008:	4b2d      	ldr	r3, [pc, #180]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x26c>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
                        clearFrame = 2;
 800200e:	4b2f      	ldr	r3, [pc, #188]	@ (80020cc <HAL_GPIO_EXTI_Callback+0x278>)
 8002010:	2202      	movs	r2, #2
 8002012:	601a      	str	r2, [r3, #0]
                        counter = 0;
 8002014:	4b2e      	ldr	r3, [pc, #184]	@ (80020d0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
                        startScope( & htim2, PSC, ARR);
 800201a:	4b2e      	ldr	r3, [pc, #184]	@ (80020d4 <HAL_GPIO_EXTI_Callback+0x280>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a2e      	ldr	r2, [pc, #184]	@ (80020d8 <HAL_GPIO_EXTI_Callback+0x284>)
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	4619      	mov	r1, r3
 8002024:	482d      	ldr	r0, [pc, #180]	@ (80020dc <HAL_GPIO_EXTI_Callback+0x288>)
 8002026:	f000 fc2e 	bl	8002886 <startScope>
 800202a:	e3db      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                        trigger_mode = 0;
 800202c:	4b2c      	ldr	r3, [pc, #176]	@ (80020e0 <HAL_GPIO_EXTI_Callback+0x28c>)
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
                        draw_trigger_flag = 1;
 8002032:	4b2c      	ldr	r3, [pc, #176]	@ (80020e4 <HAL_GPIO_EXTI_Callback+0x290>)
 8002034:	2201      	movs	r2, #1
 8002036:	601a      	str	r2, [r3, #0]
                        menu_val = 0;
 8002038:	4b21      	ldr	r3, [pc, #132]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x26c>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
                        clearFrame = 2;
 800203e:	4b23      	ldr	r3, [pc, #140]	@ (80020cc <HAL_GPIO_EXTI_Callback+0x278>)
 8002040:	2202      	movs	r2, #2
 8002042:	601a      	str	r2, [r3, #0]
                        counter = 0;
 8002044:	4b22      	ldr	r3, [pc, #136]	@ (80020d0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
                        startScope( & htim2, PSC, ARR);
 800204a:	4b22      	ldr	r3, [pc, #136]	@ (80020d4 <HAL_GPIO_EXTI_Callback+0x280>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a22      	ldr	r2, [pc, #136]	@ (80020d8 <HAL_GPIO_EXTI_Callback+0x284>)
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	4619      	mov	r1, r3
 8002054:	4821      	ldr	r0, [pc, #132]	@ (80020dc <HAL_GPIO_EXTI_Callback+0x288>)
 8002056:	f000 fc16 	bl	8002886 <startScope>
}
 800205a:	e3c3      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 3) {
 800205c:	4b18      	ldr	r3, [pc, #96]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x26c>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d15f      	bne.n	8002124 <HAL_GPIO_EXTI_Callback+0x2d0>
                if (selected_option == 1) {
 8002064:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <HAL_GPIO_EXTI_Callback+0x270>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d116      	bne.n	800209a <HAL_GPIO_EXTI_Callback+0x246>
                    menu_val = 10;
 800206c:	4b14      	ldr	r3, [pc, #80]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x26c>)
 800206e:	220a      	movs	r2, #10
 8002070:	701a      	strb	r2, [r3, #0]
                    selected_option = 4;
 8002072:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <HAL_GPIO_EXTI_Callback+0x270>)
 8002074:	2204      	movs	r2, #4
 8002076:	801a      	strh	r2, [r3, #0]
                    clearFrame = 2;
 8002078:	4b14      	ldr	r3, [pc, #80]	@ (80020cc <HAL_GPIO_EXTI_Callback+0x278>)
 800207a:	2202      	movs	r2, #2
 800207c:	601a      	str	r2, [r3, #0]
                    counter = 0;
 800207e:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <HAL_GPIO_EXTI_Callback+0x27c>)
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
                    HAL_TIM_Base_Stop( & htim4);
 8002084:	4818      	ldr	r0, [pc, #96]	@ (80020e8 <HAL_GPIO_EXTI_Callback+0x294>)
 8002086:	f007 fa69 	bl	800955c <HAL_TIM_Base_Stop>
                    __HAL_TIM_SET_COUNTER( & htim4, 0);
 800208a:	4b17      	ldr	r3, [pc, #92]	@ (80020e8 <HAL_GPIO_EXTI_Callback+0x294>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2200      	movs	r2, #0
 8002090:	625a      	str	r2, [r3, #36]	@ 0x24
                    HAL_TIM_Base_Start( & htim4);
 8002092:	4815      	ldr	r0, [pc, #84]	@ (80020e8 <HAL_GPIO_EXTI_Callback+0x294>)
 8002094:	f007 fa08 	bl	80094a8 <HAL_TIM_Base_Start>
}
 8002098:	e3a4      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                } else if (selected_option == 0) {
 800209a:	4b0a      	ldr	r3, [pc, #40]	@ (80020c4 <HAL_GPIO_EXTI_Callback+0x270>)
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d124      	bne.n	80020ec <HAL_GPIO_EXTI_Callback+0x298>
                    menu_val = 11;
 80020a2:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <HAL_GPIO_EXTI_Callback+0x26c>)
 80020a4:	220b      	movs	r2, #11
 80020a6:	701a      	strb	r2, [r3, #0]
                    selected_option = 4;
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <HAL_GPIO_EXTI_Callback+0x270>)
 80020aa:	2204      	movs	r2, #4
 80020ac:	801a      	strh	r2, [r3, #0]
                    clearFrame = 2;
 80020ae:	4b07      	ldr	r3, [pc, #28]	@ (80020cc <HAL_GPIO_EXTI_Callback+0x278>)
 80020b0:	2202      	movs	r2, #2
 80020b2:	601a      	str	r2, [r3, #0]
                    counter = 0;
 80020b4:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <HAL_GPIO_EXTI_Callback+0x27c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
}
 80020ba:	e393      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
 80020bc:	200011f8 	.word	0x200011f8
 80020c0:	200011be 	.word	0x200011be
 80020c4:	200011bc 	.word	0x200011bc
 80020c8:	200011e8 	.word	0x200011e8
 80020cc:	200011f0 	.word	0x200011f0
 80020d0:	200011cc 	.word	0x200011cc
 80020d4:	200011d8 	.word	0x200011d8
 80020d8:	2000001c 	.word	0x2000001c
 80020dc:	200004f0 	.word	0x200004f0
 80020e0:	200011b0 	.word	0x200011b0
 80020e4:	200011c4 	.word	0x200011c4
 80020e8:	20000538 	.word	0x20000538
                } else if (selected_option == 2) {
 80020ec:	4b96      	ldr	r3, [pc, #600]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	f040 8377 	bne.w	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                    menu_val = 13;
 80020f6:	4b95      	ldr	r3, [pc, #596]	@ (800234c <HAL_GPIO_EXTI_Callback+0x4f8>)
 80020f8:	220d      	movs	r2, #13
 80020fa:	701a      	strb	r2, [r3, #0]
                    selected_option = 4;
 80020fc:	4b92      	ldr	r3, [pc, #584]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80020fe:	2204      	movs	r2, #4
 8002100:	801a      	strh	r2, [r3, #0]
                    clearFrame = 2;
 8002102:	4b93      	ldr	r3, [pc, #588]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x4fc>)
 8002104:	2202      	movs	r2, #2
 8002106:	601a      	str	r2, [r3, #0]
                    counter = 0;
 8002108:	4b92      	ldr	r3, [pc, #584]	@ (8002354 <HAL_GPIO_EXTI_Callback+0x500>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
                    HAL_TIM_Base_Stop( & htim4);
 800210e:	4892      	ldr	r0, [pc, #584]	@ (8002358 <HAL_GPIO_EXTI_Callback+0x504>)
 8002110:	f007 fa24 	bl	800955c <HAL_TIM_Base_Stop>
                    __HAL_TIM_SET_COUNTER( & htim4, 0);
 8002114:	4b90      	ldr	r3, [pc, #576]	@ (8002358 <HAL_GPIO_EXTI_Callback+0x504>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2200      	movs	r2, #0
 800211a:	625a      	str	r2, [r3, #36]	@ 0x24
                    HAL_TIM_Base_Start( & htim4);
 800211c:	488e      	ldr	r0, [pc, #568]	@ (8002358 <HAL_GPIO_EXTI_Callback+0x504>)
 800211e:	f007 f9c3 	bl	80094a8 <HAL_TIM_Base_Start>
}
 8002122:	e35f      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 4) {
 8002124:	4b89      	ldr	r3, [pc, #548]	@ (800234c <HAL_GPIO_EXTI_Callback+0x4f8>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b04      	cmp	r3, #4
 800212a:	d146      	bne.n	80021ba <HAL_GPIO_EXTI_Callback+0x366>
                if (selected_option == 0) {
 800212c:	4b86      	ldr	r3, [pc, #536]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x4f4>)
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d11b      	bne.n	800216c <HAL_GPIO_EXTI_Callback+0x318>
                    grid_flag = !grid_flag;
 8002134:	4b89      	ldr	r3, [pc, #548]	@ (800235c <HAL_GPIO_EXTI_Callback+0x508>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf0c      	ite	eq
 800213c:	2301      	moveq	r3, #1
 800213e:	2300      	movne	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	461a      	mov	r2, r3
 8002144:	4b85      	ldr	r3, [pc, #532]	@ (800235c <HAL_GPIO_EXTI_Callback+0x508>)
 8002146:	601a      	str	r2, [r3, #0]
                    menu_val = 0;
 8002148:	4b80      	ldr	r3, [pc, #512]	@ (800234c <HAL_GPIO_EXTI_Callback+0x4f8>)
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
                    clearFrame = 2;
 800214e:	4b80      	ldr	r3, [pc, #512]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x4fc>)
 8002150:	2202      	movs	r2, #2
 8002152:	601a      	str	r2, [r3, #0]
                    counter = 0;
 8002154:	4b7f      	ldr	r3, [pc, #508]	@ (8002354 <HAL_GPIO_EXTI_Callback+0x500>)
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
                    startScope( & htim2, PSC, ARR);
 800215a:	4b81      	ldr	r3, [pc, #516]	@ (8002360 <HAL_GPIO_EXTI_Callback+0x50c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a81      	ldr	r2, [pc, #516]	@ (8002364 <HAL_GPIO_EXTI_Callback+0x510>)
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	4619      	mov	r1, r3
 8002164:	4880      	ldr	r0, [pc, #512]	@ (8002368 <HAL_GPIO_EXTI_Callback+0x514>)
 8002166:	f000 fb8e 	bl	8002886 <startScope>
}
 800216a:	e33b      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                } else if (selected_option == 1) {
 800216c:	4b76      	ldr	r3, [pc, #472]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x4f4>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d119      	bne.n	80021a8 <HAL_GPIO_EXTI_Callback+0x354>
                    rolling_flag = !rolling_flag;
 8002174:	4b7d      	ldr	r3, [pc, #500]	@ (800236c <HAL_GPIO_EXTI_Callback+0x518>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	4b79      	ldr	r3, [pc, #484]	@ (800236c <HAL_GPIO_EXTI_Callback+0x518>)
 8002186:	601a      	str	r2, [r3, #0]
                    menu_val = 0;
 8002188:	4b70      	ldr	r3, [pc, #448]	@ (800234c <HAL_GPIO_EXTI_Callback+0x4f8>)
 800218a:	2200      	movs	r2, #0
 800218c:	701a      	strb	r2, [r3, #0]
                    clearFrame = 2;
 800218e:	4b70      	ldr	r3, [pc, #448]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x4fc>)
 8002190:	2202      	movs	r2, #2
 8002192:	601a      	str	r2, [r3, #0]
                    counter = 0;
 8002194:	4b6f      	ldr	r3, [pc, #444]	@ (8002354 <HAL_GPIO_EXTI_Callback+0x500>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
                    HAL_ADC_Start_DMA( & hadc1, (uint32_t * ) DMA_values, 312);
 800219a:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800219e:	4974      	ldr	r1, [pc, #464]	@ (8002370 <HAL_GPIO_EXTI_Callback+0x51c>)
 80021a0:	4874      	ldr	r0, [pc, #464]	@ (8002374 <HAL_GPIO_EXTI_Callback+0x520>)
 80021a2:	f003 fa5f 	bl	8005664 <HAL_ADC_Start_DMA>
}
 80021a6:	e31d      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                } else if (selected_option == 2) {
 80021a8:	4b67      	ldr	r3, [pc, #412]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	f040 8319 	bne.w	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                    menu_val = 6;
 80021b2:	4b66      	ldr	r3, [pc, #408]	@ (800234c <HAL_GPIO_EXTI_Callback+0x4f8>)
 80021b4:	2206      	movs	r2, #6
 80021b6:	701a      	strb	r2, [r3, #0]
}
 80021b8:	e314      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 5) {
 80021ba:	4b64      	ldr	r3, [pc, #400]	@ (800234c <HAL_GPIO_EXTI_Callback+0x4f8>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b05      	cmp	r3, #5
 80021c0:	d155      	bne.n	800226e <HAL_GPIO_EXTI_Callback+0x41a>
                if (selected_option == 0) {
 80021c2:	4b61      	ldr	r3, [pc, #388]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80021c4:	881b      	ldrh	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d11e      	bne.n	8002208 <HAL_GPIO_EXTI_Callback+0x3b4>
                    menu_val = 0;
 80021ca:	4b60      	ldr	r3, [pc, #384]	@ (800234c <HAL_GPIO_EXTI_Callback+0x4f8>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
                    selected_option = 4;
 80021d0:	4b5d      	ldr	r3, [pc, #372]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80021d2:	2204      	movs	r2, #4
 80021d4:	801a      	strh	r2, [r3, #0]
                    clearFrame = 2;
 80021d6:	4b5e      	ldr	r3, [pc, #376]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x4fc>)
 80021d8:	2202      	movs	r2, #2
 80021da:	601a      	str	r2, [r3, #0]
                    counter = 0;
 80021dc:	4b5d      	ldr	r3, [pc, #372]	@ (8002354 <HAL_GPIO_EXTI_Callback+0x500>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
                    show_cursors = !show_cursors;
 80021e2:	4b65      	ldr	r3, [pc, #404]	@ (8002378 <HAL_GPIO_EXTI_Callback+0x524>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b61      	ldr	r3, [pc, #388]	@ (8002378 <HAL_GPIO_EXTI_Callback+0x524>)
 80021f4:	601a      	str	r2, [r3, #0]
                    startScope( & htim2, PSC, ARR);
 80021f6:	4b5a      	ldr	r3, [pc, #360]	@ (8002360 <HAL_GPIO_EXTI_Callback+0x50c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a5a      	ldr	r2, [pc, #360]	@ (8002364 <HAL_GPIO_EXTI_Callback+0x510>)
 80021fc:	6812      	ldr	r2, [r2, #0]
 80021fe:	4619      	mov	r1, r3
 8002200:	4859      	ldr	r0, [pc, #356]	@ (8002368 <HAL_GPIO_EXTI_Callback+0x514>)
 8002202:	f000 fb40 	bl	8002886 <startScope>
}
 8002206:	e2ed      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                } else if (selected_option == 1) {
 8002208:	4b4f      	ldr	r3, [pc, #316]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x4f4>)
 800220a:	881b      	ldrh	r3, [r3, #0]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d114      	bne.n	800223a <HAL_GPIO_EXTI_Callback+0x3e6>
                    menu_val = 8;
 8002210:	4b4e      	ldr	r3, [pc, #312]	@ (800234c <HAL_GPIO_EXTI_Callback+0x4f8>)
 8002212:	2208      	movs	r2, #8
 8002214:	701a      	strb	r2, [r3, #0]
                    show_cursors = 1;
 8002216:	4b58      	ldr	r3, [pc, #352]	@ (8002378 <HAL_GPIO_EXTI_Callback+0x524>)
 8002218:	2201      	movs	r2, #1
 800221a:	601a      	str	r2, [r3, #0]
                    clearFrame = 2;
 800221c:	4b4c      	ldr	r3, [pc, #304]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x4fc>)
 800221e:	2202      	movs	r2, #2
 8002220:	601a      	str	r2, [r3, #0]
                    counter = 0;
 8002222:	4b4c      	ldr	r3, [pc, #304]	@ (8002354 <HAL_GPIO_EXTI_Callback+0x500>)
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
                    startScope( & htim2, PSC, ARR);
 8002228:	4b4d      	ldr	r3, [pc, #308]	@ (8002360 <HAL_GPIO_EXTI_Callback+0x50c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a4d      	ldr	r2, [pc, #308]	@ (8002364 <HAL_GPIO_EXTI_Callback+0x510>)
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	4619      	mov	r1, r3
 8002232:	484d      	ldr	r0, [pc, #308]	@ (8002368 <HAL_GPIO_EXTI_Callback+0x514>)
 8002234:	f000 fb27 	bl	8002886 <startScope>
}
 8002238:	e2d4      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                } else if (selected_option == 2) {
 800223a:	4b43      	ldr	r3, [pc, #268]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x4f4>)
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	2b02      	cmp	r3, #2
 8002240:	f040 82d0 	bne.w	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                    menu_val = 9;
 8002244:	4b41      	ldr	r3, [pc, #260]	@ (800234c <HAL_GPIO_EXTI_Callback+0x4f8>)
 8002246:	2209      	movs	r2, #9
 8002248:	701a      	strb	r2, [r3, #0]
                    show_cursors = 1;
 800224a:	4b4b      	ldr	r3, [pc, #300]	@ (8002378 <HAL_GPIO_EXTI_Callback+0x524>)
 800224c:	2201      	movs	r2, #1
 800224e:	601a      	str	r2, [r3, #0]
                    clearFrame = 2;
 8002250:	4b3f      	ldr	r3, [pc, #252]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x4fc>)
 8002252:	2202      	movs	r2, #2
 8002254:	601a      	str	r2, [r3, #0]
                    counter = 0;
 8002256:	4b3f      	ldr	r3, [pc, #252]	@ (8002354 <HAL_GPIO_EXTI_Callback+0x500>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
                    startScope( & htim2, PSC, ARR);
 800225c:	4b40      	ldr	r3, [pc, #256]	@ (8002360 <HAL_GPIO_EXTI_Callback+0x50c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a40      	ldr	r2, [pc, #256]	@ (8002364 <HAL_GPIO_EXTI_Callback+0x510>)
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	4619      	mov	r1, r3
 8002266:	4840      	ldr	r0, [pc, #256]	@ (8002368 <HAL_GPIO_EXTI_Callback+0x514>)
 8002268:	f000 fb0d 	bl	8002886 <startScope>
}
 800226c:	e2ba      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 6) {
 800226e:	4b37      	ldr	r3, [pc, #220]	@ (800234c <HAL_GPIO_EXTI_Callback+0x4f8>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b06      	cmp	r3, #6
 8002274:	d114      	bne.n	80022a0 <HAL_GPIO_EXTI_Callback+0x44c>
                menu_val = 0;
 8002276:	4b35      	ldr	r3, [pc, #212]	@ (800234c <HAL_GPIO_EXTI_Callback+0x4f8>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
                selected_option = 4;
 800227c:	4b32      	ldr	r3, [pc, #200]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x4f4>)
 800227e:	2204      	movs	r2, #4
 8002280:	801a      	strh	r2, [r3, #0]
                clearFrame = 2;
 8002282:	4b33      	ldr	r3, [pc, #204]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x4fc>)
 8002284:	2202      	movs	r2, #2
 8002286:	601a      	str	r2, [r3, #0]
                counter = 0;
 8002288:	4b32      	ldr	r3, [pc, #200]	@ (8002354 <HAL_GPIO_EXTI_Callback+0x500>)
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 800228e:	4b34      	ldr	r3, [pc, #208]	@ (8002360 <HAL_GPIO_EXTI_Callback+0x50c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a34      	ldr	r2, [pc, #208]	@ (8002364 <HAL_GPIO_EXTI_Callback+0x510>)
 8002294:	6812      	ldr	r2, [r2, #0]
 8002296:	4619      	mov	r1, r3
 8002298:	4833      	ldr	r0, [pc, #204]	@ (8002368 <HAL_GPIO_EXTI_Callback+0x514>)
 800229a:	f000 faf4 	bl	8002886 <startScope>
}
 800229e:	e2a1      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 7) {
 80022a0:	4b2a      	ldr	r3, [pc, #168]	@ (800234c <HAL_GPIO_EXTI_Callback+0x4f8>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b07      	cmp	r3, #7
 80022a6:	d117      	bne.n	80022d8 <HAL_GPIO_EXTI_Callback+0x484>
                menu_val = 0;
 80022a8:	4b28      	ldr	r3, [pc, #160]	@ (800234c <HAL_GPIO_EXTI_Callback+0x4f8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
                selected_option = 4;
 80022ae:	4b26      	ldr	r3, [pc, #152]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80022b0:	2204      	movs	r2, #4
 80022b2:	801a      	strh	r2, [r3, #0]
                clearFrame = 2;
 80022b4:	4b26      	ldr	r3, [pc, #152]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x4fc>)
 80022b6:	2202      	movs	r2, #2
 80022b8:	601a      	str	r2, [r3, #0]
                counter = 0;
 80022ba:	4b26      	ldr	r3, [pc, #152]	@ (8002354 <HAL_GPIO_EXTI_Callback+0x500>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
                rotary_divider = 24;
 80022c0:	4b2e      	ldr	r3, [pc, #184]	@ (800237c <HAL_GPIO_EXTI_Callback+0x528>)
 80022c2:	2218      	movs	r2, #24
 80022c4:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 80022c6:	4b26      	ldr	r3, [pc, #152]	@ (8002360 <HAL_GPIO_EXTI_Callback+0x50c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a26      	ldr	r2, [pc, #152]	@ (8002364 <HAL_GPIO_EXTI_Callback+0x510>)
 80022cc:	6812      	ldr	r2, [r2, #0]
 80022ce:	4619      	mov	r1, r3
 80022d0:	4825      	ldr	r0, [pc, #148]	@ (8002368 <HAL_GPIO_EXTI_Callback+0x514>)
 80022d2:	f000 fad8 	bl	8002886 <startScope>
}
 80022d6:	e285      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 8) {
 80022d8:	4b1c      	ldr	r3, [pc, #112]	@ (800234c <HAL_GPIO_EXTI_Callback+0x4f8>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d117      	bne.n	8002310 <HAL_GPIO_EXTI_Callback+0x4bc>
                menu_val = 0;
 80022e0:	4b1a      	ldr	r3, [pc, #104]	@ (800234c <HAL_GPIO_EXTI_Callback+0x4f8>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
                selected_option = 4;
 80022e6:	4b18      	ldr	r3, [pc, #96]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x4f4>)
 80022e8:	2204      	movs	r2, #4
 80022ea:	801a      	strh	r2, [r3, #0]
                clearFrame = 2;
 80022ec:	4b18      	ldr	r3, [pc, #96]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x4fc>)
 80022ee:	2202      	movs	r2, #2
 80022f0:	601a      	str	r2, [r3, #0]
                counter = 0;
 80022f2:	4b18      	ldr	r3, [pc, #96]	@ (8002354 <HAL_GPIO_EXTI_Callback+0x500>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
                rotary_divider = 24;
 80022f8:	4b20      	ldr	r3, [pc, #128]	@ (800237c <HAL_GPIO_EXTI_Callback+0x528>)
 80022fa:	2218      	movs	r2, #24
 80022fc:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 80022fe:	4b18      	ldr	r3, [pc, #96]	@ (8002360 <HAL_GPIO_EXTI_Callback+0x50c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a18      	ldr	r2, [pc, #96]	@ (8002364 <HAL_GPIO_EXTI_Callback+0x510>)
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	4619      	mov	r1, r3
 8002308:	4817      	ldr	r0, [pc, #92]	@ (8002368 <HAL_GPIO_EXTI_Callback+0x514>)
 800230a:	f000 fabc 	bl	8002886 <startScope>
}
 800230e:	e269      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 9) {
 8002310:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <HAL_GPIO_EXTI_Callback+0x4f8>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b09      	cmp	r3, #9
 8002316:	d133      	bne.n	8002380 <HAL_GPIO_EXTI_Callback+0x52c>
                menu_val = 0;
 8002318:	4b0c      	ldr	r3, [pc, #48]	@ (800234c <HAL_GPIO_EXTI_Callback+0x4f8>)
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
                selected_option = 4;
 800231e:	4b0a      	ldr	r3, [pc, #40]	@ (8002348 <HAL_GPIO_EXTI_Callback+0x4f4>)
 8002320:	2204      	movs	r2, #4
 8002322:	801a      	strh	r2, [r3, #0]
                clearFrame = 2;
 8002324:	4b0a      	ldr	r3, [pc, #40]	@ (8002350 <HAL_GPIO_EXTI_Callback+0x4fc>)
 8002326:	2202      	movs	r2, #2
 8002328:	601a      	str	r2, [r3, #0]
                counter = 0;
 800232a:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <HAL_GPIO_EXTI_Callback+0x500>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
                rotary_divider = 24;
 8002330:	4b12      	ldr	r3, [pc, #72]	@ (800237c <HAL_GPIO_EXTI_Callback+0x528>)
 8002332:	2218      	movs	r2, #24
 8002334:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 8002336:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <HAL_GPIO_EXTI_Callback+0x50c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a0a      	ldr	r2, [pc, #40]	@ (8002364 <HAL_GPIO_EXTI_Callback+0x510>)
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	4619      	mov	r1, r3
 8002340:	4809      	ldr	r0, [pc, #36]	@ (8002368 <HAL_GPIO_EXTI_Callback+0x514>)
 8002342:	f000 faa0 	bl	8002886 <startScope>
}
 8002346:	e24d      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
 8002348:	200011bc 	.word	0x200011bc
 800234c:	200011be 	.word	0x200011be
 8002350:	200011f0 	.word	0x200011f0
 8002354:	200011cc 	.word	0x200011cc
 8002358:	20000538 	.word	0x20000538
 800235c:	200011c0 	.word	0x200011c0
 8002360:	200011d8 	.word	0x200011d8
 8002364:	2000001c 	.word	0x2000001c
 8002368:	200004f0 	.word	0x200004f0
 800236c:	200011c8 	.word	0x200011c8
 8002370:	20000cd0 	.word	0x20000cd0
 8002374:	2000033c 	.word	0x2000033c
 8002378:	200011d4 	.word	0x200011d4
 800237c:	20000024 	.word	0x20000024
            } else if (menu_val == 10) {
 8002380:	4b8f      	ldr	r3, [pc, #572]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b0a      	cmp	r3, #10
 8002386:	d114      	bne.n	80023b2 <HAL_GPIO_EXTI_Callback+0x55e>
                menu_val = 0;
 8002388:	4b8d      	ldr	r3, [pc, #564]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
                selected_option = 4;
 800238e:	4b8d      	ldr	r3, [pc, #564]	@ (80025c4 <HAL_GPIO_EXTI_Callback+0x770>)
 8002390:	2204      	movs	r2, #4
 8002392:	801a      	strh	r2, [r3, #0]
                clearFrame = 2;
 8002394:	4b8c      	ldr	r3, [pc, #560]	@ (80025c8 <HAL_GPIO_EXTI_Callback+0x774>)
 8002396:	2202      	movs	r2, #2
 8002398:	601a      	str	r2, [r3, #0]
                counter = 0;
 800239a:	4b8c      	ldr	r3, [pc, #560]	@ (80025cc <HAL_GPIO_EXTI_Callback+0x778>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 80023a0:	4b8b      	ldr	r3, [pc, #556]	@ (80025d0 <HAL_GPIO_EXTI_Callback+0x77c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a8b      	ldr	r2, [pc, #556]	@ (80025d4 <HAL_GPIO_EXTI_Callback+0x780>)
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	4619      	mov	r1, r3
 80023aa:	488b      	ldr	r0, [pc, #556]	@ (80025d8 <HAL_GPIO_EXTI_Callback+0x784>)
 80023ac:	f000 fa6b 	bl	8002886 <startScope>
}
 80023b0:	e218      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 11) {
 80023b2:	4b83      	ldr	r3, [pc, #524]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b0b      	cmp	r3, #11
 80023b8:	d118      	bne.n	80023ec <HAL_GPIO_EXTI_Callback+0x598>
                menu_val = 12;
 80023ba:	4b81      	ldr	r3, [pc, #516]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 80023bc:	220c      	movs	r2, #12
 80023be:	701a      	strb	r2, [r3, #0]
                selected_option = 4;
 80023c0:	4b80      	ldr	r3, [pc, #512]	@ (80025c4 <HAL_GPIO_EXTI_Callback+0x770>)
 80023c2:	2204      	movs	r2, #4
 80023c4:	801a      	strh	r2, [r3, #0]
                clearFrame = 2;
 80023c6:	4b80      	ldr	r3, [pc, #512]	@ (80025c8 <HAL_GPIO_EXTI_Callback+0x774>)
 80023c8:	2202      	movs	r2, #2
 80023ca:	601a      	str	r2, [r3, #0]
                counter = 0;
 80023cc:	4b7f      	ldr	r3, [pc, #508]	@ (80025cc <HAL_GPIO_EXTI_Callback+0x778>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 80023d2:	4b7f      	ldr	r3, [pc, #508]	@ (80025d0 <HAL_GPIO_EXTI_Callback+0x77c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a7f      	ldr	r2, [pc, #508]	@ (80025d4 <HAL_GPIO_EXTI_Callback+0x780>)
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	4619      	mov	r1, r3
 80023dc:	487e      	ldr	r0, [pc, #504]	@ (80025d8 <HAL_GPIO_EXTI_Callback+0x784>)
 80023de:	f000 fa52 	bl	8002886 <startScope>
                __HAL_TIM_SET_COUNTER( & htim4, 0);
 80023e2:	4b7e      	ldr	r3, [pc, #504]	@ (80025dc <HAL_GPIO_EXTI_Callback+0x788>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2200      	movs	r2, #0
 80023e8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80023ea:	e1fb      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 12) {
 80023ec:	4b74      	ldr	r3, [pc, #464]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b0c      	cmp	r3, #12
 80023f2:	d117      	bne.n	8002424 <HAL_GPIO_EXTI_Callback+0x5d0>
                menu_val = 0;
 80023f4:	4b72      	ldr	r3, [pc, #456]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
                selected_option = 4;
 80023fa:	4b72      	ldr	r3, [pc, #456]	@ (80025c4 <HAL_GPIO_EXTI_Callback+0x770>)
 80023fc:	2204      	movs	r2, #4
 80023fe:	801a      	strh	r2, [r3, #0]
                clearFrame = 2;
 8002400:	4b71      	ldr	r3, [pc, #452]	@ (80025c8 <HAL_GPIO_EXTI_Callback+0x774>)
 8002402:	2202      	movs	r2, #2
 8002404:	601a      	str	r2, [r3, #0]
                counter = 0;
 8002406:	4b71      	ldr	r3, [pc, #452]	@ (80025cc <HAL_GPIO_EXTI_Callback+0x778>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
                rotary_divider = 24;
 800240c:	4b74      	ldr	r3, [pc, #464]	@ (80025e0 <HAL_GPIO_EXTI_Callback+0x78c>)
 800240e:	2218      	movs	r2, #24
 8002410:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 8002412:	4b6f      	ldr	r3, [pc, #444]	@ (80025d0 <HAL_GPIO_EXTI_Callback+0x77c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a6f      	ldr	r2, [pc, #444]	@ (80025d4 <HAL_GPIO_EXTI_Callback+0x780>)
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	4619      	mov	r1, r3
 800241c:	486e      	ldr	r0, [pc, #440]	@ (80025d8 <HAL_GPIO_EXTI_Callback+0x784>)
 800241e:	f000 fa32 	bl	8002886 <startScope>
}
 8002422:	e1df      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 13) {
 8002424:	4b66      	ldr	r3, [pc, #408]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b0d      	cmp	r3, #13
 800242a:	f040 81db 	bne.w	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                menu_val = 0;
 800242e:	4b64      	ldr	r3, [pc, #400]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
                clearFrame = 2;
 8002434:	4b64      	ldr	r3, [pc, #400]	@ (80025c8 <HAL_GPIO_EXTI_Callback+0x774>)
 8002436:	2202      	movs	r2, #2
 8002438:	601a      	str	r2, [r3, #0]
                counter = 0;
 800243a:	4b64      	ldr	r3, [pc, #400]	@ (80025cc <HAL_GPIO_EXTI_Callback+0x778>)
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 8002440:	4b63      	ldr	r3, [pc, #396]	@ (80025d0 <HAL_GPIO_EXTI_Callback+0x77c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a63      	ldr	r2, [pc, #396]	@ (80025d4 <HAL_GPIO_EXTI_Callback+0x780>)
 8002446:	6812      	ldr	r2, [r2, #0]
 8002448:	4619      	mov	r1, r3
 800244a:	4863      	ldr	r0, [pc, #396]	@ (80025d8 <HAL_GPIO_EXTI_Callback+0x784>)
 800244c:	f000 fa1b 	bl	8002886 <startScope>
}
 8002450:	e1c8      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
        } else if (GPIO_Pin == BTN_1_Pin) {
 8002452:	88fb      	ldrh	r3, [r7, #6]
 8002454:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002458:	f040 8163 	bne.w	8002722 <HAL_GPIO_EXTI_Callback+0x8ce>
            if (menu_val == 1) {
 800245c:	4b58      	ldr	r3, [pc, #352]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d114      	bne.n	800248e <HAL_GPIO_EXTI_Callback+0x63a>
                menu_val = 0;
 8002464:	4b56      	ldr	r3, [pc, #344]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
                selected_option = 0;
 800246a:	4b56      	ldr	r3, [pc, #344]	@ (80025c4 <HAL_GPIO_EXTI_Callback+0x770>)
 800246c:	2200      	movs	r2, #0
 800246e:	801a      	strh	r2, [r3, #0]
                clearFrame = 2;
 8002470:	4b55      	ldr	r3, [pc, #340]	@ (80025c8 <HAL_GPIO_EXTI_Callback+0x774>)
 8002472:	2202      	movs	r2, #2
 8002474:	601a      	str	r2, [r3, #0]
                counter = 0;
 8002476:	4b55      	ldr	r3, [pc, #340]	@ (80025cc <HAL_GPIO_EXTI_Callback+0x778>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 800247c:	4b54      	ldr	r3, [pc, #336]	@ (80025d0 <HAL_GPIO_EXTI_Callback+0x77c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a54      	ldr	r2, [pc, #336]	@ (80025d4 <HAL_GPIO_EXTI_Callback+0x780>)
 8002482:	6812      	ldr	r2, [r2, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	4854      	ldr	r0, [pc, #336]	@ (80025d8 <HAL_GPIO_EXTI_Callback+0x784>)
 8002488:	f000 f9fd 	bl	8002886 <startScope>
}
 800248c:	e1aa      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 2) {
 800248e:	4b4c      	ldr	r3, [pc, #304]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d114      	bne.n	80024c0 <HAL_GPIO_EXTI_Callback+0x66c>
                menu_val = 0;
 8002496:	4b4a      	ldr	r3, [pc, #296]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
                selected_option = 1;
 800249c:	4b49      	ldr	r3, [pc, #292]	@ (80025c4 <HAL_GPIO_EXTI_Callback+0x770>)
 800249e:	2201      	movs	r2, #1
 80024a0:	801a      	strh	r2, [r3, #0]
                clearFrame = 2;
 80024a2:	4b49      	ldr	r3, [pc, #292]	@ (80025c8 <HAL_GPIO_EXTI_Callback+0x774>)
 80024a4:	2202      	movs	r2, #2
 80024a6:	601a      	str	r2, [r3, #0]
                counter = 0;
 80024a8:	4b48      	ldr	r3, [pc, #288]	@ (80025cc <HAL_GPIO_EXTI_Callback+0x778>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 80024ae:	4b48      	ldr	r3, [pc, #288]	@ (80025d0 <HAL_GPIO_EXTI_Callback+0x77c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a48      	ldr	r2, [pc, #288]	@ (80025d4 <HAL_GPIO_EXTI_Callback+0x780>)
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	4619      	mov	r1, r3
 80024b8:	4847      	ldr	r0, [pc, #284]	@ (80025d8 <HAL_GPIO_EXTI_Callback+0x784>)
 80024ba:	f000 f9e4 	bl	8002886 <startScope>
}
 80024be:	e191      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 3) {
 80024c0:	4b3f      	ldr	r3, [pc, #252]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d114      	bne.n	80024f2 <HAL_GPIO_EXTI_Callback+0x69e>
                menu_val = 0;
 80024c8:	4b3d      	ldr	r3, [pc, #244]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
                selected_option = 2;
 80024ce:	4b3d      	ldr	r3, [pc, #244]	@ (80025c4 <HAL_GPIO_EXTI_Callback+0x770>)
 80024d0:	2202      	movs	r2, #2
 80024d2:	801a      	strh	r2, [r3, #0]
                clearFrame = 2;
 80024d4:	4b3c      	ldr	r3, [pc, #240]	@ (80025c8 <HAL_GPIO_EXTI_Callback+0x774>)
 80024d6:	2202      	movs	r2, #2
 80024d8:	601a      	str	r2, [r3, #0]
                counter = 0;
 80024da:	4b3c      	ldr	r3, [pc, #240]	@ (80025cc <HAL_GPIO_EXTI_Callback+0x778>)
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 80024e0:	4b3b      	ldr	r3, [pc, #236]	@ (80025d0 <HAL_GPIO_EXTI_Callback+0x77c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a3b      	ldr	r2, [pc, #236]	@ (80025d4 <HAL_GPIO_EXTI_Callback+0x780>)
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	4619      	mov	r1, r3
 80024ea:	483b      	ldr	r0, [pc, #236]	@ (80025d8 <HAL_GPIO_EXTI_Callback+0x784>)
 80024ec:	f000 f9cb 	bl	8002886 <startScope>
}
 80024f0:	e178      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 4) {
 80024f2:	4b33      	ldr	r3, [pc, #204]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d114      	bne.n	8002524 <HAL_GPIO_EXTI_Callback+0x6d0>
                menu_val = 0;
 80024fa:	4b31      	ldr	r3, [pc, #196]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
                selected_option = 3;
 8002500:	4b30      	ldr	r3, [pc, #192]	@ (80025c4 <HAL_GPIO_EXTI_Callback+0x770>)
 8002502:	2203      	movs	r2, #3
 8002504:	801a      	strh	r2, [r3, #0]
                clearFrame = 2;
 8002506:	4b30      	ldr	r3, [pc, #192]	@ (80025c8 <HAL_GPIO_EXTI_Callback+0x774>)
 8002508:	2202      	movs	r2, #2
 800250a:	601a      	str	r2, [r3, #0]
                counter = 0;
 800250c:	4b2f      	ldr	r3, [pc, #188]	@ (80025cc <HAL_GPIO_EXTI_Callback+0x778>)
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 8002512:	4b2f      	ldr	r3, [pc, #188]	@ (80025d0 <HAL_GPIO_EXTI_Callback+0x77c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a2f      	ldr	r2, [pc, #188]	@ (80025d4 <HAL_GPIO_EXTI_Callback+0x780>)
 8002518:	6812      	ldr	r2, [r2, #0]
 800251a:	4619      	mov	r1, r3
 800251c:	482e      	ldr	r0, [pc, #184]	@ (80025d8 <HAL_GPIO_EXTI_Callback+0x784>)
 800251e:	f000 f9b2 	bl	8002886 <startScope>
}
 8002522:	e15f      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 5) {
 8002524:	4b26      	ldr	r3, [pc, #152]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b05      	cmp	r3, #5
 800252a:	d114      	bne.n	8002556 <HAL_GPIO_EXTI_Callback+0x702>
                menu_val = 0;
 800252c:	4b24      	ldr	r3, [pc, #144]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
                selected_option = 4;
 8002532:	4b24      	ldr	r3, [pc, #144]	@ (80025c4 <HAL_GPIO_EXTI_Callback+0x770>)
 8002534:	2204      	movs	r2, #4
 8002536:	801a      	strh	r2, [r3, #0]
                clearFrame = 2;
 8002538:	4b23      	ldr	r3, [pc, #140]	@ (80025c8 <HAL_GPIO_EXTI_Callback+0x774>)
 800253a:	2202      	movs	r2, #2
 800253c:	601a      	str	r2, [r3, #0]
                counter = 0;
 800253e:	4b23      	ldr	r3, [pc, #140]	@ (80025cc <HAL_GPIO_EXTI_Callback+0x778>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 8002544:	4b22      	ldr	r3, [pc, #136]	@ (80025d0 <HAL_GPIO_EXTI_Callback+0x77c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a22      	ldr	r2, [pc, #136]	@ (80025d4 <HAL_GPIO_EXTI_Callback+0x780>)
 800254a:	6812      	ldr	r2, [r2, #0]
 800254c:	4619      	mov	r1, r3
 800254e:	4822      	ldr	r0, [pc, #136]	@ (80025d8 <HAL_GPIO_EXTI_Callback+0x784>)
 8002550:	f000 f999 	bl	8002886 <startScope>
}
 8002554:	e146      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 6) {
 8002556:	4b1a      	ldr	r3, [pc, #104]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b06      	cmp	r3, #6
 800255c:	d114      	bne.n	8002588 <HAL_GPIO_EXTI_Callback+0x734>
                menu_val = 0;
 800255e:	4b18      	ldr	r3, [pc, #96]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
                selected_option = 4;
 8002564:	4b17      	ldr	r3, [pc, #92]	@ (80025c4 <HAL_GPIO_EXTI_Callback+0x770>)
 8002566:	2204      	movs	r2, #4
 8002568:	801a      	strh	r2, [r3, #0]
                clearFrame = 2;
 800256a:	4b17      	ldr	r3, [pc, #92]	@ (80025c8 <HAL_GPIO_EXTI_Callback+0x774>)
 800256c:	2202      	movs	r2, #2
 800256e:	601a      	str	r2, [r3, #0]
                counter = 0;
 8002570:	4b16      	ldr	r3, [pc, #88]	@ (80025cc <HAL_GPIO_EXTI_Callback+0x778>)
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 8002576:	4b16      	ldr	r3, [pc, #88]	@ (80025d0 <HAL_GPIO_EXTI_Callback+0x77c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a16      	ldr	r2, [pc, #88]	@ (80025d4 <HAL_GPIO_EXTI_Callback+0x780>)
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	4619      	mov	r1, r3
 8002580:	4815      	ldr	r0, [pc, #84]	@ (80025d8 <HAL_GPIO_EXTI_Callback+0x784>)
 8002582:	f000 f980 	bl	8002886 <startScope>
}
 8002586:	e12d      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 7) {
 8002588:	4b0d      	ldr	r3, [pc, #52]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b07      	cmp	r3, #7
 800258e:	d129      	bne.n	80025e4 <HAL_GPIO_EXTI_Callback+0x790>
                menu_val = 0;
 8002590:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <HAL_GPIO_EXTI_Callback+0x76c>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
                selected_option = 4;
 8002596:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <HAL_GPIO_EXTI_Callback+0x770>)
 8002598:	2204      	movs	r2, #4
 800259a:	801a      	strh	r2, [r3, #0]
                clearFrame = 2;
 800259c:	4b0a      	ldr	r3, [pc, #40]	@ (80025c8 <HAL_GPIO_EXTI_Callback+0x774>)
 800259e:	2202      	movs	r2, #2
 80025a0:	601a      	str	r2, [r3, #0]
                counter = 0;
 80025a2:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <HAL_GPIO_EXTI_Callback+0x778>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
                rotary_divider = 24;
 80025a8:	4b0d      	ldr	r3, [pc, #52]	@ (80025e0 <HAL_GPIO_EXTI_Callback+0x78c>)
 80025aa:	2218      	movs	r2, #24
 80025ac:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 80025ae:	4b08      	ldr	r3, [pc, #32]	@ (80025d0 <HAL_GPIO_EXTI_Callback+0x77c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a08      	ldr	r2, [pc, #32]	@ (80025d4 <HAL_GPIO_EXTI_Callback+0x780>)
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	4619      	mov	r1, r3
 80025b8:	4807      	ldr	r0, [pc, #28]	@ (80025d8 <HAL_GPIO_EXTI_Callback+0x784>)
 80025ba:	f000 f964 	bl	8002886 <startScope>
}
 80025be:	e111      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
 80025c0:	200011be 	.word	0x200011be
 80025c4:	200011bc 	.word	0x200011bc
 80025c8:	200011f0 	.word	0x200011f0
 80025cc:	200011cc 	.word	0x200011cc
 80025d0:	200011d8 	.word	0x200011d8
 80025d4:	2000001c 	.word	0x2000001c
 80025d8:	200004f0 	.word	0x200004f0
 80025dc:	20000538 	.word	0x20000538
 80025e0:	20000024 	.word	0x20000024
            } else if (menu_val == 8) {
 80025e4:	4b81      	ldr	r3, [pc, #516]	@ (80027ec <HAL_GPIO_EXTI_Callback+0x998>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d117      	bne.n	800261c <HAL_GPIO_EXTI_Callback+0x7c8>
                menu_val = 0;
 80025ec:	4b7f      	ldr	r3, [pc, #508]	@ (80027ec <HAL_GPIO_EXTI_Callback+0x998>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
                selected_option = 4;
 80025f2:	4b7f      	ldr	r3, [pc, #508]	@ (80027f0 <HAL_GPIO_EXTI_Callback+0x99c>)
 80025f4:	2204      	movs	r2, #4
 80025f6:	801a      	strh	r2, [r3, #0]
                clearFrame = 2;
 80025f8:	4b7e      	ldr	r3, [pc, #504]	@ (80027f4 <HAL_GPIO_EXTI_Callback+0x9a0>)
 80025fa:	2202      	movs	r2, #2
 80025fc:	601a      	str	r2, [r3, #0]
                counter = 0;
 80025fe:	4b7e      	ldr	r3, [pc, #504]	@ (80027f8 <HAL_GPIO_EXTI_Callback+0x9a4>)
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
                rotary_divider = 24;
 8002604:	4b7d      	ldr	r3, [pc, #500]	@ (80027fc <HAL_GPIO_EXTI_Callback+0x9a8>)
 8002606:	2218      	movs	r2, #24
 8002608:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 800260a:	4b7d      	ldr	r3, [pc, #500]	@ (8002800 <HAL_GPIO_EXTI_Callback+0x9ac>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a7d      	ldr	r2, [pc, #500]	@ (8002804 <HAL_GPIO_EXTI_Callback+0x9b0>)
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	4619      	mov	r1, r3
 8002614:	487c      	ldr	r0, [pc, #496]	@ (8002808 <HAL_GPIO_EXTI_Callback+0x9b4>)
 8002616:	f000 f936 	bl	8002886 <startScope>
}
 800261a:	e0e3      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 9) {
 800261c:	4b73      	ldr	r3, [pc, #460]	@ (80027ec <HAL_GPIO_EXTI_Callback+0x998>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b09      	cmp	r3, #9
 8002622:	d117      	bne.n	8002654 <HAL_GPIO_EXTI_Callback+0x800>
                menu_val = 0;
 8002624:	4b71      	ldr	r3, [pc, #452]	@ (80027ec <HAL_GPIO_EXTI_Callback+0x998>)
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
                selected_option = 4;
 800262a:	4b71      	ldr	r3, [pc, #452]	@ (80027f0 <HAL_GPIO_EXTI_Callback+0x99c>)
 800262c:	2204      	movs	r2, #4
 800262e:	801a      	strh	r2, [r3, #0]
                clearFrame = 2;
 8002630:	4b70      	ldr	r3, [pc, #448]	@ (80027f4 <HAL_GPIO_EXTI_Callback+0x9a0>)
 8002632:	2202      	movs	r2, #2
 8002634:	601a      	str	r2, [r3, #0]
                counter = 0;
 8002636:	4b70      	ldr	r3, [pc, #448]	@ (80027f8 <HAL_GPIO_EXTI_Callback+0x9a4>)
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
                rotary_divider = 24;
 800263c:	4b6f      	ldr	r3, [pc, #444]	@ (80027fc <HAL_GPIO_EXTI_Callback+0x9a8>)
 800263e:	2218      	movs	r2, #24
 8002640:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 8002642:	4b6f      	ldr	r3, [pc, #444]	@ (8002800 <HAL_GPIO_EXTI_Callback+0x9ac>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a6f      	ldr	r2, [pc, #444]	@ (8002804 <HAL_GPIO_EXTI_Callback+0x9b0>)
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	4619      	mov	r1, r3
 800264c:	486e      	ldr	r0, [pc, #440]	@ (8002808 <HAL_GPIO_EXTI_Callback+0x9b4>)
 800264e:	f000 f91a 	bl	8002886 <startScope>
}
 8002652:	e0c7      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 10) {
 8002654:	4b65      	ldr	r3, [pc, #404]	@ (80027ec <HAL_GPIO_EXTI_Callback+0x998>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b0a      	cmp	r3, #10
 800265a:	d114      	bne.n	8002686 <HAL_GPIO_EXTI_Callback+0x832>
                menu_val = 0;
 800265c:	4b63      	ldr	r3, [pc, #396]	@ (80027ec <HAL_GPIO_EXTI_Callback+0x998>)
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
                selected_option = 4;
 8002662:	4b63      	ldr	r3, [pc, #396]	@ (80027f0 <HAL_GPIO_EXTI_Callback+0x99c>)
 8002664:	2204      	movs	r2, #4
 8002666:	801a      	strh	r2, [r3, #0]
                clearFrame = 2;
 8002668:	4b62      	ldr	r3, [pc, #392]	@ (80027f4 <HAL_GPIO_EXTI_Callback+0x9a0>)
 800266a:	2202      	movs	r2, #2
 800266c:	601a      	str	r2, [r3, #0]
                counter = 0;
 800266e:	4b62      	ldr	r3, [pc, #392]	@ (80027f8 <HAL_GPIO_EXTI_Callback+0x9a4>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 8002674:	4b62      	ldr	r3, [pc, #392]	@ (8002800 <HAL_GPIO_EXTI_Callback+0x9ac>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a62      	ldr	r2, [pc, #392]	@ (8002804 <HAL_GPIO_EXTI_Callback+0x9b0>)
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	4619      	mov	r1, r3
 800267e:	4862      	ldr	r0, [pc, #392]	@ (8002808 <HAL_GPIO_EXTI_Callback+0x9b4>)
 8002680:	f000 f901 	bl	8002886 <startScope>
}
 8002684:	e0ae      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 11) {
 8002686:	4b59      	ldr	r3, [pc, #356]	@ (80027ec <HAL_GPIO_EXTI_Callback+0x998>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b0b      	cmp	r3, #11
 800268c:	d117      	bne.n	80026be <HAL_GPIO_EXTI_Callback+0x86a>
                menu_val = 0;
 800268e:	4b57      	ldr	r3, [pc, #348]	@ (80027ec <HAL_GPIO_EXTI_Callback+0x998>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
                selected_option = 4;
 8002694:	4b56      	ldr	r3, [pc, #344]	@ (80027f0 <HAL_GPIO_EXTI_Callback+0x99c>)
 8002696:	2204      	movs	r2, #4
 8002698:	801a      	strh	r2, [r3, #0]
                clearFrame = 2;
 800269a:	4b56      	ldr	r3, [pc, #344]	@ (80027f4 <HAL_GPIO_EXTI_Callback+0x9a0>)
 800269c:	2202      	movs	r2, #2
 800269e:	601a      	str	r2, [r3, #0]
                counter = 0;
 80026a0:	4b55      	ldr	r3, [pc, #340]	@ (80027f8 <HAL_GPIO_EXTI_Callback+0x9a4>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
                rotary_divider = 24;
 80026a6:	4b55      	ldr	r3, [pc, #340]	@ (80027fc <HAL_GPIO_EXTI_Callback+0x9a8>)
 80026a8:	2218      	movs	r2, #24
 80026aa:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 80026ac:	4b54      	ldr	r3, [pc, #336]	@ (8002800 <HAL_GPIO_EXTI_Callback+0x9ac>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a54      	ldr	r2, [pc, #336]	@ (8002804 <HAL_GPIO_EXTI_Callback+0x9b0>)
 80026b2:	6812      	ldr	r2, [r2, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	4854      	ldr	r0, [pc, #336]	@ (8002808 <HAL_GPIO_EXTI_Callback+0x9b4>)
 80026b8:	f000 f8e5 	bl	8002886 <startScope>
}
 80026bc:	e092      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 12) {
 80026be:	4b4b      	ldr	r3, [pc, #300]	@ (80027ec <HAL_GPIO_EXTI_Callback+0x998>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b0c      	cmp	r3, #12
 80026c4:	d117      	bne.n	80026f6 <HAL_GPIO_EXTI_Callback+0x8a2>
                menu_val = 0;
 80026c6:	4b49      	ldr	r3, [pc, #292]	@ (80027ec <HAL_GPIO_EXTI_Callback+0x998>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
                selected_option = 4;
 80026cc:	4b48      	ldr	r3, [pc, #288]	@ (80027f0 <HAL_GPIO_EXTI_Callback+0x99c>)
 80026ce:	2204      	movs	r2, #4
 80026d0:	801a      	strh	r2, [r3, #0]
                clearFrame = 2;
 80026d2:	4b48      	ldr	r3, [pc, #288]	@ (80027f4 <HAL_GPIO_EXTI_Callback+0x9a0>)
 80026d4:	2202      	movs	r2, #2
 80026d6:	601a      	str	r2, [r3, #0]
                counter = 0;
 80026d8:	4b47      	ldr	r3, [pc, #284]	@ (80027f8 <HAL_GPIO_EXTI_Callback+0x9a4>)
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]
                rotary_divider = 24;
 80026de:	4b47      	ldr	r3, [pc, #284]	@ (80027fc <HAL_GPIO_EXTI_Callback+0x9a8>)
 80026e0:	2218      	movs	r2, #24
 80026e2:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 80026e4:	4b46      	ldr	r3, [pc, #280]	@ (8002800 <HAL_GPIO_EXTI_Callback+0x9ac>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a46      	ldr	r2, [pc, #280]	@ (8002804 <HAL_GPIO_EXTI_Callback+0x9b0>)
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	4619      	mov	r1, r3
 80026ee:	4846      	ldr	r0, [pc, #280]	@ (8002808 <HAL_GPIO_EXTI_Callback+0x9b4>)
 80026f0:	f000 f8c9 	bl	8002886 <startScope>
}
 80026f4:	e076      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            } else if (menu_val == 13) {
 80026f6:	4b3d      	ldr	r3, [pc, #244]	@ (80027ec <HAL_GPIO_EXTI_Callback+0x998>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b0d      	cmp	r3, #13
 80026fc:	d172      	bne.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
                menu_val = 0;
 80026fe:	4b3b      	ldr	r3, [pc, #236]	@ (80027ec <HAL_GPIO_EXTI_Callback+0x998>)
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
                clearFrame = 2;
 8002704:	4b3b      	ldr	r3, [pc, #236]	@ (80027f4 <HAL_GPIO_EXTI_Callback+0x9a0>)
 8002706:	2202      	movs	r2, #2
 8002708:	601a      	str	r2, [r3, #0]
                counter = 0;
 800270a:	4b3b      	ldr	r3, [pc, #236]	@ (80027f8 <HAL_GPIO_EXTI_Callback+0x9a4>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
                startScope( & htim2, PSC, ARR);
 8002710:	4b3b      	ldr	r3, [pc, #236]	@ (8002800 <HAL_GPIO_EXTI_Callback+0x9ac>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a3b      	ldr	r2, [pc, #236]	@ (8002804 <HAL_GPIO_EXTI_Callback+0x9b0>)
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	4619      	mov	r1, r3
 800271a:	483b      	ldr	r0, [pc, #236]	@ (8002808 <HAL_GPIO_EXTI_Callback+0x9b4>)
 800271c:	f000 f8b3 	bl	8002886 <startScope>
}
 8002720:	e060      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
        } else if (GPIO_Pin == BTN_3_Pin) { //resets the x/y dividers and offsets
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002728:	d120      	bne.n	800276c <HAL_GPIO_EXTI_Callback+0x918>
            x_shift = 0;
 800272a:	4b38      	ldr	r3, [pc, #224]	@ (800280c <HAL_GPIO_EXTI_Callback+0x9b8>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
            x_div_option = 0;
 8002730:	4b37      	ldr	r3, [pc, #220]	@ (8002810 <HAL_GPIO_EXTI_Callback+0x9bc>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
            y_shift = 0;
 8002736:	4b37      	ldr	r3, [pc, #220]	@ (8002814 <HAL_GPIO_EXTI_Callback+0x9c0>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
            y_div_option = 0;
 800273c:	4b36      	ldr	r3, [pc, #216]	@ (8002818 <HAL_GPIO_EXTI_Callback+0x9c4>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
            rotary_divider = 24;
 8002742:	4b2e      	ldr	r3, [pc, #184]	@ (80027fc <HAL_GPIO_EXTI_Callback+0x9a8>)
 8002744:	2218      	movs	r2, #24
 8002746:	601a      	str	r2, [r3, #0]
            menu_val = 0;
 8002748:	4b28      	ldr	r3, [pc, #160]	@ (80027ec <HAL_GPIO_EXTI_Callback+0x998>)
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
            clearFrame = 2;
 800274e:	4b29      	ldr	r3, [pc, #164]	@ (80027f4 <HAL_GPIO_EXTI_Callback+0x9a0>)
 8002750:	2202      	movs	r2, #2
 8002752:	601a      	str	r2, [r3, #0]
            counter = 0;
 8002754:	4b28      	ldr	r3, [pc, #160]	@ (80027f8 <HAL_GPIO_EXTI_Callback+0x9a4>)
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
            startScope( & htim2, PSC, ARR);
 800275a:	4b29      	ldr	r3, [pc, #164]	@ (8002800 <HAL_GPIO_EXTI_Callback+0x9ac>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a29      	ldr	r2, [pc, #164]	@ (8002804 <HAL_GPIO_EXTI_Callback+0x9b0>)
 8002760:	6812      	ldr	r2, [r2, #0]
 8002762:	4619      	mov	r1, r3
 8002764:	4828      	ldr	r0, [pc, #160]	@ (8002808 <HAL_GPIO_EXTI_Callback+0x9b4>)
 8002766:	f000 f88e 	bl	8002886 <startScope>
}
 800276a:	e03b      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
        } else if (GPIO_Pin == BTN_4_Pin) { //toggles analog front end adjustments in graph
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002772:	d11e      	bne.n	80027b2 <HAL_GPIO_EXTI_Callback+0x95e>
        	afe_toggle = !afe_toggle;
 8002774:	4b29      	ldr	r3, [pc, #164]	@ (800281c <HAL_GPIO_EXTI_Callback+0x9c8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	4b25      	ldr	r3, [pc, #148]	@ (800281c <HAL_GPIO_EXTI_Callback+0x9c8>)
 8002786:	601a      	str	r2, [r3, #0]
            rotary_divider = 24;
 8002788:	4b1c      	ldr	r3, [pc, #112]	@ (80027fc <HAL_GPIO_EXTI_Callback+0x9a8>)
 800278a:	2218      	movs	r2, #24
 800278c:	601a      	str	r2, [r3, #0]
            menu_val = 0;
 800278e:	4b17      	ldr	r3, [pc, #92]	@ (80027ec <HAL_GPIO_EXTI_Callback+0x998>)
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
            clearFrame = 2;
 8002794:	4b17      	ldr	r3, [pc, #92]	@ (80027f4 <HAL_GPIO_EXTI_Callback+0x9a0>)
 8002796:	2202      	movs	r2, #2
 8002798:	601a      	str	r2, [r3, #0]
            counter = 0;
 800279a:	4b17      	ldr	r3, [pc, #92]	@ (80027f8 <HAL_GPIO_EXTI_Callback+0x9a4>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
            startScope( & htim2, PSC, ARR);
 80027a0:	4b17      	ldr	r3, [pc, #92]	@ (8002800 <HAL_GPIO_EXTI_Callback+0x9ac>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a17      	ldr	r2, [pc, #92]	@ (8002804 <HAL_GPIO_EXTI_Callback+0x9b0>)
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	4817      	ldr	r0, [pc, #92]	@ (8002808 <HAL_GPIO_EXTI_Callback+0x9b4>)
 80027ac:	f000 f86b 	bl	8002886 <startScope>
}
 80027b0:	e018      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
        } else if (GPIO_Pin == ROTARY_Key_Pin) {
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027b8:	d105      	bne.n	80027c6 <HAL_GPIO_EXTI_Callback+0x972>
            button_rotary++;
 80027ba:	4b19      	ldr	r3, [pc, #100]	@ (8002820 <HAL_GPIO_EXTI_Callback+0x9cc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3301      	adds	r3, #1
 80027c0:	4a17      	ldr	r2, [pc, #92]	@ (8002820 <HAL_GPIO_EXTI_Callback+0x9cc>)
 80027c2:	6013      	str	r3, [r2, #0]
}
 80027c4:	e00e      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
        } else if (GPIO_Pin == BTN_2_Pin) { //pauses or resumes the scope from displaying new waveforms
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027cc:	d10a      	bne.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
            run_scope = !run_scope;
 80027ce:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <HAL_GPIO_EXTI_Callback+0x9d0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	bf0c      	ite	eq
 80027d6:	2301      	moveq	r3, #1
 80027d8:	2300      	movne	r3, #0
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <HAL_GPIO_EXTI_Callback+0x9d0>)
 80027e0:	601a      	str	r2, [r3, #0]
}
 80027e2:	e7ff      	b.n	80027e4 <HAL_GPIO_EXTI_Callback+0x990>
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	200011be 	.word	0x200011be
 80027f0:	200011bc 	.word	0x200011bc
 80027f4:	200011f0 	.word	0x200011f0
 80027f8:	200011cc 	.word	0x200011cc
 80027fc:	20000024 	.word	0x20000024
 8002800:	200011d8 	.word	0x200011d8
 8002804:	2000001c 	.word	0x2000001c
 8002808:	200004f0 	.word	0x200004f0
 800280c:	20000020 	.word	0x20000020
 8002810:	200011dc 	.word	0x200011dc
 8002814:	200011e4 	.word	0x200011e4
 8002818:	200011e0 	.word	0x200011e0
 800281c:	200011f4 	.word	0x200011f4
 8002820:	200011ec 	.word	0x200011ec
 8002824:	20000018 	.word	0x20000018

08002828 <HAL_TIM_IC_CaptureCallback>:
//Timer callback function for the rotary encoder to update the rotate position
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef * htim) {
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
    timer_counter = __HAL_TIM_GET_COUNTER(htim);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002836:	4a08      	ldr	r2, [pc, #32]	@ (8002858 <HAL_TIM_IC_CaptureCallback+0x30>)
 8002838:	6013      	str	r3, [r2, #0]
    result = timer_counter / rotary_divider;
 800283a:	4b07      	ldr	r3, [pc, #28]	@ (8002858 <HAL_TIM_IC_CaptureCallback+0x30>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a07      	ldr	r2, [pc, #28]	@ (800285c <HAL_TIM_IC_CaptureCallback+0x34>)
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	fbb3 f3f2 	udiv	r3, r3, r2
 8002846:	4a06      	ldr	r2, [pc, #24]	@ (8002860 <HAL_TIM_IC_CaptureCallback+0x38>)
 8002848:	6013      	str	r3, [r2, #0]
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	200011b4 	.word	0x200011b4
 800285c:	20000024 	.word	0x20000024
 8002860:	200011b8 	.word	0x200011b8

08002864 <Error_Handler>:
/* USER CODE END 4 */
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002868:	b672      	cpsid	i
}
 800286a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {}
 800286c:	bf00      	nop
 800286e:	e7fd      	b.n	800286c <Error_Handler+0x8>

08002870 <stopScope>:
#include <stdio.h>

#include <string.h>


void stopScope(TIM_HandleTypeDef * timer) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
    HAL_TIM_Base_Stop(timer);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f006 fe6f 	bl	800955c <HAL_TIM_Base_Stop>
}
 800287e:	bf00      	nop
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <startScope>:

void startScope(TIM_HandleTypeDef * timer, int PSC, int ARR) {
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
    __HAL_TIM_SET_PRESCALER(timer, PSC);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_TIM_SET_AUTORELOAD(timer, ARR);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	60da      	str	r2, [r3, #12]
    HAL_TIM_Base_Start(timer);
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f006 fdfd 	bl	80094a8 <HAL_TIM_Base_Start>
}
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <findVPP>:

float findVPP(uint16_t *values, int afe_toggle) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
    int largest = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
    int smallest = 10000;
 80028c6:	f242 7310 	movw	r3, #10000	@ 0x2710
 80028ca:	613b      	str	r3, [r7, #16]
    float VPP = 0.0;
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < 312; i++) {
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	e020      	b.n	800291a <findVPP+0x62>
        if (values[i] > largest) {
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	4413      	add	r3, r2
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	4293      	cmp	r3, r2
 80028e8:	da05      	bge.n	80028f6 <findVPP+0x3e>
            largest = values[i];
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	617b      	str	r3, [r7, #20]
        }

        if (values[i] < smallest) {
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4293      	cmp	r3, r2
 8002906:	dd05      	ble.n	8002914 <findVPP+0x5c>
            smallest = values[i];
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	4413      	add	r3, r2
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < 312; i++) {
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	3301      	adds	r3, #1
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002920:	dbda      	blt.n	80028d8 <findVPP+0x20>
        }
    }

    if(afe_toggle){
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d02f      	beq.n	8002988 <findVPP+0xd0>
    	largest = (largest-2047.5)*2;
 8002928:	6978      	ldr	r0, [r7, #20]
 800292a:	f7fd fe03 	bl	8000534 <__aeabi_i2d>
 800292e:	a324      	add	r3, pc, #144	@ (adr r3, 80029c0 <findVPP+0x108>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fd fcb0 	bl	8000298 <__aeabi_dsub>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4610      	mov	r0, r2
 800293e:	4619      	mov	r1, r3
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	f7fd fcaa 	bl	800029c <__adddf3>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	f7fe f90a 	bl	8000b68 <__aeabi_d2iz>
 8002954:	4603      	mov	r3, r0
 8002956:	617b      	str	r3, [r7, #20]
    	smallest = (smallest-2047.5)*2;
 8002958:	6938      	ldr	r0, [r7, #16]
 800295a:	f7fd fdeb 	bl	8000534 <__aeabi_i2d>
 800295e:	a318      	add	r3, pc, #96	@ (adr r3, 80029c0 <findVPP+0x108>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	f7fd fc98 	bl	8000298 <__aeabi_dsub>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4610      	mov	r0, r2
 800296e:	4619      	mov	r1, r3
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	f7fd fc92 	bl	800029c <__adddf3>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4610      	mov	r0, r2
 800297e:	4619      	mov	r1, r3
 8002980:	f7fe f8f2 	bl	8000b68 <__aeabi_d2iz>
 8002984:	4603      	mov	r3, r0
 8002986:	613b      	str	r3, [r7, #16]
    }

    VPP = (largest-smallest)/(4095/3.3) ;  // Assuming the scaling factor is correct
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	4618      	mov	r0, r3
 8002990:	f7fd fdd0 	bl	8000534 <__aeabi_i2d>
 8002994:	a30c      	add	r3, pc, #48	@ (adr r3, 80029c8 <findVPP+0x110>)
 8002996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299a:	f7fd ff5f 	bl	800085c <__aeabi_ddiv>
 800299e:	4602      	mov	r2, r0
 80029a0:	460b      	mov	r3, r1
 80029a2:	4610      	mov	r0, r2
 80029a4:	4619      	mov	r1, r3
 80029a6:	f7fe f927 	bl	8000bf8 <__aeabi_d2f>
 80029aa:	4603      	mov	r3, r0
 80029ac:	60bb      	str	r3, [r7, #8]
    return VPP;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	ee07 3a90 	vmov	s15, r3
}
 80029b4:	eeb0 0a67 	vmov.f32	s0, s15
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	00000000 	.word	0x00000000
 80029c4:	409ffe00 	.word	0x409ffe00
 80029c8:	e8ba2e8c 	.word	0xe8ba2e8c
 80029cc:	409363a2 	.word	0x409363a2

080029d0 <mapScreen>:

void mapScreen(uint16_t * array, int y_shift, int y_div_option, uint16_t * map_vals, int afe_toggle) {
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b08b      	sub	sp, #44	@ 0x2c
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]

    float scale = 0.0;
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	627b      	str	r3, [r7, #36]	@ 0x24
    int ADC_size = 4095;
 80029e4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80029e8:	623b      	str	r3, [r7, #32]

    //adjusts for the analog front end via the afe formula: vout = (vin/2) + 3.3/2, and increases the adc value size to fit graph
    //additionally, shift by an additional 3.3v to stay within uint_16 bounds (no negatives)
    //this additional shift is rectified when graph is drawn
    //only activate if afe is toggled
    if(afe_toggle == 1){
 80029ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d138      	bne.n	8002a62 <mapScreen+0x92>
    	for(int i=0;i<312;i++){
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
 80029f4:	e030      	b.n	8002a58 <mapScreen+0x88>
    	    	array[i] = 4095+ ((array[i]-2047.5)*2);
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4413      	add	r3, r2
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fd97 	bl	8000534 <__aeabi_i2d>
 8002a06:	a361      	add	r3, pc, #388	@ (adr r3, 8002b8c <mapScreen+0x1bc>)
 8002a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0c:	f7fd fc44 	bl	8000298 <__aeabi_dsub>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4610      	mov	r0, r2
 8002a16:	4619      	mov	r1, r3
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	f7fd fc3e 	bl	800029c <__adddf3>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	a35a      	add	r3, pc, #360	@ (adr r3, 8002b94 <mapScreen+0x1c4>)
 8002a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2e:	f7fd fc35 	bl	800029c <__adddf3>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	18d4      	adds	r4, r2, r3
 8002a42:	f7fe f8b9 	bl	8000bb8 <__aeabi_d2uiz>
 8002a46:	4603      	mov	r3, r0
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	8023      	strh	r3, [r4, #0]
    	    	ADC_size = 8190;
 8002a4c:	f641 73fe 	movw	r3, #8190	@ 0x1ffe
 8002a50:	623b      	str	r3, [r7, #32]
    	for(int i=0;i<312;i++){
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3301      	adds	r3, #1
 8002a56:	61fb      	str	r3, [r7, #28]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002a5e:	dbca      	blt.n	80029f6 <mapScreen+0x26>
 8002a60:	e002      	b.n	8002a68 <mapScreen+0x98>
    	}
    }else{
    	ADC_size = 4095;
 8002a62:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8002a66:	623b      	str	r3, [r7, #32]
    }


    //selects which y div factor to use
    if (y_div_option == 0) {
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d103      	bne.n	8002a76 <mapScreen+0xa6>
        scale = 1.0;
 8002a6e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a74:	e016      	b.n	8002aa4 <mapScreen+0xd4>
    } else if (y_div_option == 1) {
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d102      	bne.n	8002a82 <mapScreen+0xb2>
        scale = 1.65;
 8002a7c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b78 <mapScreen+0x1a8>)
 8002a7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a80:	e010      	b.n	8002aa4 <mapScreen+0xd4>
    } else if (y_div_option == 2) {
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d102      	bne.n	8002a8e <mapScreen+0xbe>
        scale = 3.3;
 8002a88:	4b3c      	ldr	r3, [pc, #240]	@ (8002b7c <mapScreen+0x1ac>)
 8002a8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a8c:	e00a      	b.n	8002aa4 <mapScreen+0xd4>
    } else if (y_div_option == 3) {
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d102      	bne.n	8002a9a <mapScreen+0xca>
        scale = 8.25;
 8002a94:	4b3a      	ldr	r3, [pc, #232]	@ (8002b80 <mapScreen+0x1b0>)
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a98:	e004      	b.n	8002aa4 <mapScreen+0xd4>
    } else if (y_div_option == 4) {
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d101      	bne.n	8002aa4 <mapScreen+0xd4>
        scale = 16.5;
 8002aa0:	4b38      	ldr	r3, [pc, #224]	@ (8002b84 <mapScreen+0x1b4>)
 8002aa2:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    for (int i = 0; i < 312; i++) {
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	e05d      	b.n	8002b66 <mapScreen+0x196>


    	//center y shift around 10000 to avoid overflows below 0
        if (y_shift > 10000 && y_shift < 21000) {
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	dd09      	ble.n	8002ac8 <mapScreen+0xf8>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f245 2207 	movw	r2, #20999	@ 0x5207
 8002aba:	4293      	cmp	r3, r2
 8002abc:	dc04      	bgt.n	8002ac8 <mapScreen+0xf8>
            y_shift = (21000 - y_shift) * -1;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f5a3 43a4 	sub.w	r3, r3, #20992	@ 0x5200
 8002ac4:	3b08      	subs	r3, #8
 8002ac6:	60bb      	str	r3, [r7, #8]
        }

        map_vals[i] = array[i];
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	441a      	add	r2, r3
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	6839      	ldr	r1, [r7, #0]
 8002ad6:	440b      	add	r3, r1
 8002ad8:	8812      	ldrh	r2, [r2, #0]
 8002ada:	801a      	strh	r2, [r3, #0]

        //scale and shift
        int val = array[i] - (y_shift * 15);
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	4619      	mov	r1, r3
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	1acb      	subs	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
        val = val * scale;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002afe:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b0a:	ee17 3a90 	vmov	r3, s15
 8002b0e:	617b      	str	r3, [r7, #20]

        //convert to display coordinates
        val = 189 - (val / (ADC_size / 158));
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	4a1d      	ldr	r2, [pc, #116]	@ (8002b88 <mapScreen+0x1b8>)
 8002b14:	fb82 1203 	smull	r1, r2, r2, r3
 8002b18:	1192      	asrs	r2, r2, #6
 8002b1a:	17db      	asrs	r3, r3, #31
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b24:	f1c3 03bd 	rsb	r3, r3, #189	@ 0xbd
 8002b28:	617b      	str	r3, [r7, #20]

        //clamp pixels at top and bottom of display
        if (val < 31) {
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b1e      	cmp	r3, #30
 8002b2e:	dc06      	bgt.n	8002b3e <mapScreen+0x16e>
            array[i] = (uint16_t) 31;
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4413      	add	r3, r2
 8002b38:	221f      	movs	r2, #31
 8002b3a:	801a      	strh	r2, [r3, #0]
 8002b3c:	e010      	b.n	8002b60 <mapScreen+0x190>
        } else if (val > 189) {
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2bbd      	cmp	r3, #189	@ 0xbd
 8002b42:	dd06      	ble.n	8002b52 <mapScreen+0x182>
            array[i] = (uint16_t) 189;
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	22bd      	movs	r2, #189	@ 0xbd
 8002b4e:	801a      	strh	r2, [r3, #0]
 8002b50:	e006      	b.n	8002b60 <mapScreen+0x190>
        } else {
            array[i] = (uint16_t) val;
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	4413      	add	r3, r2
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	b292      	uxth	r2, r2
 8002b5e:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < 312; i++) {
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	3301      	adds	r3, #1
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8002b6c:	db9d      	blt.n	8002aaa <mapScreen+0xda>
        }
    }
}
 8002b6e:	bf00      	nop
 8002b70:	bf00      	nop
 8002b72:	372c      	adds	r7, #44	@ 0x2c
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd90      	pop	{r4, r7, pc}
 8002b78:	3fd33333 	.word	0x3fd33333
 8002b7c:	40533333 	.word	0x40533333
 8002b80:	41040000 	.word	0x41040000
 8002b84:	41840000 	.word	0x41840000
 8002b88:	67b23a55 	.word	0x67b23a55
 8002b8c:	00000000 	.word	0x00000000
 8002b90:	409ffe00 	.word	0x409ffe00
 8002b94:	00000000 	.word	0x00000000
 8002b98:	40affe00 	.word	0x40affe00

08002b9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002baa:	4a0f      	ldr	r2, [pc, #60]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	603b      	str	r3, [r7, #0]
 8002bc2:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	4a08      	ldr	r2, [pc, #32]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bce:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800

08002bec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	@ 0x28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a33      	ldr	r2, [pc, #204]	@ (8002cd8 <HAL_ADC_MspInit+0xec>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d160      	bne.n	8002cd0 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	4b32      	ldr	r3, [pc, #200]	@ (8002cdc <HAL_ADC_MspInit+0xf0>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	4a31      	ldr	r2, [pc, #196]	@ (8002cdc <HAL_ADC_MspInit+0xf0>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8002cdc <HAL_ADC_MspInit+0xf0>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002cdc <HAL_ADC_MspInit+0xf0>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	4a2a      	ldr	r2, [pc, #168]	@ (8002cdc <HAL_ADC_MspInit+0xf0>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c3a:	4b28      	ldr	r3, [pc, #160]	@ (8002cdc <HAL_ADC_MspInit+0xf0>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c46:	2304      	movs	r3, #4
 8002c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c52:	f107 0314 	add.w	r3, r7, #20
 8002c56:	4619      	mov	r1, r3
 8002c58:	4821      	ldr	r0, [pc, #132]	@ (8002ce0 <HAL_ADC_MspInit+0xf4>)
 8002c5a:	f003 fe33 	bl	80068c4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002c5e:	4b21      	ldr	r3, [pc, #132]	@ (8002ce4 <HAL_ADC_MspInit+0xf8>)
 8002c60:	4a21      	ldr	r2, [pc, #132]	@ (8002ce8 <HAL_ADC_MspInit+0xfc>)
 8002c62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002c64:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce4 <HAL_ADC_MspInit+0xf8>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce4 <HAL_ADC_MspInit+0xf8>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c70:	4b1c      	ldr	r3, [pc, #112]	@ (8002ce4 <HAL_ADC_MspInit+0xf8>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce4 <HAL_ADC_MspInit+0xf8>)
 8002c78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c7e:	4b19      	ldr	r3, [pc, #100]	@ (8002ce4 <HAL_ADC_MspInit+0xf8>)
 8002c80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c86:	4b17      	ldr	r3, [pc, #92]	@ (8002ce4 <HAL_ADC_MspInit+0xf8>)
 8002c88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ce4 <HAL_ADC_MspInit+0xf8>)
 8002c90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c94:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c96:	4b13      	ldr	r3, [pc, #76]	@ (8002ce4 <HAL_ADC_MspInit+0xf8>)
 8002c98:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002c9c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ce4 <HAL_ADC_MspInit+0xf8>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ca4:	480f      	ldr	r0, [pc, #60]	@ (8002ce4 <HAL_ADC_MspInit+0xf8>)
 8002ca6:	f003 fa1f 	bl	80060e8 <HAL_DMA_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002cb0:	f7ff fdd8 	bl	8002864 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a0b      	ldr	r2, [pc, #44]	@ (8002ce4 <HAL_ADC_MspInit+0xf8>)
 8002cb8:	639a      	str	r2, [r3, #56]	@ 0x38
 8002cba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce4 <HAL_ADC_MspInit+0xf8>)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	2012      	movs	r0, #18
 8002cc6:	f003 f9d8 	bl	800607a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002cca:	2012      	movs	r0, #18
 8002ccc:	f003 f9f1 	bl	80060b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002cd0:	bf00      	nop
 8002cd2:	3728      	adds	r7, #40	@ 0x28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40012000 	.word	0x40012000
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40020000 	.word	0x40020000
 8002ce4:	20000384 	.word	0x20000384
 8002ce8:	40026410 	.word	0x40026410

08002cec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	@ 0x28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a19      	ldr	r2, [pc, #100]	@ (8002d70 <HAL_I2C_MspInit+0x84>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d12c      	bne.n	8002d68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	4b18      	ldr	r3, [pc, #96]	@ (8002d74 <HAL_I2C_MspInit+0x88>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d16:	4a17      	ldr	r2, [pc, #92]	@ (8002d74 <HAL_I2C_MspInit+0x88>)
 8002d18:	f043 0302 	orr.w	r3, r3, #2
 8002d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d1e:	4b15      	ldr	r3, [pc, #84]	@ (8002d74 <HAL_I2C_MspInit+0x88>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d30:	2312      	movs	r3, #18
 8002d32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d3c:	2304      	movs	r3, #4
 8002d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	4619      	mov	r1, r3
 8002d46:	480c      	ldr	r0, [pc, #48]	@ (8002d78 <HAL_I2C_MspInit+0x8c>)
 8002d48:	f003 fdbc 	bl	80068c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	4b08      	ldr	r3, [pc, #32]	@ (8002d74 <HAL_I2C_MspInit+0x88>)
 8002d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d54:	4a07      	ldr	r2, [pc, #28]	@ (8002d74 <HAL_I2C_MspInit+0x88>)
 8002d56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5c:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <HAL_I2C_MspInit+0x88>)
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002d68:	bf00      	nop
 8002d6a:	3728      	adds	r7, #40	@ 0x28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40005400 	.word	0x40005400
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40020400 	.word	0x40020400

08002d7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	@ 0x28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a38      	ldr	r2, [pc, #224]	@ (8002e7c <HAL_SPI_MspInit+0x100>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d169      	bne.n	8002e72 <HAL_SPI_MspInit+0xf6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	4b37      	ldr	r3, [pc, #220]	@ (8002e80 <HAL_SPI_MspInit+0x104>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da6:	4a36      	ldr	r2, [pc, #216]	@ (8002e80 <HAL_SPI_MspInit+0x104>)
 8002da8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002dac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dae:	4b34      	ldr	r3, [pc, #208]	@ (8002e80 <HAL_SPI_MspInit+0x104>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	4b30      	ldr	r3, [pc, #192]	@ (8002e80 <HAL_SPI_MspInit+0x104>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc2:	4a2f      	ldr	r2, [pc, #188]	@ (8002e80 <HAL_SPI_MspInit+0x104>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dca:	4b2d      	ldr	r3, [pc, #180]	@ (8002e80 <HAL_SPI_MspInit+0x104>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin;
 8002dd6:	2320      	movs	r3, #32
 8002dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dda:	2302      	movs	r3, #2
 8002ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002dde:	2302      	movs	r3, #2
 8002de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de2:	2303      	movs	r3, #3
 8002de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002de6:	2305      	movs	r3, #5
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
 8002dea:	f107 0314 	add.w	r3, r7, #20
 8002dee:	4619      	mov	r1, r3
 8002df0:	4824      	ldr	r0, [pc, #144]	@ (8002e84 <HAL_SPI_MspInit+0x108>)
 8002df2:	f003 fd67 	bl	80068c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDO_Pin;
 8002df6:	2380      	movs	r3, #128	@ 0x80
 8002df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e02:	2303      	movs	r3, #3
 8002e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e06:	2305      	movs	r3, #5
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDO_GPIO_Port, &GPIO_InitStruct);
 8002e0a:	f107 0314 	add.w	r3, r7, #20
 8002e0e:	4619      	mov	r1, r3
 8002e10:	481c      	ldr	r0, [pc, #112]	@ (8002e84 <HAL_SPI_MspInit+0x108>)
 8002e12:	f003 fd57 	bl	80068c4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8002e16:	4b1c      	ldr	r3, [pc, #112]	@ (8002e88 <HAL_SPI_MspInit+0x10c>)
 8002e18:	4a1c      	ldr	r2, [pc, #112]	@ (8002e8c <HAL_SPI_MspInit+0x110>)
 8002e1a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8002e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002e88 <HAL_SPI_MspInit+0x10c>)
 8002e1e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002e22:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e24:	4b18      	ldr	r3, [pc, #96]	@ (8002e88 <HAL_SPI_MspInit+0x10c>)
 8002e26:	2240      	movs	r2, #64	@ 0x40
 8002e28:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e2a:	4b17      	ldr	r3, [pc, #92]	@ (8002e88 <HAL_SPI_MspInit+0x10c>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e30:	4b15      	ldr	r3, [pc, #84]	@ (8002e88 <HAL_SPI_MspInit+0x10c>)
 8002e32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e36:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e38:	4b13      	ldr	r3, [pc, #76]	@ (8002e88 <HAL_SPI_MspInit+0x10c>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e3e:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <HAL_SPI_MspInit+0x10c>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002e44:	4b10      	ldr	r3, [pc, #64]	@ (8002e88 <HAL_SPI_MspInit+0x10c>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e88 <HAL_SPI_MspInit+0x10c>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e50:	4b0d      	ldr	r3, [pc, #52]	@ (8002e88 <HAL_SPI_MspInit+0x10c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002e56:	480c      	ldr	r0, [pc, #48]	@ (8002e88 <HAL_SPI_MspInit+0x10c>)
 8002e58:	f003 f946 	bl	80060e8 <HAL_DMA_Init>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_SPI_MspInit+0xea>
    {
      Error_Handler();
 8002e62:	f7ff fcff 	bl	8002864 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a07      	ldr	r2, [pc, #28]	@ (8002e88 <HAL_SPI_MspInit+0x10c>)
 8002e6a:	649a      	str	r2, [r3, #72]	@ 0x48
 8002e6c:	4a06      	ldr	r2, [pc, #24]	@ (8002e88 <HAL_SPI_MspInit+0x10c>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002e72:	bf00      	nop
 8002e74:	3728      	adds	r7, #40	@ 0x28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40013000 	.word	0x40013000
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40020000 	.word	0x40020000
 8002e88:	20000490 	.word	0x20000490
 8002e8c:	40026440 	.word	0x40026440

08002e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ea0:	d115      	bne.n	8002ece <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <HAL_TIM_Base_MspInit+0x48>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eaa:	4a0b      	ldr	r2, [pc, #44]	@ (8002ed8 <HAL_TIM_Base_MspInit+0x48>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eb2:	4b09      	ldr	r3, [pc, #36]	@ (8002ed8 <HAL_TIM_Base_MspInit+0x48>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	60fb      	str	r3, [r7, #12]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	201c      	movs	r0, #28
 8002ec4:	f003 f8d9 	bl	800607a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ec8:	201c      	movs	r0, #28
 8002eca:	f003 f8f2 	bl	80060b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800

08002edc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08a      	sub	sp, #40	@ 0x28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee4:	f107 0314 	add.w	r3, r7, #20
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f70 <HAL_TIM_Encoder_MspInit+0x94>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d133      	bne.n	8002f66 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	4b1c      	ldr	r3, [pc, #112]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x98>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	4a1b      	ldr	r2, [pc, #108]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x98>)
 8002f08:	f043 0304 	orr.w	r3, r3, #4
 8002f0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f0e:	4b19      	ldr	r3, [pc, #100]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x98>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60fb      	str	r3, [r7, #12]
 8002f1e:	4b15      	ldr	r3, [pc, #84]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x98>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	4a14      	ldr	r2, [pc, #80]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x98>)
 8002f24:	f043 0302 	orr.w	r3, r3, #2
 8002f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f2a:	4b12      	ldr	r3, [pc, #72]	@ (8002f74 <HAL_TIM_Encoder_MspInit+0x98>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ROTARY_SD2_Pin|ROTARY_SD1_Pin;
 8002f36:	23c0      	movs	r3, #192	@ 0xc0
 8002f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f42:	2300      	movs	r3, #0
 8002f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f46:	2302      	movs	r3, #2
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4a:	f107 0314 	add.w	r3, r7, #20
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4809      	ldr	r0, [pc, #36]	@ (8002f78 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002f52:	f003 fcb7 	bl	80068c4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002f56:	2200      	movs	r2, #0
 8002f58:	2100      	movs	r1, #0
 8002f5a:	201e      	movs	r0, #30
 8002f5c:	f003 f88d 	bl	800607a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f60:	201e      	movs	r0, #30
 8002f62:	f003 f8a6 	bl	80060b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002f66:	bf00      	nop
 8002f68:	3728      	adds	r7, #40	@ 0x28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40000800 	.word	0x40000800
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40020400 	.word	0x40020400

08002f7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	f107 030c 	add.w	r3, r7, #12
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f9c:	d11d      	bne.n	8002fda <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	4b10      	ldr	r3, [pc, #64]	@ (8002fe4 <HAL_TIM_MspPostInit+0x68>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	4a0f      	ldr	r2, [pc, #60]	@ (8002fe4 <HAL_TIM_MspPostInit+0x68>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fae:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe4 <HAL_TIM_MspPostInit+0x68>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fce:	f107 030c 	add.w	r3, r7, #12
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4804      	ldr	r0, [pc, #16]	@ (8002fe8 <HAL_TIM_MspPostInit+0x6c>)
 8002fd6:	f003 fc75 	bl	80068c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002fda:	bf00      	nop
 8002fdc:	3720      	adds	r7, #32
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40020000 	.word	0x40020000

08002fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ff0:	bf00      	nop
 8002ff2:	e7fd      	b.n	8002ff0 <NMI_Handler+0x4>

08002ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ff8:	bf00      	nop
 8002ffa:	e7fd      	b.n	8002ff8 <HardFault_Handler+0x4>

08002ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003000:	bf00      	nop
 8003002:	e7fd      	b.n	8003000 <MemManage_Handler+0x4>

08003004 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003008:	bf00      	nop
 800300a:	e7fd      	b.n	8003008 <BusFault_Handler+0x4>

0800300c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003010:	bf00      	nop
 8003012:	e7fd      	b.n	8003010 <UsageFault_Handler+0x4>

08003014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003026:	bf00      	nop
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003042:	f002 f977 	bl	8005334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003050:	4802      	ldr	r0, [pc, #8]	@ (800305c <ADC_IRQHandler+0x10>)
 8003052:	f002 f9f6 	bl	8005442 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003056:	bf00      	nop
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	2000033c 	.word	0x2000033c

08003060 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003064:	4802      	ldr	r0, [pc, #8]	@ (8003070 <TIM2_IRQHandler+0x10>)
 8003066:	f006 fcfd 	bl	8009a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	200004f0 	.word	0x200004f0

08003074 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003078:	4802      	ldr	r0, [pc, #8]	@ (8003084 <TIM4_IRQHandler+0x10>)
 800307a:	f006 fcf3 	bl	8009a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000538 	.word	0x20000538

08003088 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROTARY_Key_Pin);
 800308c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003090:	f003 fdd0 	bl	8006c34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_1_Pin);
 8003094:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003098:	f003 fdcc 	bl	8006c34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_2_Pin);
 800309c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80030a0:	f003 fdc8 	bl	8006c34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_3_Pin);
 80030a4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80030a8:	f003 fdc4 	bl	8006c34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_4_Pin);
 80030ac:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80030b0:	f003 fdc0 	bl	8006c34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030bc:	4802      	ldr	r0, [pc, #8]	@ (80030c8 <DMA2_Stream0_IRQHandler+0x10>)
 80030be:	f003 f989 	bl	80063d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000384 	.word	0x20000384

080030cc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80030d0:	4802      	ldr	r0, [pc, #8]	@ (80030dc <DMA2_Stream2_IRQHandler+0x10>)
 80030d2:	f003 f97f 	bl	80063d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000490 	.word	0x20000490

080030e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80030e4:	4802      	ldr	r0, [pc, #8]	@ (80030f0 <OTG_FS_IRQHandler+0x10>)
 80030e6:	f004 f845 	bl	8007174 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20002774 	.word	0x20002774

080030f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0
  return 1;
 80030f8:	2301      	movs	r3, #1
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <_kill>:

int _kill(int pid, int sig)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800310e:	f00e f85d 	bl	80111cc <__errno>
 8003112:	4603      	mov	r3, r0
 8003114:	2216      	movs	r2, #22
 8003116:	601a      	str	r2, [r3, #0]
  return -1;
 8003118:	f04f 33ff 	mov.w	r3, #4294967295
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <_exit>:

void _exit (int status)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7ff ffe7 	bl	8003104 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003136:	bf00      	nop
 8003138:	e7fd      	b.n	8003136 <_exit+0x12>

0800313a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	e00a      	b.n	8003162 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800314c:	f3af 8000 	nop.w
 8003150:	4601      	mov	r1, r0
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	60ba      	str	r2, [r7, #8]
 8003158:	b2ca      	uxtb	r2, r1
 800315a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	3301      	adds	r3, #1
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	429a      	cmp	r2, r3
 8003168:	dbf0      	blt.n	800314c <_read+0x12>
  }

  return len;
 800316a:	687b      	ldr	r3, [r7, #4]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	e009      	b.n	800319a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	1c5a      	adds	r2, r3, #1
 800318a:	60ba      	str	r2, [r7, #8]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	4618      	mov	r0, r3
 8003190:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3301      	adds	r3, #1
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	429a      	cmp	r2, r3
 80031a0:	dbf1      	blt.n	8003186 <_write+0x12>
  }
  return len;
 80031a2:	687b      	ldr	r3, [r7, #4]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <_close>:

int _close(int file)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031d4:	605a      	str	r2, [r3, #4]
  return 0;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <_isatty>:

int _isatty(int file)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031ec:	2301      	movs	r3, #1
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b085      	sub	sp, #20
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800321c:	4a14      	ldr	r2, [pc, #80]	@ (8003270 <_sbrk+0x5c>)
 800321e:	4b15      	ldr	r3, [pc, #84]	@ (8003274 <_sbrk+0x60>)
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003228:	4b13      	ldr	r3, [pc, #76]	@ (8003278 <_sbrk+0x64>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d102      	bne.n	8003236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003230:	4b11      	ldr	r3, [pc, #68]	@ (8003278 <_sbrk+0x64>)
 8003232:	4a12      	ldr	r2, [pc, #72]	@ (800327c <_sbrk+0x68>)
 8003234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003236:	4b10      	ldr	r3, [pc, #64]	@ (8003278 <_sbrk+0x64>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	429a      	cmp	r2, r3
 8003242:	d207      	bcs.n	8003254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003244:	f00d ffc2 	bl	80111cc <__errno>
 8003248:	4603      	mov	r3, r0
 800324a:	220c      	movs	r2, #12
 800324c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800324e:	f04f 33ff 	mov.w	r3, #4294967295
 8003252:	e009      	b.n	8003268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003254:	4b08      	ldr	r3, [pc, #32]	@ (8003278 <_sbrk+0x64>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800325a:	4b07      	ldr	r3, [pc, #28]	@ (8003278 <_sbrk+0x64>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	4a05      	ldr	r2, [pc, #20]	@ (8003278 <_sbrk+0x64>)
 8003264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003266:	68fb      	ldr	r3, [r7, #12]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20020000 	.word	0x20020000
 8003274:	00000400 	.word	0x00000400
 8003278:	200011fc 	.word	0x200011fc
 800327c:	20002fc8 	.word	0x20002fc8

08003280 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003284:	4b06      	ldr	r3, [pc, #24]	@ (80032a0 <SystemInit+0x20>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328a:	4a05      	ldr	r2, [pc, #20]	@ (80032a0 <SystemInit+0x20>)
 800328c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003290:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000ed00 	.word	0xe000ed00

080032a4 <drawWaveform>:
    10, // Height
    BMP_BPP_16,
    BMP_RGB565
};

void drawWaveform(uint16_t * values, uint16_t * old_values, uint16_t wave_color) {
 80032a4:	b590      	push	{r4, r7, lr}
 80032a6:	b08b      	sub	sp, #44	@ 0x2c
 80032a8:	af02      	add	r7, sp, #8
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	4613      	mov	r3, r2
 80032b0:	80fb      	strh	r3, [r7, #6]

	//erases any old waveform pixels
    int j = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 311; i++) {
 80032b6:	2300      	movs	r3, #0
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	e03b      	b.n	8003334 <drawWaveform+0x90>
        if (!((old_values[i] == values[i]) && (old_values[i + 1] == values[i + 1]))) {
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	4413      	add	r3, r2
 80032c4:	881a      	ldrh	r2, [r3, #0]
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	68f9      	ldr	r1, [r7, #12]
 80032cc:	440b      	add	r3, r1
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d10d      	bne.n	80032f0 <drawWaveform+0x4c>
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	3301      	adds	r3, #1
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	4413      	add	r3, r2
 80032de:	881a      	ldrh	r2, [r3, #0]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	3301      	adds	r3, #1
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	68f9      	ldr	r1, [r7, #12]
 80032e8:	440b      	add	r3, r1
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d01b      	beq.n	8003328 <drawWaveform+0x84>
            UG_DrawLine(j + 3, old_values[i], j + 4, old_values[i + 1], C_BLACK);
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3303      	adds	r3, #3
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	b218      	sxth	r0, r3
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	4413      	add	r3, r2
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	b219      	sxth	r1, r3
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	b29b      	uxth	r3, r3
 800330a:	3304      	adds	r3, #4
 800330c:	b29b      	uxth	r3, r3
 800330e:	b21c      	sxth	r4, r3
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	3301      	adds	r3, #1
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	4413      	add	r3, r2
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	b21b      	sxth	r3, r3
 800331e:	2200      	movs	r2, #0
 8003320:	9200      	str	r2, [sp, #0]
 8003322:	4622      	mov	r2, r4
 8003324:	f008 fe30 	bl	800bf88 <UG_DrawLine>
        }

        j++;
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	3301      	adds	r3, #1
 800332c:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < 311; i++) {
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	3301      	adds	r3, #1
 8003332:	61bb      	str	r3, [r7, #24]
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 800333a:	ddbf      	ble.n	80032bc <drawWaveform+0x18>
    }

    //draws new waveform
    int x = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 311; i++) {
 8003340:	2300      	movs	r3, #0
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	e022      	b.n	800338c <drawWaveform+0xe8>
        UG_DrawLine(x + 3, values[i], x + 4, values[i + 1], wave_color);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	b29b      	uxth	r3, r3
 800334a:	3303      	adds	r3, #3
 800334c:	b29b      	uxth	r3, r3
 800334e:	b218      	sxth	r0, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	b219      	sxth	r1, r3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	b29b      	uxth	r3, r3
 8003360:	3304      	adds	r3, #4
 8003362:	b29b      	uxth	r3, r3
 8003364:	b21c      	sxth	r4, r3
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	3301      	adds	r3, #1
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	b21a      	sxth	r2, r3
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	4613      	mov	r3, r2
 800337a:	4622      	mov	r2, r4
 800337c:	f008 fe04 	bl	800bf88 <UG_DrawLine>
        //LCD_DrawPixel(x+3, values[i], wave_color);

        x++;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	3301      	adds	r3, #1
 8003384:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 311; i++) {
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	3301      	adds	r3, #1
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f5b3 7f9b 	cmp.w	r3, #310	@ 0x136
 8003392:	ddd8      	ble.n	8003346 <drawWaveform+0xa2>
    }
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	3724      	adds	r7, #36	@ 0x24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd90      	pop	{r4, r7, pc}
	...

080033a0 <scopeMenu>:

void scopeMenu() {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af02      	add	r7, sp, #8

    //title
    LCD_PutStr(7, 9, "STMScope", FONT_5X12, C_WHITE, C_BLACK);
 80033a6:	2300      	movs	r3, #0
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	4b5e      	ldr	r3, [pc, #376]	@ (800352c <scopeMenu+0x18c>)
 80033b2:	4a5f      	ldr	r2, [pc, #380]	@ (8003530 <scopeMenu+0x190>)
 80033b4:	2109      	movs	r1, #9
 80033b6:	2007      	movs	r0, #7
 80033b8:	f001 fec8 	bl	800514c <LCD_PutStr>

    //left border
    LCD_DrawLine(0, 0, 0, 240, C_WHITE);
 80033bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	23f0      	movs	r3, #240	@ 0xf0
 80033c4:	2200      	movs	r2, #0
 80033c6:	2100      	movs	r1, #0
 80033c8:	2000      	movs	r0, #0
 80033ca:	f001 fe81 	bl	80050d0 <LCD_DrawLine>
    LCD_DrawLine(1, 0, 1, 240, C_WHITE);
 80033ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033d2:	9300      	str	r3, [sp, #0]
 80033d4:	23f0      	movs	r3, #240	@ 0xf0
 80033d6:	2201      	movs	r2, #1
 80033d8:	2100      	movs	r1, #0
 80033da:	2001      	movs	r0, #1
 80033dc:	f001 fe78 	bl	80050d0 <LCD_DrawLine>
    LCD_DrawLine(2, 0, 2, 240, C_WHITE);
 80033e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	23f0      	movs	r3, #240	@ 0xf0
 80033e8:	2202      	movs	r2, #2
 80033ea:	2100      	movs	r1, #0
 80033ec:	2002      	movs	r0, #2
 80033ee:	f001 fe6f 	bl	80050d0 <LCD_DrawLine>

    //right border
    LCD_DrawLine(319, 0, 319, 240, C_WHITE);
 80033f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	23f0      	movs	r3, #240	@ 0xf0
 80033fa:	f240 123f 	movw	r2, #319	@ 0x13f
 80033fe:	2100      	movs	r1, #0
 8003400:	f240 103f 	movw	r0, #319	@ 0x13f
 8003404:	f001 fe64 	bl	80050d0 <LCD_DrawLine>
    LCD_DrawLine(318, 0, 318, 240, C_WHITE);
 8003408:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	23f0      	movs	r3, #240	@ 0xf0
 8003410:	f44f 729f 	mov.w	r2, #318	@ 0x13e
 8003414:	2100      	movs	r1, #0
 8003416:	f44f 709f 	mov.w	r0, #318	@ 0x13e
 800341a:	f001 fe59 	bl	80050d0 <LCD_DrawLine>
    LCD_DrawLine(317, 0, 317, 240, C_WHITE);
 800341e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	23f0      	movs	r3, #240	@ 0xf0
 8003426:	f240 123d 	movw	r2, #317	@ 0x13d
 800342a:	2100      	movs	r1, #0
 800342c:	f240 103d 	movw	r0, #317	@ 0x13d
 8003430:	f001 fe4e 	bl	80050d0 <LCD_DrawLine>

    //top border
    LCD_DrawLine(0, 0, 319, 0, C_WHITE);
 8003434:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	2300      	movs	r3, #0
 800343c:	f240 123f 	movw	r2, #319	@ 0x13f
 8003440:	2100      	movs	r1, #0
 8003442:	2000      	movs	r0, #0
 8003444:	f001 fe44 	bl	80050d0 <LCD_DrawLine>
    LCD_DrawLine(0, 1, 319, 1, C_WHITE);
 8003448:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2301      	movs	r3, #1
 8003450:	f240 123f 	movw	r2, #319	@ 0x13f
 8003454:	2101      	movs	r1, #1
 8003456:	2000      	movs	r0, #0
 8003458:	f001 fe3a 	bl	80050d0 <LCD_DrawLine>
    LCD_DrawLine(0, 2, 319, 2, C_WHITE);
 800345c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	2302      	movs	r3, #2
 8003464:	f240 123f 	movw	r2, #319	@ 0x13f
 8003468:	2102      	movs	r1, #2
 800346a:	2000      	movs	r0, #0
 800346c:	f001 fe30 	bl	80050d0 <LCD_DrawLine>

    //bottom border
    LCD_DrawLine(0, 239, 319, 239, C_WHITE);
 8003470:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	23ef      	movs	r3, #239	@ 0xef
 8003478:	f240 123f 	movw	r2, #319	@ 0x13f
 800347c:	21ef      	movs	r1, #239	@ 0xef
 800347e:	2000      	movs	r0, #0
 8003480:	f001 fe26 	bl	80050d0 <LCD_DrawLine>
    LCD_DrawLine(0, 238, 319, 238, C_WHITE);
 8003484:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	23ee      	movs	r3, #238	@ 0xee
 800348c:	f240 123f 	movw	r2, #319	@ 0x13f
 8003490:	21ee      	movs	r1, #238	@ 0xee
 8003492:	2000      	movs	r0, #0
 8003494:	f001 fe1c 	bl	80050d0 <LCD_DrawLine>
    LCD_DrawLine(0, 237, 319, 237, C_WHITE);
 8003498:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	23ed      	movs	r3, #237	@ 0xed
 80034a0:	f240 123f 	movw	r2, #319	@ 0x13f
 80034a4:	21ed      	movs	r1, #237	@ 0xed
 80034a6:	2000      	movs	r0, #0
 80034a8:	f001 fe12 	bl	80050d0 <LCD_DrawLine>

    //top divider
    LCD_DrawLine(3, 28, 316, 28, C_WHITE);
 80034ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	231c      	movs	r3, #28
 80034b4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80034b8:	211c      	movs	r1, #28
 80034ba:	2003      	movs	r0, #3
 80034bc:	f001 fe08 	bl	80050d0 <LCD_DrawLine>
    LCD_DrawLine(3, 29, 316, 29, C_WHITE);
 80034c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	231d      	movs	r3, #29
 80034c8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80034cc:	211d      	movs	r1, #29
 80034ce:	2003      	movs	r0, #3
 80034d0:	f001 fdfe 	bl	80050d0 <LCD_DrawLine>
    LCD_DrawLine(3, 30, 316, 30, C_WHITE);
 80034d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	231e      	movs	r3, #30
 80034dc:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80034e0:	211e      	movs	r1, #30
 80034e2:	2003      	movs	r0, #3
 80034e4:	f001 fdf4 	bl	80050d0 <LCD_DrawLine>

    //bottom divider
    LCD_DrawLine(3, 190, 316, 190, C_WHITE);
 80034e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	23be      	movs	r3, #190	@ 0xbe
 80034f0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80034f4:	21be      	movs	r1, #190	@ 0xbe
 80034f6:	2003      	movs	r0, #3
 80034f8:	f001 fdea 	bl	80050d0 <LCD_DrawLine>
    LCD_DrawLine(3, 191, 316, 191, C_WHITE);
 80034fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	23bf      	movs	r3, #191	@ 0xbf
 8003504:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8003508:	21bf      	movs	r1, #191	@ 0xbf
 800350a:	2003      	movs	r0, #3
 800350c:	f001 fde0 	bl	80050d0 <LCD_DrawLine>
    LCD_DrawLine(3, 192, 316, 192, C_WHITE);
 8003510:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	23c0      	movs	r3, #192	@ 0xc0
 8003518:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800351c:	21c0      	movs	r1, #192	@ 0xc0
 800351e:	2003      	movs	r0, #3
 8003520:	f001 fdd6 	bl	80050d0 <LCD_DrawLine>
}
 8003524:	bf00      	nop
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	08013860 	.word	0x08013860
 8003530:	080131b0 	.word	0x080131b0

08003534 <drawGrid>:

void drawGrid() {
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af02      	add	r7, sp, #8
    //vertical graph lines
    for (int i = 0; i < 7; i++) {
 800353a:	2300      	movs	r3, #0
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	e019      	b.n	8003574 <drawGrid+0x40>
        LCD_DrawLine(40 + (40 * i), 31, 40 + (40 * i), 189, C_WHITE_39);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3301      	adds	r3, #1
 8003544:	b29b      	uxth	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	0092      	lsls	r2, r2, #2
 800354a:	4413      	add	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	b298      	uxth	r0, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3301      	adds	r3, #1
 8003554:	b29b      	uxth	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	0092      	lsls	r2, r2, #2
 800355a:	4413      	add	r3, r2
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	b29a      	uxth	r2, r3
 8003560:	f246 332c 	movw	r3, #25388	@ 0x632c
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	23bd      	movs	r3, #189	@ 0xbd
 8003568:	211f      	movs	r1, #31
 800356a:	f001 fdb1 	bl	80050d0 <LCD_DrawLine>
    for (int i = 0; i < 7; i++) {
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3301      	adds	r3, #1
 8003572:	607b      	str	r3, [r7, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b06      	cmp	r3, #6
 8003578:	dde2      	ble.n	8003540 <drawGrid+0xc>

    }

    //horizontal graph lines
    for (int i = 0; i < 4; i++) {
 800357a:	2300      	movs	r3, #0
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	e01c      	b.n	80035ba <drawGrid+0x86>
        LCD_DrawLine(3, 50 + (i * 40), 316, 50 + (i * 40), C_WHITE_39);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	0092      	lsls	r2, r2, #2
 8003588:	4413      	add	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	b29b      	uxth	r3, r3
 800358e:	3332      	adds	r3, #50	@ 0x32
 8003590:	b299      	uxth	r1, r3
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	0092      	lsls	r2, r2, #2
 800359a:	4413      	add	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3332      	adds	r3, #50	@ 0x32
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	f246 322c 	movw	r2, #25388	@ 0x632c
 80035a8:	9200      	str	r2, [sp, #0]
 80035aa:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80035ae:	2003      	movs	r0, #3
 80035b0:	f001 fd8e 	bl	80050d0 <LCD_DrawLine>
    for (int i = 0; i < 4; i++) {
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	3301      	adds	r3, #1
 80035b8:	603b      	str	r3, [r7, #0]
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b03      	cmp	r3, #3
 80035be:	dddf      	ble.n	8003580 <drawGrid+0x4c>

    }
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <drawOscButtons>:

void drawOscButtons(uint8_t selected_option, uint16_t * values, int cursor_x, int cursor_y, int afe_toggle) {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08a      	sub	sp, #40	@ 0x28
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	60b9      	str	r1, [r7, #8]
 80035d4:	607a      	str	r2, [r7, #4]
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	4603      	mov	r3, r0
 80035da:	73fb      	strb	r3, [r7, #15]

	//finds peak to peak
    float VPP = findVPP(values, afe_toggle);
 80035dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035de:	68b8      	ldr	r0, [r7, #8]
 80035e0:	f7ff f96a 	bl	80028b8 <findVPP>
 80035e4:	ed87 0a07 	vstr	s0, [r7, #28]
    char VPP_str[12];
    sprintf(VPP_str, "VPP: %.2f V", VPP);
 80035e8:	69f8      	ldr	r0, [r7, #28]
 80035ea:	f7fc ffb5 	bl	8000558 <__aeabi_f2d>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	f107 0010 	add.w	r0, r7, #16
 80035f6:	4993      	ldr	r1, [pc, #588]	@ (8003844 <drawOscButtons+0x278>)
 80035f8:	f00d fc9e 	bl	8010f38 <siprintf>
    printf("%s\n", VPP_str);
 80035fc:	f107 0310 	add.w	r3, r7, #16
 8003600:	4618      	mov	r0, r3
 8003602:	f00d fc91 	bl	8010f28 <puts>

    //mode button
    if (selected_option == 0) {
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d11b      	bne.n	8003644 <drawOscButtons+0x78>
        UG_DrawFrame(11, 200, 39, 228, C_BLUE);
 800360c:	231f      	movs	r3, #31
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	23e4      	movs	r3, #228	@ 0xe4
 8003612:	2227      	movs	r2, #39	@ 0x27
 8003614:	21c8      	movs	r1, #200	@ 0xc8
 8003616:	200b      	movs	r0, #11
 8003618:	f008 fc54 	bl	800bec4 <UG_DrawFrame>
        UG_FillFrame(12, 201, 38, 227, C_DARK_BLUE);
 800361c:	2311      	movs	r3, #17
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	23e3      	movs	r3, #227	@ 0xe3
 8003622:	2226      	movs	r2, #38	@ 0x26
 8003624:	21c9      	movs	r1, #201	@ 0xc9
 8003626:	200c      	movs	r0, #12
 8003628:	f008 fbda 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(18, 201 + 7, "USB", FONT_5X12, C_WHITE, C_DARK_BLUE);
 800362c:	2311      	movs	r3, #17
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	4b84      	ldr	r3, [pc, #528]	@ (8003848 <drawOscButtons+0x27c>)
 8003638:	4a84      	ldr	r2, [pc, #528]	@ (800384c <drawOscButtons+0x280>)
 800363a:	21d0      	movs	r1, #208	@ 0xd0
 800363c:	2012      	movs	r0, #18
 800363e:	f001 fd85 	bl	800514c <LCD_PutStr>
 8003642:	e01b      	b.n	800367c <drawOscButtons+0xb0>
    } else {
        UG_DrawFrame(11, 200, 39, 228, C_WHITE);
 8003644:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	23e4      	movs	r3, #228	@ 0xe4
 800364c:	2227      	movs	r2, #39	@ 0x27
 800364e:	21c8      	movs	r1, #200	@ 0xc8
 8003650:	200b      	movs	r0, #11
 8003652:	f008 fc37 	bl	800bec4 <UG_DrawFrame>
        UG_FillFrame(12, 201, 38, 227, C_BLACK);
 8003656:	2300      	movs	r3, #0
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	23e3      	movs	r3, #227	@ 0xe3
 800365c:	2226      	movs	r2, #38	@ 0x26
 800365e:	21c9      	movs	r1, #201	@ 0xc9
 8003660:	200c      	movs	r0, #12
 8003662:	f008 fbbd 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(18, 201 + 7, "USB", FONT_5X12, C_WHITE, C_BLACK);
 8003666:	2300      	movs	r3, #0
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	4b75      	ldr	r3, [pc, #468]	@ (8003848 <drawOscButtons+0x27c>)
 8003672:	4a76      	ldr	r2, [pc, #472]	@ (800384c <drawOscButtons+0x280>)
 8003674:	21d0      	movs	r1, #208	@ 0xd0
 8003676:	2012      	movs	r0, #18
 8003678:	f001 fd68 	bl	800514c <LCD_PutStr>
    }

    //auto set button
    if (selected_option == 1) {
 800367c:	7bfb      	ldrb	r3, [r7, #15]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d11b      	bne.n	80036ba <drawOscButtons+0xee>
        UG_DrawFrame(43, 200, 71, 228, C_BLUE);
 8003682:	231f      	movs	r3, #31
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	23e4      	movs	r3, #228	@ 0xe4
 8003688:	2247      	movs	r2, #71	@ 0x47
 800368a:	21c8      	movs	r1, #200	@ 0xc8
 800368c:	202b      	movs	r0, #43	@ 0x2b
 800368e:	f008 fc19 	bl	800bec4 <UG_DrawFrame>
        UG_FillFrame(44, 201, 70, 227, C_DARK_BLUE);
 8003692:	2311      	movs	r3, #17
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	23e3      	movs	r3, #227	@ 0xe3
 8003698:	2246      	movs	r2, #70	@ 0x46
 800369a:	21c9      	movs	r1, #201	@ 0xc9
 800369c:	202c      	movs	r0, #44	@ 0x2c
 800369e:	f008 fb9f 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(50, 208, "TRG", FONT_5X12, C_WHITE, C_DARK_BLUE);
 80036a2:	2311      	movs	r3, #17
 80036a4:	9301      	str	r3, [sp, #4]
 80036a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	4b66      	ldr	r3, [pc, #408]	@ (8003848 <drawOscButtons+0x27c>)
 80036ae:	4a68      	ldr	r2, [pc, #416]	@ (8003850 <drawOscButtons+0x284>)
 80036b0:	21d0      	movs	r1, #208	@ 0xd0
 80036b2:	2032      	movs	r0, #50	@ 0x32
 80036b4:	f001 fd4a 	bl	800514c <LCD_PutStr>
 80036b8:	e01b      	b.n	80036f2 <drawOscButtons+0x126>
    } else {
        UG_DrawFrame(43, 200, 71, 228, C_WHITE);
 80036ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	23e4      	movs	r3, #228	@ 0xe4
 80036c2:	2247      	movs	r2, #71	@ 0x47
 80036c4:	21c8      	movs	r1, #200	@ 0xc8
 80036c6:	202b      	movs	r0, #43	@ 0x2b
 80036c8:	f008 fbfc 	bl	800bec4 <UG_DrawFrame>
        UG_FillFrame(44, 201, 70, 227, C_BLACK);
 80036cc:	2300      	movs	r3, #0
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	23e3      	movs	r3, #227	@ 0xe3
 80036d2:	2246      	movs	r2, #70	@ 0x46
 80036d4:	21c9      	movs	r1, #201	@ 0xc9
 80036d6:	202c      	movs	r0, #44	@ 0x2c
 80036d8:	f008 fb82 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(50, 201 + 7, "TRG", FONT_5X12, C_WHITE, C_BLACK);
 80036dc:	2300      	movs	r3, #0
 80036de:	9301      	str	r3, [sp, #4]
 80036e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	4b58      	ldr	r3, [pc, #352]	@ (8003848 <drawOscButtons+0x27c>)
 80036e8:	4a59      	ldr	r2, [pc, #356]	@ (8003850 <drawOscButtons+0x284>)
 80036ea:	21d0      	movs	r1, #208	@ 0xd0
 80036ec:	2032      	movs	r0, #50	@ 0x32
 80036ee:	f001 fd2d 	bl	800514c <LCD_PutStr>
    }

    //scale button
    if (selected_option == 2) {
 80036f2:	7bfb      	ldrb	r3, [r7, #15]
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d11b      	bne.n	8003730 <drawOscButtons+0x164>
        UG_DrawFrame(75, 200, 103, 228, C_BLUE);
 80036f8:	231f      	movs	r3, #31
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	23e4      	movs	r3, #228	@ 0xe4
 80036fe:	2267      	movs	r2, #103	@ 0x67
 8003700:	21c8      	movs	r1, #200	@ 0xc8
 8003702:	204b      	movs	r0, #75	@ 0x4b
 8003704:	f008 fbde 	bl	800bec4 <UG_DrawFrame>
        UG_FillFrame(76, 201, 102, 227, C_DARK_BLUE);
 8003708:	2311      	movs	r3, #17
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	23e3      	movs	r3, #227	@ 0xe3
 800370e:	2266      	movs	r2, #102	@ 0x66
 8003710:	21c9      	movs	r1, #201	@ 0xc9
 8003712:	204c      	movs	r0, #76	@ 0x4c
 8003714:	f008 fb64 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(82, 201 + 7, "SCA", FONT_5X12, C_WHITE, C_DARK_BLUE);
 8003718:	2311      	movs	r3, #17
 800371a:	9301      	str	r3, [sp, #4]
 800371c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	4b49      	ldr	r3, [pc, #292]	@ (8003848 <drawOscButtons+0x27c>)
 8003724:	4a4b      	ldr	r2, [pc, #300]	@ (8003854 <drawOscButtons+0x288>)
 8003726:	21d0      	movs	r1, #208	@ 0xd0
 8003728:	2052      	movs	r0, #82	@ 0x52
 800372a:	f001 fd0f 	bl	800514c <LCD_PutStr>
 800372e:	e01b      	b.n	8003768 <drawOscButtons+0x19c>
    } else {
        UG_DrawFrame(75, 200, 103, 228, C_WHITE);
 8003730:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	23e4      	movs	r3, #228	@ 0xe4
 8003738:	2267      	movs	r2, #103	@ 0x67
 800373a:	21c8      	movs	r1, #200	@ 0xc8
 800373c:	204b      	movs	r0, #75	@ 0x4b
 800373e:	f008 fbc1 	bl	800bec4 <UG_DrawFrame>
        UG_FillFrame(76, 201, 102, 227, C_BLACK);
 8003742:	2300      	movs	r3, #0
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	23e3      	movs	r3, #227	@ 0xe3
 8003748:	2266      	movs	r2, #102	@ 0x66
 800374a:	21c9      	movs	r1, #201	@ 0xc9
 800374c:	204c      	movs	r0, #76	@ 0x4c
 800374e:	f008 fb47 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(82, 201 + 7, "SCA", FONT_5X12, C_WHITE, C_BLACK);
 8003752:	2300      	movs	r3, #0
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	4b3a      	ldr	r3, [pc, #232]	@ (8003848 <drawOscButtons+0x27c>)
 800375e:	4a3d      	ldr	r2, [pc, #244]	@ (8003854 <drawOscButtons+0x288>)
 8003760:	21d0      	movs	r1, #208	@ 0xd0
 8003762:	2052      	movs	r0, #82	@ 0x52
 8003764:	f001 fcf2 	bl	800514c <LCD_PutStr>
    }

    //display options button
    if (selected_option == 3) {
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	2b03      	cmp	r3, #3
 800376c:	d11b      	bne.n	80037a6 <drawOscButtons+0x1da>
        UG_DrawFrame(107, 200, 135, 228, C_BLUE);
 800376e:	231f      	movs	r3, #31
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	23e4      	movs	r3, #228	@ 0xe4
 8003774:	2287      	movs	r2, #135	@ 0x87
 8003776:	21c8      	movs	r1, #200	@ 0xc8
 8003778:	206b      	movs	r0, #107	@ 0x6b
 800377a:	f008 fba3 	bl	800bec4 <UG_DrawFrame>
        UG_FillFrame(108, 201, 134, 227, C_DARK_BLUE);
 800377e:	2311      	movs	r3, #17
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	23e3      	movs	r3, #227	@ 0xe3
 8003784:	2286      	movs	r2, #134	@ 0x86
 8003786:	21c9      	movs	r1, #201	@ 0xc9
 8003788:	206c      	movs	r0, #108	@ 0x6c
 800378a:	f008 fb29 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(114, 201 + 7, "OPT", FONT_5X12, C_WHITE, C_DARK_BLUE);
 800378e:	2311      	movs	r3, #17
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	4b2b      	ldr	r3, [pc, #172]	@ (8003848 <drawOscButtons+0x27c>)
 800379a:	4a2f      	ldr	r2, [pc, #188]	@ (8003858 <drawOscButtons+0x28c>)
 800379c:	21d0      	movs	r1, #208	@ 0xd0
 800379e:	2072      	movs	r0, #114	@ 0x72
 80037a0:	f001 fcd4 	bl	800514c <LCD_PutStr>
 80037a4:	e01b      	b.n	80037de <drawOscButtons+0x212>
    } else {
        UG_DrawFrame(107, 200, 135, 228, C_WHITE);
 80037a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	23e4      	movs	r3, #228	@ 0xe4
 80037ae:	2287      	movs	r2, #135	@ 0x87
 80037b0:	21c8      	movs	r1, #200	@ 0xc8
 80037b2:	206b      	movs	r0, #107	@ 0x6b
 80037b4:	f008 fb86 	bl	800bec4 <UG_DrawFrame>
        UG_FillFrame(108, 201, 134, 227, C_BLACK);
 80037b8:	2300      	movs	r3, #0
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	23e3      	movs	r3, #227	@ 0xe3
 80037be:	2286      	movs	r2, #134	@ 0x86
 80037c0:	21c9      	movs	r1, #201	@ 0xc9
 80037c2:	206c      	movs	r0, #108	@ 0x6c
 80037c4:	f008 fb0c 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(114, 201 + 7, "OPT", FONT_5X12, C_WHITE, C_BLACK);
 80037c8:	2300      	movs	r3, #0
 80037ca:	9301      	str	r3, [sp, #4]
 80037cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037d0:	9300      	str	r3, [sp, #0]
 80037d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003848 <drawOscButtons+0x27c>)
 80037d4:	4a20      	ldr	r2, [pc, #128]	@ (8003858 <drawOscButtons+0x28c>)
 80037d6:	21d0      	movs	r1, #208	@ 0xd0
 80037d8:	2072      	movs	r0, #114	@ 0x72
 80037da:	f001 fcb7 	bl	800514c <LCD_PutStr>
    }

    //measurements + x/y cursor button
    if (selected_option == 4) {
 80037de:	7bfb      	ldrb	r3, [r7, #15]
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d115      	bne.n	8003810 <drawOscButtons+0x244>
        UG_DrawFrame(144, 199, 308, 230, C_BLUE);
 80037e4:	231f      	movs	r3, #31
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	23e6      	movs	r3, #230	@ 0xe6
 80037ea:	f44f 729a 	mov.w	r2, #308	@ 0x134
 80037ee:	21c7      	movs	r1, #199	@ 0xc7
 80037f0:	2090      	movs	r0, #144	@ 0x90
 80037f2:	f008 fb67 	bl	800bec4 <UG_DrawFrame>
        //LCD_PutStr(147,202, "X:0.00V", FONT_8X12, C_WHITE, C_DARK_BLUE);
        //LCD_PutStr(147,216, "Y:0.00MS", FONT_8X12, C_WHITE, C_DARK_BLUE);
        LCD_PutStr(250, 202, VPP_str, FONT_5X12, C_WHITE, C_BLACK);
 80037f6:	f107 0210 	add.w	r2, r7, #16
 80037fa:	2300      	movs	r3, #0
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <drawOscButtons+0x27c>)
 8003806:	21ca      	movs	r1, #202	@ 0xca
 8003808:	20fa      	movs	r0, #250	@ 0xfa
 800380a:	f001 fc9f 	bl	800514c <LCD_PutStr>
        //LCD_PutStr(147,216, "Y:0.00MS", FONT_8X12, C_WHITE, C_BLACK);
        LCD_PutStr(250, 202, VPP_str, FONT_5X12, C_WHITE, C_BLACK);
        //LCD_PutStr(213,216, "FRQ:10 KHZ", FONT_8X12, C_WHITE, C_BLACK);
    }

}
 800380e:	e015      	b.n	800383c <drawOscButtons+0x270>
        UG_DrawFrame(144, 199, 308, 230, C_WHITE);
 8003810:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	23e6      	movs	r3, #230	@ 0xe6
 8003818:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800381c:	21c7      	movs	r1, #199	@ 0xc7
 800381e:	2090      	movs	r0, #144	@ 0x90
 8003820:	f008 fb50 	bl	800bec4 <UG_DrawFrame>
        LCD_PutStr(250, 202, VPP_str, FONT_5X12, C_WHITE, C_BLACK);
 8003824:	f107 0210 	add.w	r2, r7, #16
 8003828:	2300      	movs	r3, #0
 800382a:	9301      	str	r3, [sp, #4]
 800382c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	4b05      	ldr	r3, [pc, #20]	@ (8003848 <drawOscButtons+0x27c>)
 8003834:	21ca      	movs	r1, #202	@ 0xca
 8003836:	20fa      	movs	r0, #250	@ 0xfa
 8003838:	f001 fc88 	bl	800514c <LCD_PutStr>
}
 800383c:	bf00      	nop
 800383e:	3720      	adds	r7, #32
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	080131bc 	.word	0x080131bc
 8003848:	08013860 	.word	0x08013860
 800384c:	080131c8 	.word	0x080131c8
 8003850:	080131cc 	.word	0x080131cc
 8003854:	080131d0 	.word	0x080131d0
 8003858:	080131d4 	.word	0x080131d4

0800385c <drawUsbMode>:

//draws usb mode text
void drawUsbMode(int usb_mode) {
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af02      	add	r7, sp, #8
 8003862:	6078      	str	r0, [r7, #4]
    if (usb_mode) {
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <drawUsbMode+0x26>
        LCD_PutStr(245, 216, " USB Mode ON", FONT_5X12, C_WHITE, C_BLACK);
 800386a:	2300      	movs	r3, #0
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	4b0a      	ldr	r3, [pc, #40]	@ (80038a0 <drawUsbMode+0x44>)
 8003876:	4a0b      	ldr	r2, [pc, #44]	@ (80038a4 <drawUsbMode+0x48>)
 8003878:	21d8      	movs	r1, #216	@ 0xd8
 800387a:	20f5      	movs	r0, #245	@ 0xf5
 800387c:	f001 fc66 	bl	800514c <LCD_PutStr>
    } else {
        LCD_PutStr(245, 216, "USB Mode OFF", FONT_5X12, C_WHITE, C_BLACK);
    }

}
 8003880:	e00a      	b.n	8003898 <drawUsbMode+0x3c>
        LCD_PutStr(245, 216, "USB Mode OFF", FONT_5X12, C_WHITE, C_BLACK);
 8003882:	2300      	movs	r3, #0
 8003884:	9301      	str	r3, [sp, #4]
 8003886:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	4b04      	ldr	r3, [pc, #16]	@ (80038a0 <drawUsbMode+0x44>)
 800388e:	4a06      	ldr	r2, [pc, #24]	@ (80038a8 <drawUsbMode+0x4c>)
 8003890:	21d8      	movs	r1, #216	@ 0xd8
 8003892:	20f5      	movs	r0, #245	@ 0xf5
 8003894:	f001 fc5a 	bl	800514c <LCD_PutStr>
}
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	08013860 	.word	0x08013860
 80038a4:	080131d8 	.word	0x080131d8
 80038a8:	080131e8 	.word	0x080131e8

080038ac <drawMenu1>:

//USB mode button
void drawMenu1() {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af02      	add	r7, sp, #8
    UG_DrawFrame(33, 62, 286, 153, C_WHITE);
 80038b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	2399      	movs	r3, #153	@ 0x99
 80038ba:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 80038be:	213e      	movs	r1, #62	@ 0x3e
 80038c0:	2021      	movs	r0, #33	@ 0x21
 80038c2:	f008 faff 	bl	800bec4 <UG_DrawFrame>
    UG_DrawFrame(34, 63, 285, 152, C_WHITE);
 80038c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	2398      	movs	r3, #152	@ 0x98
 80038ce:	f240 121d 	movw	r2, #285	@ 0x11d
 80038d2:	213f      	movs	r1, #63	@ 0x3f
 80038d4:	2022      	movs	r0, #34	@ 0x22
 80038d6:	f008 faf5 	bl	800bec4 <UG_DrawFrame>
    UG_DrawFrame(35, 64, 284, 151, C_WHITE);
 80038da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2397      	movs	r3, #151	@ 0x97
 80038e2:	f44f 728e 	mov.w	r2, #284	@ 0x11c
 80038e6:	2140      	movs	r1, #64	@ 0x40
 80038e8:	2023      	movs	r0, #35	@ 0x23
 80038ea:	f008 faeb 	bl	800bec4 <UG_DrawFrame>
    UG_DrawFrame(36, 65, 283, 150, C_WHITE);
 80038ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	2396      	movs	r3, #150	@ 0x96
 80038f6:	f240 121b 	movw	r2, #283	@ 0x11b
 80038fa:	2141      	movs	r1, #65	@ 0x41
 80038fc:	2024      	movs	r0, #36	@ 0x24
 80038fe:	f008 fae1 	bl	800bec4 <UG_DrawFrame>

    UG_DrawLine(37, 85, 282, 85, C_WHITE);
 8003902:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	2355      	movs	r3, #85	@ 0x55
 800390a:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 800390e:	2155      	movs	r1, #85	@ 0x55
 8003910:	2025      	movs	r0, #37	@ 0x25
 8003912:	f008 fb39 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(37, 86, 282, 86, C_WHITE);
 8003916:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	2356      	movs	r3, #86	@ 0x56
 800391e:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003922:	2156      	movs	r1, #86	@ 0x56
 8003924:	2025      	movs	r0, #37	@ 0x25
 8003926:	f008 fb2f 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(37, 87, 282, 87, C_WHITE);
 800392a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	2357      	movs	r3, #87	@ 0x57
 8003932:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003936:	2157      	movs	r1, #87	@ 0x57
 8003938:	2025      	movs	r0, #37	@ 0x25
 800393a:	f008 fb25 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(37, 88, 282, 88, C_WHITE);
 800393e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	2358      	movs	r3, #88	@ 0x58
 8003946:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 800394a:	2158      	movs	r1, #88	@ 0x58
 800394c:	2025      	movs	r0, #37	@ 0x25
 800394e:	f008 fb1b 	bl	800bf88 <UG_DrawLine>
    LCD_PutStr(40, 69, "Select the mode of operation", FONT_8X12, C_WHITE, C_BLACK);
 8003952:	2300      	movs	r3, #0
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	4b04      	ldr	r3, [pc, #16]	@ (8003970 <drawMenu1+0xc4>)
 800395e:	4a05      	ldr	r2, [pc, #20]	@ (8003974 <drawMenu1+0xc8>)
 8003960:	2145      	movs	r1, #69	@ 0x45
 8003962:	2028      	movs	r0, #40	@ 0x28
 8003964:	f001 fbf2 	bl	800514c <LCD_PutStr>
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	08014470 	.word	0x08014470
 8003974:	080131f8 	.word	0x080131f8

08003978 <drawMenu2>:

//triggers
void drawMenu2(int selected_option) {
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af02      	add	r7, sp, #8
 800397e:	6078      	str	r0, [r7, #4]
    UG_DrawFrame(33, 62, 286, 153, C_WHITE);
 8003980:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	2399      	movs	r3, #153	@ 0x99
 8003988:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 800398c:	213e      	movs	r1, #62	@ 0x3e
 800398e:	2021      	movs	r0, #33	@ 0x21
 8003990:	f008 fa98 	bl	800bec4 <UG_DrawFrame>
    UG_DrawFrame(34, 63, 285, 152, C_WHITE);
 8003994:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	2398      	movs	r3, #152	@ 0x98
 800399c:	f240 121d 	movw	r2, #285	@ 0x11d
 80039a0:	213f      	movs	r1, #63	@ 0x3f
 80039a2:	2022      	movs	r0, #34	@ 0x22
 80039a4:	f008 fa8e 	bl	800bec4 <UG_DrawFrame>
    UG_DrawFrame(35, 64, 284, 151, C_WHITE);
 80039a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	2397      	movs	r3, #151	@ 0x97
 80039b0:	f44f 728e 	mov.w	r2, #284	@ 0x11c
 80039b4:	2140      	movs	r1, #64	@ 0x40
 80039b6:	2023      	movs	r0, #35	@ 0x23
 80039b8:	f008 fa84 	bl	800bec4 <UG_DrawFrame>
    UG_DrawFrame(36, 65, 283, 150, C_WHITE);
 80039bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	2396      	movs	r3, #150	@ 0x96
 80039c4:	f240 121b 	movw	r2, #283	@ 0x11b
 80039c8:	2141      	movs	r1, #65	@ 0x41
 80039ca:	2024      	movs	r0, #36	@ 0x24
 80039cc:	f008 fa7a 	bl	800bec4 <UG_DrawFrame>

    UG_DrawLine(37, 85, 282, 85, C_WHITE);
 80039d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	2355      	movs	r3, #85	@ 0x55
 80039d8:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 80039dc:	2155      	movs	r1, #85	@ 0x55
 80039de:	2025      	movs	r0, #37	@ 0x25
 80039e0:	f008 fad2 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(37, 86, 282, 86, C_WHITE);
 80039e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	2356      	movs	r3, #86	@ 0x56
 80039ec:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 80039f0:	2156      	movs	r1, #86	@ 0x56
 80039f2:	2025      	movs	r0, #37	@ 0x25
 80039f4:	f008 fac8 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(37, 87, 282, 87, C_WHITE);
 80039f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	2357      	movs	r3, #87	@ 0x57
 8003a00:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003a04:	2157      	movs	r1, #87	@ 0x57
 8003a06:	2025      	movs	r0, #37	@ 0x25
 8003a08:	f008 fabe 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(37, 88, 282, 88, C_WHITE);
 8003a0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2358      	movs	r3, #88	@ 0x58
 8003a14:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003a18:	2158      	movs	r1, #88	@ 0x58
 8003a1a:	2025      	movs	r0, #37	@ 0x25
 8003a1c:	f008 fab4 	bl	800bf88 <UG_DrawLine>
    LCD_PutStr(40, 69, "Trigger options", FONT_8X12, C_WHITE, C_BLACK);
 8003a20:	2300      	movs	r3, #0
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	4b51      	ldr	r3, [pc, #324]	@ (8003b70 <drawMenu2+0x1f8>)
 8003a2c:	4a51      	ldr	r2, [pc, #324]	@ (8003b74 <drawMenu2+0x1fc>)
 8003a2e:	2145      	movs	r1, #69	@ 0x45
 8003a30:	2028      	movs	r0, #40	@ 0x28
 8003a32:	f001 fb8b 	bl	800514c <LCD_PutStr>

    UG_DrawLine(37, 110, 282, 110, C_WHITE);
 8003a36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	236e      	movs	r3, #110	@ 0x6e
 8003a3e:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003a42:	216e      	movs	r1, #110	@ 0x6e
 8003a44:	2025      	movs	r0, #37	@ 0x25
 8003a46:	f008 fa9f 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(37, 110 + 22, 282, 110 + 22, C_WHITE);
 8003a4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	2384      	movs	r3, #132	@ 0x84
 8003a52:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003a56:	2184      	movs	r1, #132	@ 0x84
 8003a58:	2025      	movs	r0, #37	@ 0x25
 8003a5a:	f008 fa95 	bl	800bf88 <UG_DrawLine>

    if (selected_option == 0) {
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d114      	bne.n	8003a8e <drawMenu2+0x116>
        UG_FillFrame(37, 88, 282, 109, C_DARK_BLUE);
 8003a64:	2311      	movs	r3, #17
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	236d      	movs	r3, #109	@ 0x6d
 8003a6a:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003a6e:	2158      	movs	r1, #88	@ 0x58
 8003a70:	2025      	movs	r0, #37	@ 0x25
 8003a72:	f008 f9b5 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 93, "Modify trigger level", FONT_8X12, C_WHITE, C_DARK_BLUE);
 8003a76:	2311      	movs	r3, #17
 8003a78:	9301      	str	r3, [sp, #4]
 8003a7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	4b3b      	ldr	r3, [pc, #236]	@ (8003b70 <drawMenu2+0x1f8>)
 8003a82:	4a3d      	ldr	r2, [pc, #244]	@ (8003b78 <drawMenu2+0x200>)
 8003a84:	215d      	movs	r1, #93	@ 0x5d
 8003a86:	2028      	movs	r0, #40	@ 0x28
 8003a88:	f001 fb60 	bl	800514c <LCD_PutStr>
 8003a8c:	e013      	b.n	8003ab6 <drawMenu2+0x13e>

    } else {
        UG_FillFrame(37, 88, 282, 109, C_BLACK);
 8003a8e:	2300      	movs	r3, #0
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	236d      	movs	r3, #109	@ 0x6d
 8003a94:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003a98:	2158      	movs	r1, #88	@ 0x58
 8003a9a:	2025      	movs	r0, #37	@ 0x25
 8003a9c:	f008 f9a0 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 93, "Modify trigger level", FONT_8X12, C_WHITE, C_BLACK);
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	4b31      	ldr	r3, [pc, #196]	@ (8003b70 <drawMenu2+0x1f8>)
 8003aac:	4a32      	ldr	r2, [pc, #200]	@ (8003b78 <drawMenu2+0x200>)
 8003aae:	215d      	movs	r1, #93	@ 0x5d
 8003ab0:	2028      	movs	r0, #40	@ 0x28
 8003ab2:	f001 fb4b 	bl	800514c <LCD_PutStr>
    }

    if (selected_option == 1) {
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d114      	bne.n	8003ae6 <drawMenu2+0x16e>
        UG_FillFrame(37, 111, 282, 131, C_DARK_BLUE);
 8003abc:	2311      	movs	r3, #17
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2383      	movs	r3, #131	@ 0x83
 8003ac2:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003ac6:	216f      	movs	r1, #111	@ 0x6f
 8003ac8:	2025      	movs	r0, #37	@ 0x25
 8003aca:	f008 f989 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 115, "Toggle rising edge", FONT_8X12, C_WHITE, C_DARK_BLUE);
 8003ace:	2311      	movs	r3, #17
 8003ad0:	9301      	str	r3, [sp, #4]
 8003ad2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	4b25      	ldr	r3, [pc, #148]	@ (8003b70 <drawMenu2+0x1f8>)
 8003ada:	4a28      	ldr	r2, [pc, #160]	@ (8003b7c <drawMenu2+0x204>)
 8003adc:	2173      	movs	r1, #115	@ 0x73
 8003ade:	2028      	movs	r0, #40	@ 0x28
 8003ae0:	f001 fb34 	bl	800514c <LCD_PutStr>
 8003ae4:	e013      	b.n	8003b0e <drawMenu2+0x196>
    } else {
        UG_FillFrame(37, 111, 282, 131, C_BLACK);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	2383      	movs	r3, #131	@ 0x83
 8003aec:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003af0:	216f      	movs	r1, #111	@ 0x6f
 8003af2:	2025      	movs	r0, #37	@ 0x25
 8003af4:	f008 f974 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 115, "Toggle rising edge", FONT_8X12, C_WHITE, C_BLACK);
 8003af8:	2300      	movs	r3, #0
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	4b1b      	ldr	r3, [pc, #108]	@ (8003b70 <drawMenu2+0x1f8>)
 8003b04:	4a1d      	ldr	r2, [pc, #116]	@ (8003b7c <drawMenu2+0x204>)
 8003b06:	2173      	movs	r1, #115	@ 0x73
 8003b08:	2028      	movs	r0, #40	@ 0x28
 8003b0a:	f001 fb1f 	bl	800514c <LCD_PutStr>
    }

    if (selected_option == 2) {
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d114      	bne.n	8003b3e <drawMenu2+0x1c6>
        UG_FillFrame(37, 133, 282, 149, C_DARK_BLUE);
 8003b14:	2311      	movs	r3, #17
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	2395      	movs	r3, #149	@ 0x95
 8003b1a:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003b1e:	2185      	movs	r1, #133	@ 0x85
 8003b20:	2025      	movs	r0, #37	@ 0x25
 8003b22:	f008 f95d 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 135, "Toggle falling edge", FONT_8X12, C_WHITE, C_DARK_BLUE);
 8003b26:	2311      	movs	r3, #17
 8003b28:	9301      	str	r3, [sp, #4]
 8003b2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	4b0f      	ldr	r3, [pc, #60]	@ (8003b70 <drawMenu2+0x1f8>)
 8003b32:	4a13      	ldr	r2, [pc, #76]	@ (8003b80 <drawMenu2+0x208>)
 8003b34:	2187      	movs	r1, #135	@ 0x87
 8003b36:	2028      	movs	r0, #40	@ 0x28
 8003b38:	f001 fb08 	bl	800514c <LCD_PutStr>
    } else {
        UG_FillFrame(37, 133, 282, 149, C_BLACK);
        LCD_PutStr(40, 135, "Toggle falling edge", FONT_8X12, C_WHITE, C_BLACK);
    }
}
 8003b3c:	e013      	b.n	8003b66 <drawMenu2+0x1ee>
        UG_FillFrame(37, 133, 282, 149, C_BLACK);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	2395      	movs	r3, #149	@ 0x95
 8003b44:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003b48:	2185      	movs	r1, #133	@ 0x85
 8003b4a:	2025      	movs	r0, #37	@ 0x25
 8003b4c:	f008 f948 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 135, "Toggle falling edge", FONT_8X12, C_WHITE, C_BLACK);
 8003b50:	2300      	movs	r3, #0
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	4b05      	ldr	r3, [pc, #20]	@ (8003b70 <drawMenu2+0x1f8>)
 8003b5c:	4a08      	ldr	r2, [pc, #32]	@ (8003b80 <drawMenu2+0x208>)
 8003b5e:	2187      	movs	r1, #135	@ 0x87
 8003b60:	2028      	movs	r0, #40	@ 0x28
 8003b62:	f001 faf3 	bl	800514c <LCD_PutStr>
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	08014470 	.word	0x08014470
 8003b74:	08013218 	.word	0x08013218
 8003b78:	08013228 	.word	0x08013228
 8003b7c:	08013240 	.word	0x08013240
 8003b80:	08013254 	.word	0x08013254

08003b84 <drawMenu3>:

//scale and shifts
void drawMenu3(int selected_option) {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af02      	add	r7, sp, #8
 8003b8a:	6078      	str	r0, [r7, #4]
    UG_DrawFrame(33, 62, 286, 153, C_WHITE);
 8003b8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	2399      	movs	r3, #153	@ 0x99
 8003b94:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 8003b98:	213e      	movs	r1, #62	@ 0x3e
 8003b9a:	2021      	movs	r0, #33	@ 0x21
 8003b9c:	f008 f992 	bl	800bec4 <UG_DrawFrame>
    UG_DrawFrame(34, 63, 285, 152, C_WHITE);
 8003ba0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	2398      	movs	r3, #152	@ 0x98
 8003ba8:	f240 121d 	movw	r2, #285	@ 0x11d
 8003bac:	213f      	movs	r1, #63	@ 0x3f
 8003bae:	2022      	movs	r0, #34	@ 0x22
 8003bb0:	f008 f988 	bl	800bec4 <UG_DrawFrame>
    UG_DrawFrame(35, 64, 284, 151, C_WHITE);
 8003bb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	2397      	movs	r3, #151	@ 0x97
 8003bbc:	f44f 728e 	mov.w	r2, #284	@ 0x11c
 8003bc0:	2140      	movs	r1, #64	@ 0x40
 8003bc2:	2023      	movs	r0, #35	@ 0x23
 8003bc4:	f008 f97e 	bl	800bec4 <UG_DrawFrame>
    UG_DrawFrame(36, 65, 283, 150, C_WHITE);
 8003bc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	2396      	movs	r3, #150	@ 0x96
 8003bd0:	f240 121b 	movw	r2, #283	@ 0x11b
 8003bd4:	2141      	movs	r1, #65	@ 0x41
 8003bd6:	2024      	movs	r0, #36	@ 0x24
 8003bd8:	f008 f974 	bl	800bec4 <UG_DrawFrame>

    UG_DrawLine(37, 85, 282, 85, C_WHITE);
 8003bdc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	2355      	movs	r3, #85	@ 0x55
 8003be4:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003be8:	2155      	movs	r1, #85	@ 0x55
 8003bea:	2025      	movs	r0, #37	@ 0x25
 8003bec:	f008 f9cc 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(37, 86, 282, 86, C_WHITE);
 8003bf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	2356      	movs	r3, #86	@ 0x56
 8003bf8:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003bfc:	2156      	movs	r1, #86	@ 0x56
 8003bfe:	2025      	movs	r0, #37	@ 0x25
 8003c00:	f008 f9c2 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(37, 87, 282, 87, C_WHITE);
 8003c04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	2357      	movs	r3, #87	@ 0x57
 8003c0c:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003c10:	2157      	movs	r1, #87	@ 0x57
 8003c12:	2025      	movs	r0, #37	@ 0x25
 8003c14:	f008 f9b8 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(37, 88, 282, 88, C_WHITE);
 8003c18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	2358      	movs	r3, #88	@ 0x58
 8003c20:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003c24:	2158      	movs	r1, #88	@ 0x58
 8003c26:	2025      	movs	r0, #37	@ 0x25
 8003c28:	f008 f9ae 	bl	800bf88 <UG_DrawLine>
    LCD_PutStr(40, 69, "Scale and shift X/Y axis", FONT_8X12, C_WHITE, C_BLACK);
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	9301      	str	r3, [sp, #4]
 8003c30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	4b51      	ldr	r3, [pc, #324]	@ (8003d7c <drawMenu3+0x1f8>)
 8003c38:	4a51      	ldr	r2, [pc, #324]	@ (8003d80 <drawMenu3+0x1fc>)
 8003c3a:	2145      	movs	r1, #69	@ 0x45
 8003c3c:	2028      	movs	r0, #40	@ 0x28
 8003c3e:	f001 fa85 	bl	800514c <LCD_PutStr>

    UG_DrawLine(37, 110, 282, 110, C_WHITE);
 8003c42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	236e      	movs	r3, #110	@ 0x6e
 8003c4a:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003c4e:	216e      	movs	r1, #110	@ 0x6e
 8003c50:	2025      	movs	r0, #37	@ 0x25
 8003c52:	f008 f999 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(37, 110 + 22, 282, 110 + 22, C_WHITE);
 8003c56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	2384      	movs	r3, #132	@ 0x84
 8003c5e:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003c62:	2184      	movs	r1, #132	@ 0x84
 8003c64:	2025      	movs	r0, #37	@ 0x25
 8003c66:	f008 f98f 	bl	800bf88 <UG_DrawLine>

    if (selected_option == 0) {
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d114      	bne.n	8003c9a <drawMenu3+0x116>
        UG_FillFrame(37, 88, 282, 109, C_DARK_BLUE);
 8003c70:	2311      	movs	r3, #17
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	236d      	movs	r3, #109	@ 0x6d
 8003c76:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003c7a:	2158      	movs	r1, #88	@ 0x58
 8003c7c:	2025      	movs	r0, #37	@ 0x25
 8003c7e:	f008 f8af 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 93, "Shift X/Y axis", FONT_8X12, C_WHITE, C_DARK_BLUE);
 8003c82:	2311      	movs	r3, #17
 8003c84:	9301      	str	r3, [sp, #4]
 8003c86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003d7c <drawMenu3+0x1f8>)
 8003c8e:	4a3d      	ldr	r2, [pc, #244]	@ (8003d84 <drawMenu3+0x200>)
 8003c90:	215d      	movs	r1, #93	@ 0x5d
 8003c92:	2028      	movs	r0, #40	@ 0x28
 8003c94:	f001 fa5a 	bl	800514c <LCD_PutStr>
 8003c98:	e013      	b.n	8003cc2 <drawMenu3+0x13e>

    } else {
        UG_FillFrame(37, 88, 282, 109, C_BLACK);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	236d      	movs	r3, #109	@ 0x6d
 8003ca0:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003ca4:	2158      	movs	r1, #88	@ 0x58
 8003ca6:	2025      	movs	r0, #37	@ 0x25
 8003ca8:	f008 f89a 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 93, "Shift X/Y axis", FONT_8X12, C_WHITE, C_BLACK);
 8003cac:	2300      	movs	r3, #0
 8003cae:	9301      	str	r3, [sp, #4]
 8003cb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	4b31      	ldr	r3, [pc, #196]	@ (8003d7c <drawMenu3+0x1f8>)
 8003cb8:	4a32      	ldr	r2, [pc, #200]	@ (8003d84 <drawMenu3+0x200>)
 8003cba:	215d      	movs	r1, #93	@ 0x5d
 8003cbc:	2028      	movs	r0, #40	@ 0x28
 8003cbe:	f001 fa45 	bl	800514c <LCD_PutStr>
    }

    if (selected_option == 1) {
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d114      	bne.n	8003cf2 <drawMenu3+0x16e>
        UG_FillFrame(37, 111, 282, 131, C_DARK_BLUE);
 8003cc8:	2311      	movs	r3, #17
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	2383      	movs	r3, #131	@ 0x83
 8003cce:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003cd2:	216f      	movs	r1, #111	@ 0x6f
 8003cd4:	2025      	movs	r0, #37	@ 0x25
 8003cd6:	f008 f883 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 115, "Scale X axis", FONT_8X12, C_WHITE, C_DARK_BLUE);
 8003cda:	2311      	movs	r3, #17
 8003cdc:	9301      	str	r3, [sp, #4]
 8003cde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	4b25      	ldr	r3, [pc, #148]	@ (8003d7c <drawMenu3+0x1f8>)
 8003ce6:	4a28      	ldr	r2, [pc, #160]	@ (8003d88 <drawMenu3+0x204>)
 8003ce8:	2173      	movs	r1, #115	@ 0x73
 8003cea:	2028      	movs	r0, #40	@ 0x28
 8003cec:	f001 fa2e 	bl	800514c <LCD_PutStr>
 8003cf0:	e013      	b.n	8003d1a <drawMenu3+0x196>
    } else {
        UG_FillFrame(37, 111, 282, 131, C_BLACK);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	2383      	movs	r3, #131	@ 0x83
 8003cf8:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003cfc:	216f      	movs	r1, #111	@ 0x6f
 8003cfe:	2025      	movs	r0, #37	@ 0x25
 8003d00:	f008 f86e 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 115, "Scale X axis", FONT_8X12, C_WHITE, C_BLACK);
 8003d04:	2300      	movs	r3, #0
 8003d06:	9301      	str	r3, [sp, #4]
 8003d08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003d7c <drawMenu3+0x1f8>)
 8003d10:	4a1d      	ldr	r2, [pc, #116]	@ (8003d88 <drawMenu3+0x204>)
 8003d12:	2173      	movs	r1, #115	@ 0x73
 8003d14:	2028      	movs	r0, #40	@ 0x28
 8003d16:	f001 fa19 	bl	800514c <LCD_PutStr>
    }

    if (selected_option == 2) {
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d114      	bne.n	8003d4a <drawMenu3+0x1c6>
        UG_FillFrame(37, 133, 282, 149, C_DARK_BLUE);
 8003d20:	2311      	movs	r3, #17
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	2395      	movs	r3, #149	@ 0x95
 8003d26:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003d2a:	2185      	movs	r1, #133	@ 0x85
 8003d2c:	2025      	movs	r0, #37	@ 0x25
 8003d2e:	f008 f857 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 135, "Scale Y axis", FONT_8X12, C_WHITE, C_DARK_BLUE);
 8003d32:	2311      	movs	r3, #17
 8003d34:	9301      	str	r3, [sp, #4]
 8003d36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d7c <drawMenu3+0x1f8>)
 8003d3e:	4a13      	ldr	r2, [pc, #76]	@ (8003d8c <drawMenu3+0x208>)
 8003d40:	2187      	movs	r1, #135	@ 0x87
 8003d42:	2028      	movs	r0, #40	@ 0x28
 8003d44:	f001 fa02 	bl	800514c <LCD_PutStr>
    } else {
        UG_FillFrame(37, 133, 282, 149, C_BLACK);
        LCD_PutStr(40, 135, "Scale Y axis", FONT_8X12, C_WHITE, C_BLACK);
    }
}
 8003d48:	e013      	b.n	8003d72 <drawMenu3+0x1ee>
        UG_FillFrame(37, 133, 282, 149, C_BLACK);
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	2395      	movs	r3, #149	@ 0x95
 8003d50:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003d54:	2185      	movs	r1, #133	@ 0x85
 8003d56:	2025      	movs	r0, #37	@ 0x25
 8003d58:	f008 f842 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 135, "Scale Y axis", FONT_8X12, C_WHITE, C_BLACK);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	9301      	str	r3, [sp, #4]
 8003d60:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d64:	9300      	str	r3, [sp, #0]
 8003d66:	4b05      	ldr	r3, [pc, #20]	@ (8003d7c <drawMenu3+0x1f8>)
 8003d68:	4a08      	ldr	r2, [pc, #32]	@ (8003d8c <drawMenu3+0x208>)
 8003d6a:	2187      	movs	r1, #135	@ 0x87
 8003d6c:	2028      	movs	r0, #40	@ 0x28
 8003d6e:	f001 f9ed 	bl	800514c <LCD_PutStr>
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	08014470 	.word	0x08014470
 8003d80:	08013268 	.word	0x08013268
 8003d84:	08013284 	.word	0x08013284
 8003d88:	08013294 	.word	0x08013294
 8003d8c:	080132a4 	.word	0x080132a4

08003d90 <drawMenu4>:

//options
void drawMenu4(int selected_option) {
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	6078      	str	r0, [r7, #4]
    UG_DrawFrame(33, 62, 286, 153, C_WHITE);
 8003d98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	2399      	movs	r3, #153	@ 0x99
 8003da0:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 8003da4:	213e      	movs	r1, #62	@ 0x3e
 8003da6:	2021      	movs	r0, #33	@ 0x21
 8003da8:	f008 f88c 	bl	800bec4 <UG_DrawFrame>
    UG_DrawFrame(34, 63, 285, 152, C_WHITE);
 8003dac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	2398      	movs	r3, #152	@ 0x98
 8003db4:	f240 121d 	movw	r2, #285	@ 0x11d
 8003db8:	213f      	movs	r1, #63	@ 0x3f
 8003dba:	2022      	movs	r0, #34	@ 0x22
 8003dbc:	f008 f882 	bl	800bec4 <UG_DrawFrame>
    UG_DrawFrame(35, 64, 284, 151, C_WHITE);
 8003dc0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	2397      	movs	r3, #151	@ 0x97
 8003dc8:	f44f 728e 	mov.w	r2, #284	@ 0x11c
 8003dcc:	2140      	movs	r1, #64	@ 0x40
 8003dce:	2023      	movs	r0, #35	@ 0x23
 8003dd0:	f008 f878 	bl	800bec4 <UG_DrawFrame>
    UG_DrawFrame(36, 65, 283, 150, C_WHITE);
 8003dd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	2396      	movs	r3, #150	@ 0x96
 8003ddc:	f240 121b 	movw	r2, #283	@ 0x11b
 8003de0:	2141      	movs	r1, #65	@ 0x41
 8003de2:	2024      	movs	r0, #36	@ 0x24
 8003de4:	f008 f86e 	bl	800bec4 <UG_DrawFrame>

    UG_DrawLine(37, 85, 282, 85, C_WHITE);
 8003de8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	2355      	movs	r3, #85	@ 0x55
 8003df0:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003df4:	2155      	movs	r1, #85	@ 0x55
 8003df6:	2025      	movs	r0, #37	@ 0x25
 8003df8:	f008 f8c6 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(37, 86, 282, 86, C_WHITE);
 8003dfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e00:	9300      	str	r3, [sp, #0]
 8003e02:	2356      	movs	r3, #86	@ 0x56
 8003e04:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003e08:	2156      	movs	r1, #86	@ 0x56
 8003e0a:	2025      	movs	r0, #37	@ 0x25
 8003e0c:	f008 f8bc 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(37, 87, 282, 87, C_WHITE);
 8003e10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	2357      	movs	r3, #87	@ 0x57
 8003e18:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003e1c:	2157      	movs	r1, #87	@ 0x57
 8003e1e:	2025      	movs	r0, #37	@ 0x25
 8003e20:	f008 f8b2 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(37, 88, 282, 88, C_WHITE);
 8003e24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	2358      	movs	r3, #88	@ 0x58
 8003e2c:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003e30:	2158      	movs	r1, #88	@ 0x58
 8003e32:	2025      	movs	r0, #37	@ 0x25
 8003e34:	f008 f8a8 	bl	800bf88 <UG_DrawLine>
    LCD_PutStr(40, 69, "Options", FONT_8X12, C_WHITE, C_BLACK);
 8003e38:	2300      	movs	r3, #0
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	4b51      	ldr	r3, [pc, #324]	@ (8003f88 <drawMenu4+0x1f8>)
 8003e44:	4a51      	ldr	r2, [pc, #324]	@ (8003f8c <drawMenu4+0x1fc>)
 8003e46:	2145      	movs	r1, #69	@ 0x45
 8003e48:	2028      	movs	r0, #40	@ 0x28
 8003e4a:	f001 f97f 	bl	800514c <LCD_PutStr>

    UG_DrawLine(37, 110, 282, 110, C_WHITE);
 8003e4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	236e      	movs	r3, #110	@ 0x6e
 8003e56:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003e5a:	216e      	movs	r1, #110	@ 0x6e
 8003e5c:	2025      	movs	r0, #37	@ 0x25
 8003e5e:	f008 f893 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(37, 110 + 22, 282, 110 + 22, C_WHITE);
 8003e62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	2384      	movs	r3, #132	@ 0x84
 8003e6a:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003e6e:	2184      	movs	r1, #132	@ 0x84
 8003e70:	2025      	movs	r0, #37	@ 0x25
 8003e72:	f008 f889 	bl	800bf88 <UG_DrawLine>

    if (selected_option == 0) {
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d114      	bne.n	8003ea6 <drawMenu4+0x116>
        UG_FillFrame(37, 88, 282, 109, C_DARK_BLUE);
 8003e7c:	2311      	movs	r3, #17
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	236d      	movs	r3, #109	@ 0x6d
 8003e82:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003e86:	2158      	movs	r1, #88	@ 0x58
 8003e88:	2025      	movs	r0, #37	@ 0x25
 8003e8a:	f007 ffa9 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 93, "Toggle grid lines", FONT_8X12, C_WHITE, C_DARK_BLUE);
 8003e8e:	2311      	movs	r3, #17
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	4b3b      	ldr	r3, [pc, #236]	@ (8003f88 <drawMenu4+0x1f8>)
 8003e9a:	4a3d      	ldr	r2, [pc, #244]	@ (8003f90 <drawMenu4+0x200>)
 8003e9c:	215d      	movs	r1, #93	@ 0x5d
 8003e9e:	2028      	movs	r0, #40	@ 0x28
 8003ea0:	f001 f954 	bl	800514c <LCD_PutStr>
 8003ea4:	e013      	b.n	8003ece <drawMenu4+0x13e>

    } else {
        UG_FillFrame(37, 88, 282, 109, C_BLACK);
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	236d      	movs	r3, #109	@ 0x6d
 8003eac:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003eb0:	2158      	movs	r1, #88	@ 0x58
 8003eb2:	2025      	movs	r0, #37	@ 0x25
 8003eb4:	f007 ff94 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 93, "Toggle grid lines", FONT_8X12, C_WHITE, C_BLACK);
 8003eb8:	2300      	movs	r3, #0
 8003eba:	9301      	str	r3, [sp, #4]
 8003ebc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	4b31      	ldr	r3, [pc, #196]	@ (8003f88 <drawMenu4+0x1f8>)
 8003ec4:	4a32      	ldr	r2, [pc, #200]	@ (8003f90 <drawMenu4+0x200>)
 8003ec6:	215d      	movs	r1, #93	@ 0x5d
 8003ec8:	2028      	movs	r0, #40	@ 0x28
 8003eca:	f001 f93f 	bl	800514c <LCD_PutStr>
    }

    if (selected_option == 1) {
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d114      	bne.n	8003efe <drawMenu4+0x16e>
        UG_FillFrame(37, 111, 282, 131, C_DARK_BLUE);
 8003ed4:	2311      	movs	r3, #17
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	2383      	movs	r3, #131	@ 0x83
 8003eda:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003ede:	216f      	movs	r1, #111	@ 0x6f
 8003ee0:	2025      	movs	r0, #37	@ 0x25
 8003ee2:	f007 ff7d 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 115, "Toggle rolling mode", FONT_8X12, C_WHITE, C_DARK_BLUE);
 8003ee6:	2311      	movs	r3, #17
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	4b25      	ldr	r3, [pc, #148]	@ (8003f88 <drawMenu4+0x1f8>)
 8003ef2:	4a28      	ldr	r2, [pc, #160]	@ (8003f94 <drawMenu4+0x204>)
 8003ef4:	2173      	movs	r1, #115	@ 0x73
 8003ef6:	2028      	movs	r0, #40	@ 0x28
 8003ef8:	f001 f928 	bl	800514c <LCD_PutStr>
 8003efc:	e013      	b.n	8003f26 <drawMenu4+0x196>
    } else {
        UG_FillFrame(37, 111, 282, 131, C_BLACK);
 8003efe:	2300      	movs	r3, #0
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	2383      	movs	r3, #131	@ 0x83
 8003f04:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003f08:	216f      	movs	r1, #111	@ 0x6f
 8003f0a:	2025      	movs	r0, #37	@ 0x25
 8003f0c:	f007 ff68 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 115, "Toggle rolling mode", FONT_8X12, C_WHITE, C_BLACK);
 8003f10:	2300      	movs	r3, #0
 8003f12:	9301      	str	r3, [sp, #4]
 8003f14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003f88 <drawMenu4+0x1f8>)
 8003f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003f94 <drawMenu4+0x204>)
 8003f1e:	2173      	movs	r1, #115	@ 0x73
 8003f20:	2028      	movs	r0, #40	@ 0x28
 8003f22:	f001 f913 	bl	800514c <LCD_PutStr>
    }

    if (selected_option == 2) {
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d114      	bne.n	8003f56 <drawMenu4+0x1c6>
        UG_FillFrame(37, 133, 282, 149, C_DARK_BLUE);
 8003f2c:	2311      	movs	r3, #17
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	2395      	movs	r3, #149	@ 0x95
 8003f32:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003f36:	2185      	movs	r1, #133	@ 0x85
 8003f38:	2025      	movs	r0, #37	@ 0x25
 8003f3a:	f007 ff51 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 135, "Change waveform color", FONT_8X12, C_WHITE, C_DARK_BLUE);
 8003f3e:	2311      	movs	r3, #17
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	4b0f      	ldr	r3, [pc, #60]	@ (8003f88 <drawMenu4+0x1f8>)
 8003f4a:	4a13      	ldr	r2, [pc, #76]	@ (8003f98 <drawMenu4+0x208>)
 8003f4c:	2187      	movs	r1, #135	@ 0x87
 8003f4e:	2028      	movs	r0, #40	@ 0x28
 8003f50:	f001 f8fc 	bl	800514c <LCD_PutStr>
    } else {
        UG_FillFrame(37, 133, 282, 149, C_BLACK);
        LCD_PutStr(40, 135, "Change waveform color", FONT_8X12, C_WHITE, C_BLACK);
    }
}
 8003f54:	e013      	b.n	8003f7e <drawMenu4+0x1ee>
        UG_FillFrame(37, 133, 282, 149, C_BLACK);
 8003f56:	2300      	movs	r3, #0
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	2395      	movs	r3, #149	@ 0x95
 8003f5c:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8003f60:	2185      	movs	r1, #133	@ 0x85
 8003f62:	2025      	movs	r0, #37	@ 0x25
 8003f64:	f007 ff3c 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 135, "Change waveform color", FONT_8X12, C_WHITE, C_BLACK);
 8003f68:	2300      	movs	r3, #0
 8003f6a:	9301      	str	r3, [sp, #4]
 8003f6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	4b05      	ldr	r3, [pc, #20]	@ (8003f88 <drawMenu4+0x1f8>)
 8003f74:	4a08      	ldr	r2, [pc, #32]	@ (8003f98 <drawMenu4+0x208>)
 8003f76:	2187      	movs	r1, #135	@ 0x87
 8003f78:	2028      	movs	r0, #40	@ 0x28
 8003f7a:	f001 f8e7 	bl	800514c <LCD_PutStr>
}
 8003f7e:	bf00      	nop
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	08014470 	.word	0x08014470
 8003f8c:	080132b4 	.word	0x080132b4
 8003f90:	080132bc 	.word	0x080132bc
 8003f94:	080132d0 	.word	0x080132d0
 8003f98:	080132e4 	.word	0x080132e4

08003f9c <drawMenu5>:

//measurements
void drawMenu5(int selected_option) {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	6078      	str	r0, [r7, #4]
    UG_DrawFrame(33, 62, 286, 153, C_WHITE);
 8003fa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	2399      	movs	r3, #153	@ 0x99
 8003fac:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 8003fb0:	213e      	movs	r1, #62	@ 0x3e
 8003fb2:	2021      	movs	r0, #33	@ 0x21
 8003fb4:	f007 ff86 	bl	800bec4 <UG_DrawFrame>
    UG_DrawFrame(34, 63, 285, 152, C_WHITE);
 8003fb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003fbc:	9300      	str	r3, [sp, #0]
 8003fbe:	2398      	movs	r3, #152	@ 0x98
 8003fc0:	f240 121d 	movw	r2, #285	@ 0x11d
 8003fc4:	213f      	movs	r1, #63	@ 0x3f
 8003fc6:	2022      	movs	r0, #34	@ 0x22
 8003fc8:	f007 ff7c 	bl	800bec4 <UG_DrawFrame>
    UG_DrawFrame(35, 64, 284, 151, C_WHITE);
 8003fcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	2397      	movs	r3, #151	@ 0x97
 8003fd4:	f44f 728e 	mov.w	r2, #284	@ 0x11c
 8003fd8:	2140      	movs	r1, #64	@ 0x40
 8003fda:	2023      	movs	r0, #35	@ 0x23
 8003fdc:	f007 ff72 	bl	800bec4 <UG_DrawFrame>
    UG_DrawFrame(36, 65, 283, 150, C_WHITE);
 8003fe0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	2396      	movs	r3, #150	@ 0x96
 8003fe8:	f240 121b 	movw	r2, #283	@ 0x11b
 8003fec:	2141      	movs	r1, #65	@ 0x41
 8003fee:	2024      	movs	r0, #36	@ 0x24
 8003ff0:	f007 ff68 	bl	800bec4 <UG_DrawFrame>

    UG_DrawLine(37, 85, 282, 85, C_WHITE);
 8003ff4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	2355      	movs	r3, #85	@ 0x55
 8003ffc:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8004000:	2155      	movs	r1, #85	@ 0x55
 8004002:	2025      	movs	r0, #37	@ 0x25
 8004004:	f007 ffc0 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(37, 86, 282, 86, C_WHITE);
 8004008:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	2356      	movs	r3, #86	@ 0x56
 8004010:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8004014:	2156      	movs	r1, #86	@ 0x56
 8004016:	2025      	movs	r0, #37	@ 0x25
 8004018:	f007 ffb6 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(37, 87, 282, 87, C_WHITE);
 800401c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	2357      	movs	r3, #87	@ 0x57
 8004024:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8004028:	2157      	movs	r1, #87	@ 0x57
 800402a:	2025      	movs	r0, #37	@ 0x25
 800402c:	f007 ffac 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(37, 88, 282, 88, C_WHITE);
 8004030:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	2358      	movs	r3, #88	@ 0x58
 8004038:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 800403c:	2158      	movs	r1, #88	@ 0x58
 800403e:	2025      	movs	r0, #37	@ 0x25
 8004040:	f007 ffa2 	bl	800bf88 <UG_DrawLine>
    LCD_PutStr(40, 69, "Toggle X/Y cursors", FONT_8X12, C_WHITE, C_BLACK);
 8004044:	2300      	movs	r3, #0
 8004046:	9301      	str	r3, [sp, #4]
 8004048:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	4b51      	ldr	r3, [pc, #324]	@ (8004194 <drawMenu5+0x1f8>)
 8004050:	4a51      	ldr	r2, [pc, #324]	@ (8004198 <drawMenu5+0x1fc>)
 8004052:	2145      	movs	r1, #69	@ 0x45
 8004054:	2028      	movs	r0, #40	@ 0x28
 8004056:	f001 f879 	bl	800514c <LCD_PutStr>

    UG_DrawLine(37, 110, 282, 110, C_WHITE);
 800405a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	236e      	movs	r3, #110	@ 0x6e
 8004062:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8004066:	216e      	movs	r1, #110	@ 0x6e
 8004068:	2025      	movs	r0, #37	@ 0x25
 800406a:	f007 ff8d 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(37, 110 + 22, 282, 110 + 22, C_WHITE);
 800406e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	2384      	movs	r3, #132	@ 0x84
 8004076:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 800407a:	2184      	movs	r1, #132	@ 0x84
 800407c:	2025      	movs	r0, #37	@ 0x25
 800407e:	f007 ff83 	bl	800bf88 <UG_DrawLine>

    if (selected_option == 0) {
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d114      	bne.n	80040b2 <drawMenu5+0x116>
        UG_FillFrame(37, 88, 282, 109, C_DARK_BLUE);
 8004088:	2311      	movs	r3, #17
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	236d      	movs	r3, #109	@ 0x6d
 800408e:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8004092:	2158      	movs	r1, #88	@ 0x58
 8004094:	2025      	movs	r0, #37	@ 0x25
 8004096:	f007 fea3 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 93, "Show X and Y cursors", FONT_8X12, C_WHITE, C_DARK_BLUE);
 800409a:	2311      	movs	r3, #17
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004194 <drawMenu5+0x1f8>)
 80040a6:	4a3d      	ldr	r2, [pc, #244]	@ (800419c <drawMenu5+0x200>)
 80040a8:	215d      	movs	r1, #93	@ 0x5d
 80040aa:	2028      	movs	r0, #40	@ 0x28
 80040ac:	f001 f84e 	bl	800514c <LCD_PutStr>
 80040b0:	e013      	b.n	80040da <drawMenu5+0x13e>

    } else {
        UG_FillFrame(37, 88, 282, 109, C_BLACK);
 80040b2:	2300      	movs	r3, #0
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	236d      	movs	r3, #109	@ 0x6d
 80040b8:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 80040bc:	2158      	movs	r1, #88	@ 0x58
 80040be:	2025      	movs	r0, #37	@ 0x25
 80040c0:	f007 fe8e 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 93, "Show X and Y cursors", FONT_8X12, C_WHITE, C_BLACK);
 80040c4:	2300      	movs	r3, #0
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	4b31      	ldr	r3, [pc, #196]	@ (8004194 <drawMenu5+0x1f8>)
 80040d0:	4a32      	ldr	r2, [pc, #200]	@ (800419c <drawMenu5+0x200>)
 80040d2:	215d      	movs	r1, #93	@ 0x5d
 80040d4:	2028      	movs	r0, #40	@ 0x28
 80040d6:	f001 f839 	bl	800514c <LCD_PutStr>
    }

    if (selected_option == 1) {
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d114      	bne.n	800410a <drawMenu5+0x16e>
        UG_FillFrame(37, 111, 282, 131, C_DARK_BLUE);
 80040e0:	2311      	movs	r3, #17
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	2383      	movs	r3, #131	@ 0x83
 80040e6:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 80040ea:	216f      	movs	r1, #111	@ 0x6f
 80040ec:	2025      	movs	r0, #37	@ 0x25
 80040ee:	f007 fe77 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 115, "Move X cursor", FONT_8X12, C_WHITE, C_DARK_BLUE);
 80040f2:	2311      	movs	r3, #17
 80040f4:	9301      	str	r3, [sp, #4]
 80040f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	4b25      	ldr	r3, [pc, #148]	@ (8004194 <drawMenu5+0x1f8>)
 80040fe:	4a28      	ldr	r2, [pc, #160]	@ (80041a0 <drawMenu5+0x204>)
 8004100:	2173      	movs	r1, #115	@ 0x73
 8004102:	2028      	movs	r0, #40	@ 0x28
 8004104:	f001 f822 	bl	800514c <LCD_PutStr>
 8004108:	e013      	b.n	8004132 <drawMenu5+0x196>
    } else {
        UG_FillFrame(37, 111, 282, 131, C_BLACK);
 800410a:	2300      	movs	r3, #0
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	2383      	movs	r3, #131	@ 0x83
 8004110:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8004114:	216f      	movs	r1, #111	@ 0x6f
 8004116:	2025      	movs	r0, #37	@ 0x25
 8004118:	f007 fe62 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 115, "Move X cursor", FONT_8X12, C_WHITE, C_BLACK);
 800411c:	2300      	movs	r3, #0
 800411e:	9301      	str	r3, [sp, #4]
 8004120:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	4b1b      	ldr	r3, [pc, #108]	@ (8004194 <drawMenu5+0x1f8>)
 8004128:	4a1d      	ldr	r2, [pc, #116]	@ (80041a0 <drawMenu5+0x204>)
 800412a:	2173      	movs	r1, #115	@ 0x73
 800412c:	2028      	movs	r0, #40	@ 0x28
 800412e:	f001 f80d 	bl	800514c <LCD_PutStr>
    }

    if (selected_option == 2) {
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d114      	bne.n	8004162 <drawMenu5+0x1c6>
        UG_FillFrame(37, 133, 282, 149, C_DARK_BLUE);
 8004138:	2311      	movs	r3, #17
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	2395      	movs	r3, #149	@ 0x95
 800413e:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8004142:	2185      	movs	r1, #133	@ 0x85
 8004144:	2025      	movs	r0, #37	@ 0x25
 8004146:	f007 fe4b 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 135, "Move Y cursor", FONT_8X12, C_WHITE, C_DARK_BLUE);
 800414a:	2311      	movs	r3, #17
 800414c:	9301      	str	r3, [sp, #4]
 800414e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	4b0f      	ldr	r3, [pc, #60]	@ (8004194 <drawMenu5+0x1f8>)
 8004156:	4a13      	ldr	r2, [pc, #76]	@ (80041a4 <drawMenu5+0x208>)
 8004158:	2187      	movs	r1, #135	@ 0x87
 800415a:	2028      	movs	r0, #40	@ 0x28
 800415c:	f000 fff6 	bl	800514c <LCD_PutStr>
    } else {
        UG_FillFrame(37, 133, 282, 149, C_BLACK);
        LCD_PutStr(40, 135, "Move Y cursor", FONT_8X12, C_WHITE, C_BLACK);
    }

}
 8004160:	e013      	b.n	800418a <drawMenu5+0x1ee>
        UG_FillFrame(37, 133, 282, 149, C_BLACK);
 8004162:	2300      	movs	r3, #0
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	2395      	movs	r3, #149	@ 0x95
 8004168:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 800416c:	2185      	movs	r1, #133	@ 0x85
 800416e:	2025      	movs	r0, #37	@ 0x25
 8004170:	f007 fe36 	bl	800bde0 <UG_FillFrame>
        LCD_PutStr(40, 135, "Move Y cursor", FONT_8X12, C_WHITE, C_BLACK);
 8004174:	2300      	movs	r3, #0
 8004176:	9301      	str	r3, [sp, #4]
 8004178:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	4b05      	ldr	r3, [pc, #20]	@ (8004194 <drawMenu5+0x1f8>)
 8004180:	4a08      	ldr	r2, [pc, #32]	@ (80041a4 <drawMenu5+0x208>)
 8004182:	2187      	movs	r1, #135	@ 0x87
 8004184:	2028      	movs	r0, #40	@ 0x28
 8004186:	f000 ffe1 	bl	800514c <LCD_PutStr>
}
 800418a:	bf00      	nop
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	08014470 	.word	0x08014470
 8004198:	080132fc 	.word	0x080132fc
 800419c:	08013310 	.word	0x08013310
 80041a0:	08013328 	.word	0x08013328
 80041a4:	08013338 	.word	0x08013338

080041a8 <drawMenu6>:

uint16_t drawMenu6(int selected_option) {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	6078      	str	r0, [r7, #4]
    if (selected_option == 0) {
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d117      	bne.n	80041e6 <drawMenu6+0x3e>
        LCD_PutStr(40, 135, "Change waveform color", FONT_8X12, C_BLACK, C_WHITE);
 80041b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	2300      	movs	r3, #0
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	4b41      	ldr	r3, [pc, #260]	@ (80042c8 <drawMenu6+0x120>)
 80041c2:	4a42      	ldr	r2, [pc, #264]	@ (80042cc <drawMenu6+0x124>)
 80041c4:	2187      	movs	r1, #135	@ 0x87
 80041c6:	2028      	movs	r0, #40	@ 0x28
 80041c8:	f000 ffc0 	bl	800514c <LCD_PutStr>
        UG_FillFrame(37, 133, 282, 149, C_WHITE);
 80041cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	2395      	movs	r3, #149	@ 0x95
 80041d4:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 80041d8:	2185      	movs	r1, #133	@ 0x85
 80041da:	2025      	movs	r0, #37	@ 0x25
 80041dc:	f007 fe00 	bl	800bde0 <UG_FillFrame>
        return 0xFFFF;
 80041e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80041e4:	e06c      	b.n	80042c0 <drawMenu6+0x118>
    } else if (selected_option == 1) {
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d118      	bne.n	800421e <drawMenu6+0x76>
        LCD_PutStr(40, 135, "Change waveform color", FONT_8X12, C_WHITE, C_RED);
 80041ec:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	4b33      	ldr	r3, [pc, #204]	@ (80042c8 <drawMenu6+0x120>)
 80041fa:	4a34      	ldr	r2, [pc, #208]	@ (80042cc <drawMenu6+0x124>)
 80041fc:	2187      	movs	r1, #135	@ 0x87
 80041fe:	2028      	movs	r0, #40	@ 0x28
 8004200:	f000 ffa4 	bl	800514c <LCD_PutStr>
        UG_FillFrame(37, 133, 282, 149, C_RED);
 8004204:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	2395      	movs	r3, #149	@ 0x95
 800420c:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8004210:	2185      	movs	r1, #133	@ 0x85
 8004212:	2025      	movs	r0, #37	@ 0x25
 8004214:	f007 fde4 	bl	800bde0 <UG_FillFrame>
        return 0xF800;
 8004218:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800421c:	e050      	b.n	80042c0 <drawMenu6+0x118>

    } else if (selected_option == 2) {
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b02      	cmp	r3, #2
 8004222:	d115      	bne.n	8004250 <drawMenu6+0xa8>
        LCD_PutStr(40, 135, "Change waveform color", FONT_8X12, C_WHITE, C_BLUE);
 8004224:	231f      	movs	r3, #31
 8004226:	9301      	str	r3, [sp, #4]
 8004228:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	4b26      	ldr	r3, [pc, #152]	@ (80042c8 <drawMenu6+0x120>)
 8004230:	4a26      	ldr	r2, [pc, #152]	@ (80042cc <drawMenu6+0x124>)
 8004232:	2187      	movs	r1, #135	@ 0x87
 8004234:	2028      	movs	r0, #40	@ 0x28
 8004236:	f000 ff89 	bl	800514c <LCD_PutStr>
        UG_FillFrame(37, 133, 282, 149, C_BLUE);
 800423a:	231f      	movs	r3, #31
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	2395      	movs	r3, #149	@ 0x95
 8004240:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8004244:	2185      	movs	r1, #133	@ 0x85
 8004246:	2025      	movs	r0, #37	@ 0x25
 8004248:	f007 fdca 	bl	800bde0 <UG_FillFrame>
        return 0x001F;
 800424c:	231f      	movs	r3, #31
 800424e:	e037      	b.n	80042c0 <drawMenu6+0x118>

    } else if (selected_option == 3) {
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b03      	cmp	r3, #3
 8004254:	d117      	bne.n	8004286 <drawMenu6+0xde>
        LCD_PutStr(40, 135, "Change waveform color", FONT_8X12, C_BLACK, C_YELLOW);
 8004256:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800425a:	9301      	str	r3, [sp, #4]
 800425c:	2300      	movs	r3, #0
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	4b19      	ldr	r3, [pc, #100]	@ (80042c8 <drawMenu6+0x120>)
 8004262:	4a1a      	ldr	r2, [pc, #104]	@ (80042cc <drawMenu6+0x124>)
 8004264:	2187      	movs	r1, #135	@ 0x87
 8004266:	2028      	movs	r0, #40	@ 0x28
 8004268:	f000 ff70 	bl	800514c <LCD_PutStr>
        UG_FillFrame(37, 133, 282, 149, C_YELLOW);
 800426c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	2395      	movs	r3, #149	@ 0x95
 8004274:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8004278:	2185      	movs	r1, #133	@ 0x85
 800427a:	2025      	movs	r0, #37	@ 0x25
 800427c:	f007 fdb0 	bl	800bde0 <UG_FillFrame>
        return 0xFFE0;
 8004280:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004284:	e01c      	b.n	80042c0 <drawMenu6+0x118>

    } else if (selected_option == 4) {
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b04      	cmp	r3, #4
 800428a:	d117      	bne.n	80042bc <drawMenu6+0x114>
        LCD_PutStr(40, 135, "Change waveform color", FONT_8X12, C_BLACK, C_GREEN);
 800428c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	2300      	movs	r3, #0
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	4b0c      	ldr	r3, [pc, #48]	@ (80042c8 <drawMenu6+0x120>)
 8004298:	4a0c      	ldr	r2, [pc, #48]	@ (80042cc <drawMenu6+0x124>)
 800429a:	2187      	movs	r1, #135	@ 0x87
 800429c:	2028      	movs	r0, #40	@ 0x28
 800429e:	f000 ff55 	bl	800514c <LCD_PutStr>
        UG_FillFrame(37, 133, 282, 149, C_GREEN);
 80042a2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	2395      	movs	r3, #149	@ 0x95
 80042aa:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 80042ae:	2185      	movs	r1, #133	@ 0x85
 80042b0:	2025      	movs	r0, #37	@ 0x25
 80042b2:	f007 fd95 	bl	800bde0 <UG_FillFrame>
        return 0x07E0;
 80042b6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80042ba:	e001      	b.n	80042c0 <drawMenu6+0x118>

    } else {
        return 0xFFFF;
 80042bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
    }

}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	08014470 	.word	0x08014470
 80042cc:	080132e4 	.word	0x080132e4

080042d0 <clearMenuFrame>:

void clearMenuFrame() {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af02      	add	r7, sp, #8
    UG_FillFrame(33, 62, 286, 158, C_BLACK);
 80042d6:	2300      	movs	r3, #0
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	239e      	movs	r3, #158	@ 0x9e
 80042dc:	f44f 728f 	mov.w	r2, #286	@ 0x11e
 80042e0:	213e      	movs	r1, #62	@ 0x3e
 80042e2:	2021      	movs	r0, #33	@ 0x21
 80042e4:	f007 fd7c 	bl	800bde0 <UG_FillFrame>
}
 80042e8:	bf00      	nop
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <clearFullFrame>:

void clearFullFrame() {
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b082      	sub	sp, #8
 80042f2:	af02      	add	r7, sp, #8
    UG_FillFrame(3, 31, 316, 189, C_BLACK);
 80042f4:	2300      	movs	r3, #0
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	23bd      	movs	r3, #189	@ 0xbd
 80042fa:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80042fe:	211f      	movs	r1, #31
 8004300:	2003      	movs	r0, #3
 8004302:	f007 fd6d 	bl	800bde0 <UG_FillFrame>
}
 8004306:	bf00      	nop
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <drawTriggerLevel>:

void drawTriggerLevel(int current_trigger, int old_trigger_level) {
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af02      	add	r7, sp, #8
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
    UG_DrawLine(3, old_trigger_level, 316, old_trigger_level, C_BLACK);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	b219      	sxth	r1, r3
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	b21b      	sxth	r3, r3
 800431e:	2200      	movs	r2, #0
 8004320:	9200      	str	r2, [sp, #0]
 8004322:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8004326:	2003      	movs	r0, #3
 8004328:	f007 fe2e 	bl	800bf88 <UG_DrawLine>
    UG_DrawLine(3, current_trigger, 316, current_trigger, C_PALE_VIOLET_RED);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	b219      	sxth	r1, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	b21b      	sxth	r3, r3
 8004334:	f64d 3292 	movw	r2, #56210	@ 0xdb92
 8004338:	9200      	str	r2, [sp, #0]
 800433a:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800433e:	2003      	movs	r0, #3
 8004340:	f007 fe22 	bl	800bf88 <UG_DrawLine>

}
 8004344:	bf00      	nop
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <drawTriggerIcon>:

void drawTriggerIcon(int trigger_mode) {
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
    if (trigger_mode == 1) {
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d105      	bne.n	8004366 <drawTriggerIcon+0x1a>
        UG_DrawBMP(106, 10, & rising);
 800435a:	4a0c      	ldr	r2, [pc, #48]	@ (800438c <drawTriggerIcon+0x40>)
 800435c:	210a      	movs	r1, #10
 800435e:	206a      	movs	r0, #106	@ 0x6a
 8004360:	f009 f914 	bl	800d58c <UG_DrawBMP>
    } else if (trigger_mode == 2) {
        UG_DrawBMP(106, 10, & falling);
    } else {
        UG_DrawBMP(106, 10, & none);
    }
}
 8004364:	e00d      	b.n	8004382 <drawTriggerIcon+0x36>
    } else if (trigger_mode == 2) {
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b02      	cmp	r3, #2
 800436a:	d105      	bne.n	8004378 <drawTriggerIcon+0x2c>
        UG_DrawBMP(106, 10, & falling);
 800436c:	4a08      	ldr	r2, [pc, #32]	@ (8004390 <drawTriggerIcon+0x44>)
 800436e:	210a      	movs	r1, #10
 8004370:	206a      	movs	r0, #106	@ 0x6a
 8004372:	f009 f90b 	bl	800d58c <UG_DrawBMP>
}
 8004376:	e004      	b.n	8004382 <drawTriggerIcon+0x36>
        UG_DrawBMP(106, 10, & none);
 8004378:	4a06      	ldr	r2, [pc, #24]	@ (8004394 <drawTriggerIcon+0x48>)
 800437a:	210a      	movs	r1, #10
 800437c:	206a      	movs	r0, #106	@ 0x6a
 800437e:	f009 f905 	bl	800d58c <UG_DrawBMP>
}
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	2000002c 	.word	0x2000002c
 8004390:	20000038 	.word	0x20000038
 8004394:	20000044 	.word	0x20000044

08004398 <drawCursors>:

void drawCursors(int show_cursors, int cursor_x, int cursor_y, int prev_cursor_x, int prev_cursor_y, int PSC, int ARR, uint16_t * map_vals, uint16_t * values, int afe_toggle) {
 8004398:	b5b0      	push	{r4, r5, r7, lr}
 800439a:	b09a      	sub	sp, #104	@ 0x68
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
    if (show_cursors) {
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d02b      	beq.n	8004404 <drawCursors+0x6c>
        UG_DrawLine(prev_cursor_x, 31, prev_cursor_x, 189, C_BLACK);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	b218      	sxth	r0, r3
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	b21a      	sxth	r2, r3
 80043b4:	2300      	movs	r3, #0
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	23bd      	movs	r3, #189	@ 0xbd
 80043ba:	211f      	movs	r1, #31
 80043bc:	f007 fde4 	bl	800bf88 <UG_DrawLine>
        UG_DrawLine(3, prev_cursor_y, 316, prev_cursor_y, C_BLACK);
 80043c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043c2:	b219      	sxth	r1, r3
 80043c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043c6:	b21b      	sxth	r3, r3
 80043c8:	2200      	movs	r2, #0
 80043ca:	9200      	str	r2, [sp, #0]
 80043cc:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80043d0:	2003      	movs	r0, #3
 80043d2:	f007 fdd9 	bl	800bf88 <UG_DrawLine>
        UG_DrawLine(cursor_x, 31, cursor_x, 189, C_WHITE);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	b218      	sxth	r0, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	b21a      	sxth	r2, r3
 80043de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	23bd      	movs	r3, #189	@ 0xbd
 80043e6:	211f      	movs	r1, #31
 80043e8:	f007 fdce 	bl	800bf88 <UG_DrawLine>
        UG_DrawLine(3, cursor_y, 316, cursor_y, C_WHITE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	b219      	sxth	r1, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	b21b      	sxth	r3, r3
 80043f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80043f8:	9200      	str	r2, [sp, #0]
 80043fa:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80043fe:	2003      	movs	r0, #3
 8004400:	f007 fdc2 	bl	800bf88 <UG_DrawLine>

    }

    double one_tick = ((double)(PSC + 1) * (double)(ARR + 1)) / 60000000.0; //calculates one tick of main clock in seconds
 8004404:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004406:	3301      	adds	r3, #1
 8004408:	4618      	mov	r0, r3
 800440a:	f7fc f893 	bl	8000534 <__aeabi_i2d>
 800440e:	4604      	mov	r4, r0
 8004410:	460d      	mov	r5, r1
 8004412:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004414:	3301      	adds	r3, #1
 8004416:	4618      	mov	r0, r3
 8004418:	f7fc f88c 	bl	8000534 <__aeabi_i2d>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4620      	mov	r0, r4
 8004422:	4629      	mov	r1, r5
 8004424:	f7fc f8f0 	bl	8000608 <__aeabi_dmul>
 8004428:	4602      	mov	r2, r0
 800442a:	460b      	mov	r3, r1
 800442c:	4610      	mov	r0, r2
 800442e:	4619      	mov	r1, r3
 8004430:	a3d2      	add	r3, pc, #840	@ (adr r3, 800477c <drawCursors+0x3e4>)
 8004432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004436:	f7fc fa11 	bl	800085c <__aeabi_ddiv>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    float x_val = one_tick * (cursor_x - 3);
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	3b03      	subs	r3, #3
 8004446:	4618      	mov	r0, r3
 8004448:	f7fc f874 	bl	8000534 <__aeabi_i2d>
 800444c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004450:	f7fc f8da 	bl	8000608 <__aeabi_dmul>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	f7fc fbcc 	bl	8000bf8 <__aeabi_d2f>
 8004460:	4603      	mov	r3, r0
 8004462:	63fb      	str	r3, [r7, #60]	@ 0x3c
    char x_val_str[13] = {
 8004464:	2300      	movs	r3, #0
 8004466:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004468:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	605a      	str	r2, [r3, #4]
 8004472:	721a      	strb	r2, [r3, #8]
        0
    }; // Initialize with zeros

    float y_val = 3.3 - ((3.3 / 158.0) * ((float)(cursor_y - 31)));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3b1f      	subs	r3, #31
 8004478:	ee07 3a90 	vmov	s15, r3
 800447c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004480:	ee17 0a90 	vmov	r0, s15
 8004484:	f7fc f868 	bl	8000558 <__aeabi_f2d>
 8004488:	a3be      	add	r3, pc, #760	@ (adr r3, 8004784 <drawCursors+0x3ec>)
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	f7fc f8bb 	bl	8000608 <__aeabi_dmul>
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	a1a8      	add	r1, pc, #672	@ (adr r1, 8004738 <drawCursors+0x3a0>)
 8004498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800449c:	f7fb fefc 	bl	8000298 <__aeabi_dsub>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4610      	mov	r0, r2
 80044a6:	4619      	mov	r1, r3
 80044a8:	f7fc fba6 	bl	8000bf8 <__aeabi_d2f>
 80044ac:	4603      	mov	r3, r0
 80044ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    char y_val_str[11];

    const char * units[] = {
 80044b0:	4ba3      	ldr	r3, [pc, #652]	@ (8004740 <drawCursors+0x3a8>)
 80044b2:	f107 0410 	add.w	r4, r7, #16
 80044b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        " ns",
        " us",
        " ms",
        " s"
    };
    int unit_index = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	65bb      	str	r3, [r7, #88]	@ 0x58
    double value = x_val;
 80044c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80044c2:	f7fc f849 	bl	8000558 <__aeabi_f2d>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    //converts to nanoseconds first
    value *= 1e9;
 80044ce:	a394      	add	r3, pc, #592	@ (adr r3, 8004720 <drawCursors+0x388>)
 80044d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80044d8:	f7fc f896 	bl	8000608 <__aeabi_dmul>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    //converts to appropriate unit
    while (value >= 10000 && unit_index < 3) {
 80044e4:	e00d      	b.n	8004502 <drawCursors+0x16a>
        value /= 1000;
 80044e6:	f04f 0200 	mov.w	r2, #0
 80044ea:	4b96      	ldr	r3, [pc, #600]	@ (8004744 <drawCursors+0x3ac>)
 80044ec:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80044f0:	f7fc f9b4 	bl	800085c <__aeabi_ddiv>
 80044f4:	4602      	mov	r2, r0
 80044f6:	460b      	mov	r3, r1
 80044f8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
        unit_index++;
 80044fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044fe:	3301      	adds	r3, #1
 8004500:	65bb      	str	r3, [r7, #88]	@ 0x58
    while (value >= 10000 && unit_index < 3) {
 8004502:	a389      	add	r3, pc, #548	@ (adr r3, 8004728 <drawCursors+0x390>)
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800450c:	f7fc fb02 	bl	8000b14 <__aeabi_dcmpge>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <drawCursors+0x184>
 8004516:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004518:	2b02      	cmp	r3, #2
 800451a:	dde4      	ble.n	80044e6 <drawCursors+0x14e>
    }

    //formats the string
    if (value < 1) {
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	4b89      	ldr	r3, [pc, #548]	@ (8004748 <drawCursors+0x3b0>)
 8004522:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8004526:	f7fc fae1 	bl	8000aec <__aeabi_dcmplt>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00c      	beq.n	800454a <drawCursors+0x1b2>
        sprintf(x_val_str, "X: 0000.000%s", units[unit_index]);
 8004530:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	3360      	adds	r3, #96	@ 0x60
 8004536:	443b      	add	r3, r7
 8004538:	f853 2c50 	ldr.w	r2, [r3, #-80]
 800453c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004540:	4982      	ldr	r1, [pc, #520]	@ (800474c <drawCursors+0x3b4>)
 8004542:	4618      	mov	r0, r3
 8004544:	f00c fcf8 	bl	8010f38 <siprintf>
 8004548:	e058      	b.n	80045fc <drawCursors+0x264>
    } else if (value < 10) {
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	4b80      	ldr	r3, [pc, #512]	@ (8004750 <drawCursors+0x3b8>)
 8004550:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8004554:	f7fc faca 	bl	8000aec <__aeabi_dcmplt>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00e      	beq.n	800457c <drawCursors+0x1e4>
        sprintf(x_val_str, "X: 000%1.3f%s", value, units[unit_index]);
 800455e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	3360      	adds	r3, #96	@ 0x60
 8004564:	443b      	add	r3, r7
 8004566:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800456a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004574:	4977      	ldr	r1, [pc, #476]	@ (8004754 <drawCursors+0x3bc>)
 8004576:	f00c fcdf 	bl	8010f38 <siprintf>
 800457a:	e03f      	b.n	80045fc <drawCursors+0x264>
    } else if (value < 100) {
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	4b75      	ldr	r3, [pc, #468]	@ (8004758 <drawCursors+0x3c0>)
 8004582:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8004586:	f7fc fab1 	bl	8000aec <__aeabi_dcmplt>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00e      	beq.n	80045ae <drawCursors+0x216>
        sprintf(x_val_str, "X: 00%2.3f%s", value, units[unit_index]);
 8004590:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	3360      	adds	r3, #96	@ 0x60
 8004596:	443b      	add	r3, r7
 8004598:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800459c:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045a6:	496d      	ldr	r1, [pc, #436]	@ (800475c <drawCursors+0x3c4>)
 80045a8:	f00c fcc6 	bl	8010f38 <siprintf>
 80045ac:	e026      	b.n	80045fc <drawCursors+0x264>
    } else if (value < 1000) {
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	4b64      	ldr	r3, [pc, #400]	@ (8004744 <drawCursors+0x3ac>)
 80045b4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80045b8:	f7fc fa98 	bl	8000aec <__aeabi_dcmplt>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00e      	beq.n	80045e0 <drawCursors+0x248>
        sprintf(x_val_str, "X: 0%3.3f%s", value, units[unit_index]);
 80045c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	3360      	adds	r3, #96	@ 0x60
 80045c8:	443b      	add	r3, r7
 80045ca:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80045ce:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045d8:	4961      	ldr	r1, [pc, #388]	@ (8004760 <drawCursors+0x3c8>)
 80045da:	f00c fcad 	bl	8010f38 <siprintf>
 80045de:	e00d      	b.n	80045fc <drawCursors+0x264>
    } else {
        sprintf(x_val_str, "X: %4.3f%s", value, units[unit_index]);
 80045e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	3360      	adds	r3, #96	@ 0x60
 80045e6:	443b      	add	r3, r7
 80045e8:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80045ec:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045f6:	495b      	ldr	r1, [pc, #364]	@ (8004764 <drawCursors+0x3cc>)
 80045f8:	f00c fc9e 	bl	8010f38 <siprintf>
    }


    //y cursor logic, checks value before and after scaling/division and maps to voltage
    int found_measurement = 0;
 80045fc:	2300      	movs	r3, #0
 80045fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = 0; i < 312; i++) {
 8004600:	2300      	movs	r3, #0
 8004602:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004604:	e037      	b.n	8004676 <drawCursors+0x2de>
        if (values[i] == cursor_y) {
 8004606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800460e:	4413      	add	r3, r2
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4293      	cmp	r3, r2
 8004618:	d12a      	bne.n	8004670 <drawCursors+0x2d8>
            y_val = map_vals[i] / (4095 / 3.3);
 800461a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004620:	4413      	add	r3, r2
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f7fb ff85 	bl	8000534 <__aeabi_i2d>
 800462a:	a341      	add	r3, pc, #260	@ (adr r3, 8004730 <drawCursors+0x398>)
 800462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004630:	f7fc f914 	bl	800085c <__aeabi_ddiv>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4610      	mov	r0, r2
 800463a:	4619      	mov	r1, r3
 800463c:	f7fc fadc 	bl	8000bf8 <__aeabi_d2f>
 8004640:	4603      	mov	r3, r0
 8004642:	65fb      	str	r3, [r7, #92]	@ 0x5c

            //remove the shift done in mapScreen if afe_toggle is on
            if(afe_toggle == 1){
 8004644:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004648:	2b01      	cmp	r3, #1
 800464a:	d10f      	bne.n	800466c <drawCursors+0x2d4>
            	y_val = y_val-3.3;
 800464c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800464e:	f7fb ff83 	bl	8000558 <__aeabi_f2d>
 8004652:	a339      	add	r3, pc, #228	@ (adr r3, 8004738 <drawCursors+0x3a0>)
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f7fb fe1e 	bl	8000298 <__aeabi_dsub>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4610      	mov	r0, r2
 8004662:	4619      	mov	r1, r3
 8004664:	f7fc fac8 	bl	8000bf8 <__aeabi_d2f>
 8004668:	4603      	mov	r3, r0
 800466a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }else{
            	y_val = y_val;
            }

            found_measurement = 1;
 800466c:	2301      	movs	r3, #1
 800466e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = 0; i < 312; i++) {
 8004670:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004672:	3301      	adds	r3, #1
 8004674:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004678:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 800467c:	dbc3      	blt.n	8004606 <drawCursors+0x26e>
        }
    }

    sprintf(y_val_str, "Y: %04.3f V", y_val);
 800467e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8004680:	f7fb ff6a 	bl	8000558 <__aeabi_f2d>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	f107 0020 	add.w	r0, r7, #32
 800468c:	4936      	ldr	r1, [pc, #216]	@ (8004768 <drawCursors+0x3d0>)
 800468e:	f00c fc53 	bl	8010f38 <siprintf>

    LCD_PutStr(147, 216, x_val_str, FONT_5X12, C_WHITE, C_BLACK);
 8004692:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8004696:	2300      	movs	r3, #0
 8004698:	9301      	str	r3, [sp, #4]
 800469a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	4b32      	ldr	r3, [pc, #200]	@ (800476c <drawCursors+0x3d4>)
 80046a2:	21d8      	movs	r1, #216	@ 0xd8
 80046a4:	2093      	movs	r0, #147	@ 0x93
 80046a6:	f000 fd51 	bl	800514c <LCD_PutStr>

    if (found_measurement) {
 80046aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00c      	beq.n	80046ca <drawCursors+0x332>
        LCD_PutStr(147, 202, y_val_str, FONT_5X12, C_WHITE, C_BLACK);
 80046b0:	f107 0220 	add.w	r2, r7, #32
 80046b4:	2300      	movs	r3, #0
 80046b6:	9301      	str	r3, [sp, #4]
 80046b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	4b2b      	ldr	r3, [pc, #172]	@ (800476c <drawCursors+0x3d4>)
 80046c0:	21ca      	movs	r1, #202	@ 0xca
 80046c2:	2093      	movs	r0, #147	@ 0x93
 80046c4:	f000 fd42 	bl	800514c <LCD_PutStr>
 80046c8:	e00a      	b.n	80046e0 <drawCursors+0x348>
    } else {
        LCD_PutStr(147, 202, "Y: N/A V  ", FONT_5X12, C_WHITE, C_BLACK);
 80046ca:	2300      	movs	r3, #0
 80046cc:	9301      	str	r3, [sp, #4]
 80046ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	4b25      	ldr	r3, [pc, #148]	@ (800476c <drawCursors+0x3d4>)
 80046d6:	4a26      	ldr	r2, [pc, #152]	@ (8004770 <drawCursors+0x3d8>)
 80046d8:	21ca      	movs	r1, #202	@ 0xca
 80046da:	2093      	movs	r0, #147	@ 0x93
 80046dc:	f000 fd36 	bl	800514c <LCD_PutStr>
    }

    if(afe_toggle == 1){
 80046e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d10b      	bne.n	8004700 <drawCursors+0x368>
    	LCD_PutStr(6, 34, "AFE Mode ON ", FONT_5X12, C_WHITE, C_BLACK);
 80046e8:	2300      	movs	r3, #0
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	4b1e      	ldr	r3, [pc, #120]	@ (800476c <drawCursors+0x3d4>)
 80046f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004774 <drawCursors+0x3dc>)
 80046f6:	2122      	movs	r1, #34	@ 0x22
 80046f8:	2006      	movs	r0, #6
 80046fa:	f000 fd27 	bl	800514c <LCD_PutStr>
    	LCD_PutStr(6, 34, "AFE Mode OFF", FONT_5X12, C_WHITE, C_BLACK);
    }



}
 80046fe:	e00a      	b.n	8004716 <drawCursors+0x37e>
    	LCD_PutStr(6, 34, "AFE Mode OFF", FONT_5X12, C_WHITE, C_BLACK);
 8004700:	2300      	movs	r3, #0
 8004702:	9301      	str	r3, [sp, #4]
 8004704:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	4b18      	ldr	r3, [pc, #96]	@ (800476c <drawCursors+0x3d4>)
 800470c:	4a1a      	ldr	r2, [pc, #104]	@ (8004778 <drawCursors+0x3e0>)
 800470e:	2122      	movs	r1, #34	@ 0x22
 8004710:	2006      	movs	r0, #6
 8004712:	f000 fd1b 	bl	800514c <LCD_PutStr>
}
 8004716:	bf00      	nop
 8004718:	3760      	adds	r7, #96	@ 0x60
 800471a:	46bd      	mov	sp, r7
 800471c:	bdb0      	pop	{r4, r5, r7, pc}
 800471e:	bf00      	nop
 8004720:	00000000 	.word	0x00000000
 8004724:	41cdcd65 	.word	0x41cdcd65
 8004728:	00000000 	.word	0x00000000
 800472c:	40c38800 	.word	0x40c38800
 8004730:	e8ba2e8c 	.word	0xe8ba2e8c
 8004734:	409363a2 	.word	0x409363a2
 8004738:	66666666 	.word	0x66666666
 800473c:	400a6666 	.word	0x400a6666
 8004740:	080133d8 	.word	0x080133d8
 8004744:	408f4000 	.word	0x408f4000
 8004748:	3ff00000 	.word	0x3ff00000
 800474c:	08013348 	.word	0x08013348
 8004750:	40240000 	.word	0x40240000
 8004754:	08013358 	.word	0x08013358
 8004758:	40590000 	.word	0x40590000
 800475c:	08013368 	.word	0x08013368
 8004760:	08013378 	.word	0x08013378
 8004764:	08013384 	.word	0x08013384
 8004768:	08013390 	.word	0x08013390
 800476c:	08013860 	.word	0x08013860
 8004770:	0801339c 	.word	0x0801339c
 8004774:	080133a8 	.word	0x080133a8
 8004778:	080133b8 	.word	0x080133b8
 800477c:	00000000 	.word	0x00000000
 8004780:	418c9c38 	.word	0x418c9c38
 8004784:	d493c460 	.word	0xd493c460
 8004788:	3f956328 	.word	0x3f956328

0800478c <drawDiv>:

void drawDiv(int x_div_option, int * PSC, int * ARR, int y_div_option) {
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af02      	add	r7, sp, #8
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	603b      	str	r3, [r7, #0]
    if (x_div_option == 0) {
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d112      	bne.n	80047c6 <drawDiv+0x3a>
        LCD_PutStr(218, 9, "3.13ms/div - 320 HZ", FONT_5X12, C_WHITE, C_BLACK); // 320 Hz -> 1/320 = 3.13 ms/div
 80047a0:	2300      	movs	r3, #0
 80047a2:	9301      	str	r3, [sp, #4]
 80047a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	4ba3      	ldr	r3, [pc, #652]	@ (8004a38 <drawDiv+0x2ac>)
 80047ac:	4aa3      	ldr	r2, [pc, #652]	@ (8004a3c <drawDiv+0x2b0>)
 80047ae:	2109      	movs	r1, #9
 80047b0:	20da      	movs	r0, #218	@ 0xda
 80047b2:	f000 fccb 	bl	800514c <LCD_PutStr>
        * PSC = 0;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]
        * ARR = 4814;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f241 22ce 	movw	r2, #4814	@ 0x12ce
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	e0d3      	b.n	800496e <drawDiv+0x1e2>
    } else if (x_div_option == 1) {
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d112      	bne.n	80047f2 <drawDiv+0x66>
        LCD_PutStr(218, 9, "1.00ms/div - 1.0KHZ", FONT_5X12, C_WHITE, C_BLACK); // 1 kHz -> 1/1000 = 1.00 ms/div
 80047cc:	2300      	movs	r3, #0
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	4b98      	ldr	r3, [pc, #608]	@ (8004a38 <drawDiv+0x2ac>)
 80047d8:	4a99      	ldr	r2, [pc, #612]	@ (8004a40 <drawDiv+0x2b4>)
 80047da:	2109      	movs	r1, #9
 80047dc:	20da      	movs	r0, #218	@ 0xda
 80047de:	f000 fcb5 	bl	800514c <LCD_PutStr>
        * PSC = 0;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
        * ARR = 1537;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f240 6201 	movw	r2, #1537	@ 0x601
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	e0bd      	b.n	800496e <drawDiv+0x1e2>
    } else if (x_div_option == 2) {
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d112      	bne.n	800481e <drawDiv+0x92>
        LCD_PutStr(218, 9, " 417us/div - 2.4KHZ", FONT_5X12, C_WHITE, C_BLACK); // 2.4 kHz -> 1/2400 = 417 µs/div
 80047f8:	2300      	movs	r3, #0
 80047fa:	9301      	str	r3, [sp, #4]
 80047fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	4b8d      	ldr	r3, [pc, #564]	@ (8004a38 <drawDiv+0x2ac>)
 8004804:	4a8f      	ldr	r2, [pc, #572]	@ (8004a44 <drawDiv+0x2b8>)
 8004806:	2109      	movs	r1, #9
 8004808:	20da      	movs	r0, #218	@ 0xda
 800480a:	f000 fc9f 	bl	800514c <LCD_PutStr>
        * PSC = 0;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
        * ARR = 640;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	e0a7      	b.n	800496e <drawDiv+0x1e2>
    } else if (x_div_option == 3) {
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b03      	cmp	r3, #3
 8004822:	d112      	bne.n	800484a <drawDiv+0xbe>
        LCD_PutStr(218, 9, " 200us/div - 5.0KHZ", FONT_5X12, C_WHITE, C_BLACK); // 5 kHz -> 1/5000 = 200 µs/div
 8004824:	2300      	movs	r3, #0
 8004826:	9301      	str	r3, [sp, #4]
 8004828:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	4b82      	ldr	r3, [pc, #520]	@ (8004a38 <drawDiv+0x2ac>)
 8004830:	4a85      	ldr	r2, [pc, #532]	@ (8004a48 <drawDiv+0x2bc>)
 8004832:	2109      	movs	r1, #9
 8004834:	20da      	movs	r0, #218	@ 0xda
 8004836:	f000 fc89 	bl	800514c <LCD_PutStr>
        * PSC = 0;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
        * ARR = 306;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	e091      	b.n	800496e <drawDiv+0x1e2>
    } else if (x_div_option == 4) {
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b04      	cmp	r3, #4
 800484e:	d111      	bne.n	8004874 <drawDiv+0xe8>
        LCD_PutStr(218, 9, " 100us/div - 10 KHZ", FONT_5X12, C_WHITE, C_BLACK); // 10 kHz -> 1/10000 = 100 µs/div
 8004850:	2300      	movs	r3, #0
 8004852:	9301      	str	r3, [sp, #4]
 8004854:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	4b77      	ldr	r3, [pc, #476]	@ (8004a38 <drawDiv+0x2ac>)
 800485c:	4a7b      	ldr	r2, [pc, #492]	@ (8004a4c <drawDiv+0x2c0>)
 800485e:	2109      	movs	r1, #9
 8004860:	20da      	movs	r0, #218	@ 0xda
 8004862:	f000 fc73 	bl	800514c <LCD_PutStr>
        * PSC = 0;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
        * ARR = 152;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2298      	movs	r2, #152	@ 0x98
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	e07c      	b.n	800496e <drawDiv+0x1e2>
    } else if (x_div_option == 5) {
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b05      	cmp	r3, #5
 8004878:	d111      	bne.n	800489e <drawDiv+0x112>
        LCD_PutStr(218, 9, "41.7us/div - 24 KHZ", FONT_5X12, C_WHITE, C_BLACK); // 24 kHz -> 1/24000 = 41.7 µs/div
 800487a:	2300      	movs	r3, #0
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	4b6c      	ldr	r3, [pc, #432]	@ (8004a38 <drawDiv+0x2ac>)
 8004886:	4a72      	ldr	r2, [pc, #456]	@ (8004a50 <drawDiv+0x2c4>)
 8004888:	2109      	movs	r1, #9
 800488a:	20da      	movs	r0, #218	@ 0xda
 800488c:	f000 fc5e 	bl	800514c <LCD_PutStr>
        * PSC = 0;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
        * ARR = 63;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	223f      	movs	r2, #63	@ 0x3f
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	e067      	b.n	800496e <drawDiv+0x1e2>
    } else if (x_div_option == 6) {
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b06      	cmp	r3, #6
 80048a2:	d111      	bne.n	80048c8 <drawDiv+0x13c>
        LCD_PutStr(218, 9, "20.0us/div - 50 KHZ", FONT_5X12, C_WHITE, C_BLACK); // 50 kHz -> 1/50000 = 20.0 µs/div
 80048a4:	2300      	movs	r3, #0
 80048a6:	9301      	str	r3, [sp, #4]
 80048a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	4b62      	ldr	r3, [pc, #392]	@ (8004a38 <drawDiv+0x2ac>)
 80048b0:	4a68      	ldr	r2, [pc, #416]	@ (8004a54 <drawDiv+0x2c8>)
 80048b2:	2109      	movs	r1, #9
 80048b4:	20da      	movs	r0, #218	@ 0xda
 80048b6:	f000 fc49 	bl	800514c <LCD_PutStr>
        * PSC = 0;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
        * ARR = 29;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	221d      	movs	r2, #29
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e052      	b.n	800496e <drawDiv+0x1e2>
    } else if (x_div_option == 7) {
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b07      	cmp	r3, #7
 80048cc:	d111      	bne.n	80048f2 <drawDiv+0x166>
        LCD_PutStr(218, 9, "10.0us/div - 100KHZ", FONT_5X12, C_WHITE, C_BLACK); // 100 kHz -> 1/100000 = 10.0 µs/div
 80048ce:	2300      	movs	r3, #0
 80048d0:	9301      	str	r3, [sp, #4]
 80048d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80048d6:	9300      	str	r3, [sp, #0]
 80048d8:	4b57      	ldr	r3, [pc, #348]	@ (8004a38 <drawDiv+0x2ac>)
 80048da:	4a5f      	ldr	r2, [pc, #380]	@ (8004a58 <drawDiv+0x2cc>)
 80048dc:	2109      	movs	r1, #9
 80048de:	20da      	movs	r0, #218	@ 0xda
 80048e0:	f000 fc34 	bl	800514c <LCD_PutStr>
        * PSC = 0;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
        * ARR = 14;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	220e      	movs	r2, #14
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	e03d      	b.n	800496e <drawDiv+0x1e2>
    } else if (x_div_option == 8) {
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d111      	bne.n	800491c <drawDiv+0x190>
        LCD_PutStr(218, 9, "4.17us/div - 240KHZ", FONT_5X12, C_WHITE, C_BLACK); // 240 kHz -> 1/240000 = 4.17 µs/div
 80048f8:	2300      	movs	r3, #0
 80048fa:	9301      	str	r3, [sp, #4]
 80048fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	4b4d      	ldr	r3, [pc, #308]	@ (8004a38 <drawDiv+0x2ac>)
 8004904:	4a55      	ldr	r2, [pc, #340]	@ (8004a5c <drawDiv+0x2d0>)
 8004906:	2109      	movs	r1, #9
 8004908:	20da      	movs	r0, #218	@ 0xda
 800490a:	f000 fc1f 	bl	800514c <LCD_PutStr>
        * PSC = 0;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]
        * ARR = 5;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2205      	movs	r2, #5
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	e028      	b.n	800496e <drawDiv+0x1e2>
    } else if (x_div_option == 9) {
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b09      	cmp	r3, #9
 8004920:	d111      	bne.n	8004946 <drawDiv+0x1ba>
        LCD_PutStr(218, 9, "2.00us/div - 500KHZ", FONT_5X12, C_WHITE, C_BLACK); // 500 kHz -> 1/500000 = 2.00 µs/div
 8004922:	2300      	movs	r3, #0
 8004924:	9301      	str	r3, [sp, #4]
 8004926:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	4b42      	ldr	r3, [pc, #264]	@ (8004a38 <drawDiv+0x2ac>)
 800492e:	4a4c      	ldr	r2, [pc, #304]	@ (8004a60 <drawDiv+0x2d4>)
 8004930:	2109      	movs	r1, #9
 8004932:	20da      	movs	r0, #218	@ 0xda
 8004934:	f000 fc0a 	bl	800514c <LCD_PutStr>
        * PSC = 0;
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
        * ARR = 2;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2202      	movs	r2, #2
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	e013      	b.n	800496e <drawDiv+0x1e2>
    } else if (x_div_option == 10) {
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2b0a      	cmp	r3, #10
 800494a:	d110      	bne.n	800496e <drawDiv+0x1e2>
        LCD_PutStr(218, 9, "1.00us/div - 1.0MHZ", FONT_5X12, C_WHITE, C_BLACK); // 1 MHz -> 1/1000000 = 1.00 µs/div
 800494c:	2300      	movs	r3, #0
 800494e:	9301      	str	r3, [sp, #4]
 8004950:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	4b38      	ldr	r3, [pc, #224]	@ (8004a38 <drawDiv+0x2ac>)
 8004958:	4a42      	ldr	r2, [pc, #264]	@ (8004a64 <drawDiv+0x2d8>)
 800495a:	2109      	movs	r1, #9
 800495c:	20da      	movs	r0, #218	@ 0xda
 800495e:	f000 fbf5 	bl	800514c <LCD_PutStr>
        * PSC = 0;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]
        * ARR = 1;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	601a      	str	r2, [r3, #0]
    }

    if (y_div_option == 0) {
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10b      	bne.n	800498c <drawDiv+0x200>
        LCD_PutStr(136, 9, "825.00 mV/div", FONT_5X12, C_WHITE, C_BLACK);
 8004974:	2300      	movs	r3, #0
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	4b2e      	ldr	r3, [pc, #184]	@ (8004a38 <drawDiv+0x2ac>)
 8004980:	4a39      	ldr	r2, [pc, #228]	@ (8004a68 <drawDiv+0x2dc>)
 8004982:	2109      	movs	r1, #9
 8004984:	2088      	movs	r0, #136	@ 0x88
 8004986:	f000 fbe1 	bl	800514c <LCD_PutStr>
 800498a:	e03a      	b.n	8004a02 <drawDiv+0x276>
    } else if (y_div_option == 1) {
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d10b      	bne.n	80049aa <drawDiv+0x21e>
        LCD_PutStr(136, 9, "500.00 mV/div", FONT_5X12, C_WHITE, C_BLACK);
 8004992:	2300      	movs	r3, #0
 8004994:	9301      	str	r3, [sp, #4]
 8004996:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	4b26      	ldr	r3, [pc, #152]	@ (8004a38 <drawDiv+0x2ac>)
 800499e:	4a33      	ldr	r2, [pc, #204]	@ (8004a6c <drawDiv+0x2e0>)
 80049a0:	2109      	movs	r1, #9
 80049a2:	2088      	movs	r0, #136	@ 0x88
 80049a4:	f000 fbd2 	bl	800514c <LCD_PutStr>
 80049a8:	e02b      	b.n	8004a02 <drawDiv+0x276>
    } else if (y_div_option == 2) {
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d10b      	bne.n	80049c8 <drawDiv+0x23c>
        LCD_PutStr(136, 9, "250.00 mV/div", FONT_5X12, C_WHITE, C_BLACK);
 80049b0:	2300      	movs	r3, #0
 80049b2:	9301      	str	r3, [sp, #4]
 80049b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004a38 <drawDiv+0x2ac>)
 80049bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004a70 <drawDiv+0x2e4>)
 80049be:	2109      	movs	r1, #9
 80049c0:	2088      	movs	r0, #136	@ 0x88
 80049c2:	f000 fbc3 	bl	800514c <LCD_PutStr>
 80049c6:	e01c      	b.n	8004a02 <drawDiv+0x276>
    } else if (y_div_option == 3) {
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2b03      	cmp	r3, #3
 80049cc:	d10b      	bne.n	80049e6 <drawDiv+0x25a>
        LCD_PutStr(136, 9, "100.00 mV/div", FONT_5X12, C_WHITE, C_BLACK);
 80049ce:	2300      	movs	r3, #0
 80049d0:	9301      	str	r3, [sp, #4]
 80049d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	4b17      	ldr	r3, [pc, #92]	@ (8004a38 <drawDiv+0x2ac>)
 80049da:	4a26      	ldr	r2, [pc, #152]	@ (8004a74 <drawDiv+0x2e8>)
 80049dc:	2109      	movs	r1, #9
 80049de:	2088      	movs	r0, #136	@ 0x88
 80049e0:	f000 fbb4 	bl	800514c <LCD_PutStr>
 80049e4:	e00d      	b.n	8004a02 <drawDiv+0x276>
    } else if (y_div_option == 4) {
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d10a      	bne.n	8004a02 <drawDiv+0x276>
        LCD_PutStr(136, 9, "050.00 mV/div", FONT_5X12, C_WHITE, C_BLACK);
 80049ec:	2300      	movs	r3, #0
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	4b10      	ldr	r3, [pc, #64]	@ (8004a38 <drawDiv+0x2ac>)
 80049f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a78 <drawDiv+0x2ec>)
 80049fa:	2109      	movs	r1, #9
 80049fc:	2088      	movs	r0, #136	@ 0x88
 80049fe:	f000 fba5 	bl	800514c <LCD_PutStr>
    }

    LCD_PutStr(207, 9, "-", FONT_5X12, C_WHITE, C_BLACK);
 8004a02:	2300      	movs	r3, #0
 8004a04:	9301      	str	r3, [sp, #4]
 8004a06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a38 <drawDiv+0x2ac>)
 8004a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8004a7c <drawDiv+0x2f0>)
 8004a10:	2109      	movs	r1, #9
 8004a12:	20cf      	movs	r0, #207	@ 0xcf
 8004a14:	f000 fb9a 	bl	800514c <LCD_PutStr>
    LCD_PutStr(125, 9, "-", FONT_5X12, C_WHITE, C_BLACK);
 8004a18:	2300      	movs	r3, #0
 8004a1a:	9301      	str	r3, [sp, #4]
 8004a1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	4b05      	ldr	r3, [pc, #20]	@ (8004a38 <drawDiv+0x2ac>)
 8004a24:	4a15      	ldr	r2, [pc, #84]	@ (8004a7c <drawDiv+0x2f0>)
 8004a26:	2109      	movs	r1, #9
 8004a28:	207d      	movs	r0, #125	@ 0x7d
 8004a2a:	f000 fb8f 	bl	800514c <LCD_PutStr>

}
 8004a2e:	bf00      	nop
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	08013860 	.word	0x08013860
 8004a3c:	080133e8 	.word	0x080133e8
 8004a40:	080133fc 	.word	0x080133fc
 8004a44:	08013410 	.word	0x08013410
 8004a48:	08013424 	.word	0x08013424
 8004a4c:	08013438 	.word	0x08013438
 8004a50:	0801344c 	.word	0x0801344c
 8004a54:	08013460 	.word	0x08013460
 8004a58:	08013474 	.word	0x08013474
 8004a5c:	08013488 	.word	0x08013488
 8004a60:	0801349c 	.word	0x0801349c
 8004a64:	080134b0 	.word	0x080134b0
 8004a68:	080134c4 	.word	0x080134c4
 8004a6c:	080134d4 	.word	0x080134d4
 8004a70:	080134e4 	.word	0x080134e4
 8004a74:	080134f4 	.word	0x080134f4
 8004a78:	08013504 	.word	0x08013504
 8004a7c:	08013514 	.word	0x08013514

08004a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004a80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004ab8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004a84:	f7fe fbfc 	bl	8003280 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a88:	480c      	ldr	r0, [pc, #48]	@ (8004abc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a8a:	490d      	ldr	r1, [pc, #52]	@ (8004ac0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004ac4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a90:	e002      	b.n	8004a98 <LoopCopyDataInit>

08004a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a96:	3304      	adds	r3, #4

08004a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a9c:	d3f9      	bcc.n	8004a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004aa0:	4c0a      	ldr	r4, [pc, #40]	@ (8004acc <LoopFillZerobss+0x22>)
  movs r3, #0
 8004aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004aa4:	e001      	b.n	8004aaa <LoopFillZerobss>

08004aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004aa8:	3204      	adds	r2, #4

08004aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004aac:	d3fb      	bcc.n	8004aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004aae:	f00c fb93 	bl	80111d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ab2:	f7fc fa69 	bl	8000f88 <main>
  bx  lr    
 8004ab6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ab8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ac0:	20000320 	.word	0x20000320
  ldr r2, =_sidata
 8004ac4:	08015418 	.word	0x08015418
  ldr r2, =_sbss
 8004ac8:	20000320 	.word	0x20000320
  ldr r4, =_ebss
 8004acc:	20002fc4 	.word	0x20002fc4

08004ad0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ad0:	e7fe      	b.n	8004ad0 <DMA1_Stream0_IRQHandler>
	...

08004ad4 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 8004ade:	4b1a      	ldr	r3, [pc, #104]	@ (8004b48 <setSPI_Size+0x74>)
 8004ae0:	f993 3000 	ldrsb.w	r3, [r3]
 8004ae4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d026      	beq.n	8004b3a <setSPI_Size+0x66>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8004aec:	4b17      	ldr	r3, [pc, #92]	@ (8004b4c <setSPI_Size+0x78>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4b16      	ldr	r3, [pc, #88]	@ (8004b4c <setSPI_Size+0x78>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004afa:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 8004afc:	4a12      	ldr	r2, [pc, #72]	@ (8004b48 <setSPI_Size+0x74>)
 8004afe:	79fb      	ldrb	r3, [r7, #7]
 8004b00:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 8004b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d10c      	bne.n	8004b24 <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 8004b0a:	4b10      	ldr	r3, [pc, #64]	@ (8004b4c <setSPI_Size+0x78>)
 8004b0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b10:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_DFF;
 8004b12:	4b0e      	ldr	r3, [pc, #56]	@ (8004b4c <setSPI_Size+0x78>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	4b0c      	ldr	r3, [pc, #48]	@ (8004b4c <setSPI_Size+0x78>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b20:	601a      	str	r2, [r3, #0]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 8004b22:	e00a      	b.n	8004b3a <setSPI_Size+0x66>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b24:	4b09      	ldr	r3, [pc, #36]	@ (8004b4c <setSPI_Size+0x78>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
 8004b2a:	4b08      	ldr	r3, [pc, #32]	@ (8004b4c <setSPI_Size+0x78>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4b06      	ldr	r3, [pc, #24]	@ (8004b4c <setSPI_Size+0x78>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b38:	601a      	str	r2, [r3, #0]
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	20000050 	.word	0x20000050
 8004b4c:	20000438 	.word	0x20000438

08004b50 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	460a      	mov	r2, r1
 8004b5a:	71fb      	strb	r3, [r7, #7]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 8004b60:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff ffb5 	bl	8004ad4 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 8004b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c60 <setDMAMemMode+0x110>)
 8004b6c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004b70:	461a      	mov	r2, r3
 8004b72:	79bb      	ldrb	r3, [r7, #6]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d106      	bne.n	8004b86 <setDMAMemMode+0x36>
 8004b78:	4b39      	ldr	r3, [pc, #228]	@ (8004c60 <setDMAMemMode+0x110>)
 8004b7a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d067      	beq.n	8004c56 <setDMAMemMode+0x106>
    config.dma_sz =size;
 8004b86:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8004b8a:	4b35      	ldr	r3, [pc, #212]	@ (8004c60 <setDMAMemMode+0x110>)
 8004b8c:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 8004b8e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004b92:	4b33      	ldr	r3, [pc, #204]	@ (8004c60 <setDMAMemMode+0x110>)
 8004b94:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 8004b96:	4b33      	ldr	r3, [pc, #204]	@ (8004c64 <setDMAMemMode+0x114>)
 8004b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	4b31      	ldr	r3, [pc, #196]	@ (8004c64 <setDMAMemMode+0x114>)
 8004ba0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0201 	bic.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
 8004baa:	bf00      	nop
 8004bac:	4b2d      	ldr	r3, [pc, #180]	@ (8004c64 <setDMAMemMode+0x114>)
 8004bae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1f7      	bne.n	8004bac <setDMAMemMode+0x5c>
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
#endif
    if(memInc==mem_increase){
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d10f      	bne.n	8004be2 <setDMAMemMode+0x92>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 8004bc2:	4b28      	ldr	r3, [pc, #160]	@ (8004c64 <setDMAMemMode+0x114>)
 8004bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004bca:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
 8004bcc:	4b25      	ldr	r3, [pc, #148]	@ (8004c64 <setDMAMemMode+0x114>)
 8004bce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	4b23      	ldr	r3, [pc, #140]	@ (8004c64 <setDMAMemMode+0x114>)
 8004bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	e00d      	b.n	8004bfe <setDMAMemMode+0xae>
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 8004be2:	4b20      	ldr	r3, [pc, #128]	@ (8004c64 <setDMAMemMode+0x114>)
 8004be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004be6:	2200      	movs	r2, #0
 8004be8:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
 8004bea:	4b1e      	ldr	r3, [pc, #120]	@ (8004c64 <setDMAMemMode+0x114>)
 8004bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8004c64 <setDMAMemMode+0x114>)
 8004bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bfc:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
#endif
    }

    if(size==mode_16bit){
 8004bfe:	79bb      	ldrb	r3, [r7, #6]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d116      	bne.n	8004c32 <setDMAMemMode+0xe2>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c04:	4b17      	ldr	r3, [pc, #92]	@ (8004c64 <setDMAMemMode+0x114>)
 8004c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c0c:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c0e:	4b15      	ldr	r3, [pc, #84]	@ (8004c64 <setDMAMemMode+0x114>)
 8004c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c16:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
 8004c18:	4b12      	ldr	r3, [pc, #72]	@ (8004c64 <setDMAMemMode+0x114>)
 8004c1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8004c24:	4b0f      	ldr	r3, [pc, #60]	@ (8004c64 <setDMAMemMode+0x114>)
 8004c26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f442 5220 	orr.w	r2, r2, #10240	@ 0x2800
 8004c2e:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 8004c30:	e011      	b.n	8004c56 <setDMAMemMode+0x106>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c32:	4b0c      	ldr	r3, [pc, #48]	@ (8004c64 <setDMAMemMode+0x114>)
 8004c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c36:	2200      	movs	r2, #0
 8004c38:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c64 <setDMAMemMode+0x114>)
 8004c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c3e:	2200      	movs	r2, #0
 8004c40:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk));
 8004c42:	4b08      	ldr	r3, [pc, #32]	@ (8004c64 <setDMAMemMode+0x114>)
 8004c44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	4b06      	ldr	r3, [pc, #24]	@ (8004c64 <setDMAMemMode+0x114>)
 8004c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 42f0 	bic.w	r2, r2, #30720	@ 0x7800
 8004c54:	601a      	str	r2, [r3, #0]
}
 8004c56:	bf00      	nop
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000050 	.word	0x20000050
 8004c64:	20000438 	.word	0x20000438

08004c68 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	460b      	mov	r3, r1
 8004c72:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 8004c74:	2000      	movs	r0, #0
 8004c76:	f7ff ff2d 	bl	8004ad4 <setSPI_Size>
  LCD_PIN(LCD_DC,RESET);
 8004c7a:	4b12      	ldr	r3, [pc, #72]	@ (8004cc4 <LCD_WriteCommand+0x5c>)
 8004c7c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004c80:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 8004c82:	4b10      	ldr	r3, [pc, #64]	@ (8004cc4 <LCD_WriteCommand+0x5c>)
 8004c84:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004c88:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 8004c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8e:	2201      	movs	r2, #1
 8004c90:	6879      	ldr	r1, [r7, #4]
 8004c92:	480d      	ldr	r0, [pc, #52]	@ (8004cc8 <LCD_WriteCommand+0x60>)
 8004c94:	f004 f847 	bl	8008d26 <HAL_SPI_Transmit>
  if(argc){
 8004c98:	78fb      	ldrb	r3, [r7, #3]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00b      	beq.n	8004cb6 <LCD_WriteCommand+0x4e>
    LCD_PIN(LCD_DC,SET);
 8004c9e:	4b09      	ldr	r3, [pc, #36]	@ (8004cc4 <LCD_WriteCommand+0x5c>)
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	619a      	str	r2, [r3, #24]
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	1c59      	adds	r1, r3, #1
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb0:	4805      	ldr	r0, [pc, #20]	@ (8004cc8 <LCD_WriteCommand+0x60>)
 8004cb2:	f004 f838 	bl	8008d26 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 8004cb6:	4b03      	ldr	r3, [pc, #12]	@ (8004cc4 <LCD_WriteCommand+0x5c>)
 8004cb8:	2204      	movs	r2, #4
 8004cba:	619a      	str	r2, [r3, #24]
#endif
}
 8004cbc:	bf00      	nop
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	40020400 	.word	0x40020400
 8004cc8:	20000438 	.word	0x20000438

08004ccc <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
  LCD_PIN(LCD_DC,SET);
 8004cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8004d90 <LCD_WriteData+0xc4>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 8004cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8004d90 <LCD_WriteData+0xc4>)
 8004cde:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004ce2:	619a      	str	r2, [r3, #24]
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 8004ce4:	e049      	b.n	8004d7a <LCD_WriteData+0xae>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cec:	4293      	cmp	r3, r2
 8004cee:	bf28      	it	cs
 8004cf0:	4613      	movcs	r3, r2
 8004cf2:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_Min_Pixels){
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	d924      	bls.n	8004d44 <LCD_WriteData+0x78>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 8004cfa:	89fb      	ldrh	r3, [r7, #14]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4824      	ldr	r0, [pc, #144]	@ (8004d94 <LCD_WriteData+0xc8>)
 8004d02:	f004 f953 	bl	8008fac <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 8004d06:	bf00      	nop
 8004d08:	4b22      	ldr	r3, [pc, #136]	@ (8004d94 <LCD_WriteData+0xc8>)
 8004d0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f001 fceb 	bl	80066e8 <HAL_DMA_GetState>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d1f7      	bne.n	8004d08 <LCD_WriteData+0x3c>
      if(config.dma_mem_inc==mem_increase){
 8004d18:	4b1f      	ldr	r3, [pc, #124]	@ (8004d98 <LCD_WriteData+0xcc>)
 8004d1a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d127      	bne.n	8004d72 <LCD_WriteData+0xa6>
        if(config.dma_sz==mode_16bit)
 8004d22:	4b1d      	ldr	r3, [pc, #116]	@ (8004d98 <LCD_WriteData+0xcc>)
 8004d24:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d104      	bne.n	8004d36 <LCD_WriteData+0x6a>
          buff += chunk_size;
 8004d2c:	89fb      	ldrh	r3, [r7, #14]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	4413      	add	r3, r2
 8004d32:	607b      	str	r3, [r7, #4]
 8004d34:	e01d      	b.n	8004d72 <LCD_WriteData+0xa6>
        else
          buff += chunk_size*2;
 8004d36:	89fb      	ldrh	r3, [r7, #14]
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4413      	add	r3, r2
 8004d40:	607b      	str	r3, [r7, #4]
 8004d42:	e016      	b.n	8004d72 <LCD_WriteData+0xa6>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 8004d44:	89fa      	ldrh	r2, [r7, #14]
 8004d46:	f04f 33ff 	mov.w	r3, #4294967295
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	4811      	ldr	r0, [pc, #68]	@ (8004d94 <LCD_WriteData+0xc8>)
 8004d4e:	f003 ffea 	bl	8008d26 <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8004d52:	4b11      	ldr	r3, [pc, #68]	@ (8004d98 <LCD_WriteData+0xcc>)
 8004d54:	f993 3000 	ldrsb.w	r3, [r3]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d104      	bne.n	8004d66 <LCD_WriteData+0x9a>
        buff += chunk_size;
 8004d5c:	89fb      	ldrh	r3, [r7, #14]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	4413      	add	r3, r2
 8004d62:	607b      	str	r3, [r7, #4]
 8004d64:	e005      	b.n	8004d72 <LCD_WriteData+0xa6>
      else
        buff += chunk_size*2;
 8004d66:	89fb      	ldrh	r3, [r7, #14]
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4413      	add	r3, r2
 8004d70:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 8004d72:	89fb      	ldrh	r3, [r7, #14]
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1b2      	bne.n	8004ce6 <LCD_WriteData+0x1a>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 8004d80:	4b03      	ldr	r3, [pc, #12]	@ (8004d90 <LCD_WriteData+0xc4>)
 8004d82:	2204      	movs	r2, #4
 8004d84:	619a      	str	r2, [r3, #24]
#endif
}
 8004d86:	bf00      	nop
 8004d88:	3710      	adds	r7, #16
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	40020400 	.word	0x40020400
 8004d94:	20000438 	.word	0x20000438
 8004d98:	20000050 	.word	0x20000050

08004d9c <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8004d9c:	b590      	push	{r4, r7, lr}
 8004d9e:	b08b      	sub	sp, #44	@ 0x2c
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4604      	mov	r4, r0
 8004da4:	4608      	mov	r0, r1
 8004da6:	4611      	mov	r1, r2
 8004da8:	461a      	mov	r2, r3
 8004daa:	4623      	mov	r3, r4
 8004dac:	80fb      	strh	r3, [r7, #6]
 8004dae:	4603      	mov	r3, r0
 8004db0:	80bb      	strh	r3, [r7, #4]
 8004db2:	460b      	mov	r3, r1
 8004db4:	807b      	strh	r3, [r7, #2]
 8004db6:	4613      	mov	r3, r2
 8004db8:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 8004dba:	88fb      	ldrh	r3, [r7, #6]
 8004dbc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004dbe:	887b      	ldrh	r3, [r7, #2]
 8004dc0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 8004dc2:	88bb      	ldrh	r3, [r7, #4]
 8004dc4:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004dc6:	883b      	ldrh	r3, [r7, #0]
 8004dc8:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8004dca:	232a      	movs	r3, #42	@ 0x2a
 8004dcc:	763b      	strb	r3, [r7, #24]
 8004dce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8004dd2:	121b      	asrs	r3, r3, #8
 8004dd4:	b21b      	sxth	r3, r3
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	767b      	strb	r3, [r7, #25]
 8004dda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	76bb      	strb	r3, [r7, #26]
 8004de0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8004de4:	121b      	asrs	r3, r3, #8
 8004de6:	b21b      	sxth	r3, r3
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	76fb      	strb	r3, [r7, #27]
 8004dec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8004df2:	f107 0318 	add.w	r3, r7, #24
 8004df6:	2104      	movs	r1, #4
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff ff35 	bl	8004c68 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8004dfe:	232b      	movs	r3, #43	@ 0x2b
 8004e00:	743b      	strb	r3, [r7, #16]
 8004e02:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8004e06:	121b      	asrs	r3, r3, #8
 8004e08:	b21b      	sxth	r3, r3
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	747b      	strb	r3, [r7, #17]
 8004e0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	74bb      	strb	r3, [r7, #18]
 8004e14:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004e18:	121b      	asrs	r3, r3, #8
 8004e1a:	b21b      	sxth	r3, r3
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	74fb      	strb	r3, [r7, #19]
 8004e20:	8c3b      	ldrh	r3, [r7, #32]
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8004e26:	f107 0310 	add.w	r3, r7, #16
 8004e2a:	2104      	movs	r1, #4
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff ff1b 	bl	8004c68 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 8004e32:	232c      	movs	r3, #44	@ 0x2c
 8004e34:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8004e36:	f107 030c 	add.w	r3, r7, #12
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff ff13 	bl	8004c68 <LCD_WriteCommand>
  }
}
 8004e42:	bf00      	nop
 8004e44:	372c      	adds	r7, #44	@ 0x2c
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd90      	pop	{r4, r7, pc}
	...

08004e4c <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	80fb      	strh	r3, [r7, #6]
 8004e56:	460b      	mov	r3, r1
 8004e58:	80bb      	strh	r3, [r7, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 8004e5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	db31      	blt.n	8004eca <LCD_DrawPixel+0x7e>
 8004e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e6a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004e6e:	da2c      	bge.n	8004eca <LCD_DrawPixel+0x7e>
 8004e70:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	db28      	blt.n	8004eca <LCD_DrawPixel+0x7e>
     (y < 0) || (y > LCD_HEIGHT-1))
 8004e78:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e7c:	2bef      	cmp	r3, #239	@ 0xef
 8004e7e:	dc24      	bgt.n	8004eca <LCD_DrawPixel+0x7e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 8004e80:	887b      	ldrh	r3, [r7, #2]
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	733b      	strb	r3, [r7, #12]
 8004e8a:	887b      	ldrh	r3, [r7, #2]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 8004e90:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e94:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e98:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004e9c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004ea0:	f7ff ff7c 	bl	8004d9c <LCD_SetAddressWindow>

  LCD_PIN(LCD_DC,SET);
 8004ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed4 <LCD_DrawPixel+0x88>)
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 8004eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8004ed4 <LCD_DrawPixel+0x88>)
 8004eac:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8004eb0:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8004eb2:	f107 010c 	add.w	r1, r7, #12
 8004eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eba:	2202      	movs	r2, #2
 8004ebc:	4806      	ldr	r0, [pc, #24]	@ (8004ed8 <LCD_DrawPixel+0x8c>)
 8004ebe:	f003 ff32 	bl	8008d26 <HAL_SPI_Transmit>
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 8004ec2:	4b04      	ldr	r3, [pc, #16]	@ (8004ed4 <LCD_DrawPixel+0x88>)
 8004ec4:	2204      	movs	r2, #4
 8004ec6:	619a      	str	r2, [r3, #24]
 8004ec8:	e000      	b.n	8004ecc <LCD_DrawPixel+0x80>
    return;
 8004eca:	bf00      	nop
#endif
}
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40020400 	.word	0x40020400
 8004ed8:	20000438 	.word	0x20000438

08004edc <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b094      	sub	sp, #80	@ 0x50
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	d905      	bls.n	8004efa <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 8004eee:	1cbb      	adds	r3, r7, #2
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff feea 	bl	8004ccc <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 8004ef8:	e026      	b.n	8004f48 <LCD_FillPixels+0x6c>
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8004efa:	2300      	movs	r3, #0
 8004efc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004efe:	e009      	b.n	8004f14 <LCD_FillPixels+0x38>
      fill[t]=color;
 8004f00:	887a      	ldrh	r2, [r7, #2]
 8004f02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	3350      	adds	r3, #80	@ 0x50
 8004f08:	443b      	add	r3, r7
 8004f0a:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8004f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f10:	3301      	adds	r3, #1
 8004f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	bf28      	it	cs
 8004f1a:	2320      	movcs	r3, #32
 8004f1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d3ee      	bcc.n	8004f00 <LCD_FillPixels+0x24>
    while(pixels){                                                                                // Send 64 pixel blocks
 8004f22:	e00e      	b.n	8004f42 <LCD_FillPixels+0x66>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b20      	cmp	r3, #32
 8004f28:	bf28      	it	cs
 8004f2a:	2320      	movcs	r3, #32
 8004f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 8004f2e:	f107 0308 	add.w	r3, r7, #8
 8004f32:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff fec9 	bl	8004ccc <LCD_WriteData>
      pixels-=sz;
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1ed      	bne.n	8004f24 <LCD_FillPixels+0x48>
}
 8004f48:	bf00      	nop
 8004f4a:	3750      	adds	r7, #80	@ 0x50
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8004f50:	b590      	push	{r4, r7, lr}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4604      	mov	r4, r0
 8004f58:	4608      	mov	r0, r1
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	4623      	mov	r3, r4
 8004f60:	80fb      	strh	r3, [r7, #6]
 8004f62:	4603      	mov	r3, r0
 8004f64:	80bb      	strh	r3, [r7, #4]
 8004f66:	460b      	mov	r3, r1
 8004f68:	807b      	strh	r3, [r7, #2]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 8004f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f76:	d105      	bne.n	8004f84 <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 8004f78:	2100      	movs	r1, #0
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	f7ff fde8 	bl	8004b50 <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 8004f80:	2300      	movs	r3, #0
 8004f82:	e011      	b.n	8004fa8 <LCD_FillArea+0x58>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 8004f84:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004f88:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004f8c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004f90:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004f94:	f7ff ff02 	bl	8004d9c <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8004f98:	2101      	movs	r1, #1
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	f7ff fdd8 	bl	8004b50 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  LCD_PIN(LCD_DC,SET);
 8004fa0:	4b03      	ldr	r3, [pc, #12]	@ (8004fb0 <LCD_FillArea+0x60>)
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	619a      	str	r2, [r3, #24]
  return LCD_FillPixels;
 8004fa6:	4b03      	ldr	r3, [pc, #12]	@ (8004fb4 <LCD_FillArea+0x64>)
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd90      	pop	{r4, r7, pc}
 8004fb0:	40020400 	.word	0x40020400
 8004fb4:	08004edd 	.word	0x08004edd

08004fb8 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8004fb8:	b590      	push	{r4, r7, lr}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	4608      	mov	r0, r1
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4623      	mov	r3, r4
 8004fc8:	80fb      	strh	r3, [r7, #6]
 8004fca:	4603      	mov	r3, r0
 8004fcc:	80bb      	strh	r3, [r7, #4]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	807b      	strh	r3, [r7, #2]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8004fd6:	887a      	ldrh	r2, [r7, #2]
 8004fd8:	88fb      	ldrh	r3, [r7, #6]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	3301      	adds	r3, #1
 8004fde:	4619      	mov	r1, r3
 8004fe0:	883a      	ldrh	r2, [r7, #0]
 8004fe2:	88bb      	ldrh	r3, [r7, #4]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	fb01 f303 	mul.w	r3, r1, r3
 8004fec:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8004fee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004ff2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004ff6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004ffa:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004ffe:	f7ff fecd 	bl	8004d9c <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8005002:	2101      	movs	r1, #1
 8005004:	2000      	movs	r0, #0
 8005006:	f7ff fda3 	bl	8004b50 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 800500a:	8c3b      	ldrh	r3, [r7, #32]
 800500c:	4619      	mov	r1, r3
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f7ff ff64 	bl	8004edc <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 8005014:	2100      	movs	r1, #0
 8005016:	2001      	movs	r0, #1
 8005018:	f7ff fd9a 	bl	8004b50 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	bd90      	pop	{r4, r7, pc}

08005026 <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 8005026:	b590      	push	{r4, r7, lr}
 8005028:	b085      	sub	sp, #20
 800502a:	af00      	add	r7, sp, #0
 800502c:	4603      	mov	r3, r0
 800502e:	603a      	str	r2, [r7, #0]
 8005030:	80fb      	strh	r3, [r7, #6]
 8005032:	460b      	mov	r3, r1
 8005034:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	889b      	ldrh	r3, [r3, #4]
 800503a:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	88db      	ldrh	r3, [r3, #6]
 8005040:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005048:	d238      	bcs.n	80050bc <LCD_DrawImage+0x96>
 800504a:	88bb      	ldrh	r3, [r7, #4]
 800504c:	2bef      	cmp	r3, #239	@ 0xef
 800504e:	d835      	bhi.n	80050bc <LCD_DrawImage+0x96>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8005050:	88fa      	ldrh	r2, [r7, #6]
 8005052:	89fb      	ldrh	r3, [r7, #14]
 8005054:	4413      	add	r3, r2
 8005056:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800505a:	dc31      	bgt.n	80050c0 <LCD_DrawImage+0x9a>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 800505c:	88ba      	ldrh	r2, [r7, #4]
 800505e:	89bb      	ldrh	r3, [r7, #12]
 8005060:	4413      	add	r3, r2
 8005062:	2bf0      	cmp	r3, #240	@ 0xf0
 8005064:	dc2e      	bgt.n	80050c4 <LCD_DrawImage+0x9e>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	7a1b      	ldrb	r3, [r3, #8]
 800506a:	2b10      	cmp	r3, #16
 800506c:	d12c      	bne.n	80050c8 <LCD_DrawImage+0xa2>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 800506e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005072:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005076:	88fa      	ldrh	r2, [r7, #6]
 8005078:	89fb      	ldrh	r3, [r7, #14]
 800507a:	4413      	add	r3, r2
 800507c:	b29b      	uxth	r3, r3
 800507e:	3b01      	subs	r3, #1
 8005080:	b29b      	uxth	r3, r3
 8005082:	b21c      	sxth	r4, r3
 8005084:	88ba      	ldrh	r2, [r7, #4]
 8005086:	89bb      	ldrh	r3, [r7, #12]
 8005088:	4413      	add	r3, r2
 800508a:	b29b      	uxth	r3, r3
 800508c:	3b01      	subs	r3, #1
 800508e:	b29b      	uxth	r3, r3
 8005090:	b21b      	sxth	r3, r3
 8005092:	4622      	mov	r2, r4
 8005094:	f7ff fe82 	bl	8004d9c <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8005098:	2101      	movs	r1, #1
 800509a:	2001      	movs	r0, #1
 800509c:	f7ff fd58 	bl	8004b50 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	6818      	ldr	r0, [r3, #0]
 80050a4:	89fb      	ldrh	r3, [r7, #14]
 80050a6:	89ba      	ldrh	r2, [r7, #12]
 80050a8:	fb02 f303 	mul.w	r3, r2, r3
 80050ac:	4619      	mov	r1, r3
 80050ae:	f7ff fe0d 	bl	8004ccc <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80050b2:	2100      	movs	r1, #0
 80050b4:	2001      	movs	r0, #1
 80050b6:	f7ff fd4b 	bl	8004b50 <setDMAMemMode>
 80050ba:	e006      	b.n	80050ca <LCD_DrawImage+0xa4>
    return;
 80050bc:	bf00      	nop
 80050be:	e004      	b.n	80050ca <LCD_DrawImage+0xa4>
    return;
 80050c0:	bf00      	nop
 80050c2:	e002      	b.n	80050ca <LCD_DrawImage+0xa4>
    return;
 80050c4:	bf00      	nop
 80050c6:	e000      	b.n	80050ca <LCD_DrawImage+0xa4>
    return;
 80050c8:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd90      	pop	{r4, r7, pc}

080050d0 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 80050d0:	b590      	push	{r4, r7, lr}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	4604      	mov	r4, r0
 80050d8:	4608      	mov	r0, r1
 80050da:	4611      	mov	r1, r2
 80050dc:	461a      	mov	r2, r3
 80050de:	4623      	mov	r3, r4
 80050e0:	80fb      	strh	r3, [r7, #6]
 80050e2:	4603      	mov	r3, r0
 80050e4:	80bb      	strh	r3, [r7, #4]
 80050e6:	460b      	mov	r3, r1
 80050e8:	807b      	strh	r3, [r7, #2]
 80050ea:	4613      	mov	r3, r2
 80050ec:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 80050ee:	88fa      	ldrh	r2, [r7, #6]
 80050f0:	887b      	ldrh	r3, [r7, #2]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d10a      	bne.n	800510c <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 80050f6:	88ba      	ldrh	r2, [r7, #4]
 80050f8:	883b      	ldrh	r3, [r7, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d918      	bls.n	8005130 <LCD_DrawLine+0x60>
 80050fe:	88bb      	ldrh	r3, [r7, #4]
 8005100:	81bb      	strh	r3, [r7, #12]
 8005102:	883b      	ldrh	r3, [r7, #0]
 8005104:	80bb      	strh	r3, [r7, #4]
 8005106:	89bb      	ldrh	r3, [r7, #12]
 8005108:	803b      	strh	r3, [r7, #0]
 800510a:	e011      	b.n	8005130 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 800510c:	88ba      	ldrh	r2, [r7, #4]
 800510e:	883b      	ldrh	r3, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d10a      	bne.n	800512a <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8005114:	88fa      	ldrh	r2, [r7, #6]
 8005116:	887b      	ldrh	r3, [r7, #2]
 8005118:	429a      	cmp	r2, r3
 800511a:	d909      	bls.n	8005130 <LCD_DrawLine+0x60>
 800511c:	88fb      	ldrh	r3, [r7, #6]
 800511e:	81fb      	strh	r3, [r7, #14]
 8005120:	887b      	ldrh	r3, [r7, #2]
 8005122:	80fb      	strh	r3, [r7, #6]
 8005124:	89fb      	ldrh	r3, [r7, #14]
 8005126:	807b      	strh	r3, [r7, #2]
 8005128:	e002      	b.n	8005130 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 800512a:	f04f 33ff 	mov.w	r3, #4294967295
 800512e:	e009      	b.n	8005144 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8005130:	883c      	ldrh	r4, [r7, #0]
 8005132:	887a      	ldrh	r2, [r7, #2]
 8005134:	88b9      	ldrh	r1, [r7, #4]
 8005136:	88f8      	ldrh	r0, [r7, #6]
 8005138:	8c3b      	ldrh	r3, [r7, #32]
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	4623      	mov	r3, r4
 800513e:	f7ff ff3b 	bl	8004fb8 <LCD_Fill>
  return UG_RESULT_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	bd90      	pop	{r4, r7, pc}

0800514c <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	60ba      	str	r2, [r7, #8]
 8005154:	607b      	str	r3, [r7, #4]
 8005156:	4603      	mov	r3, r0
 8005158:	81fb      	strh	r3, [r7, #14]
 800515a:	460b      	mov	r3, r1
 800515c:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f006 fe0a 	bl	800bd78 <UG_FontSelect>
  UG_SetForecolor(color);
 8005164:	8b3b      	ldrh	r3, [r7, #24]
 8005166:	4618      	mov	r0, r3
 8005168:	f007 f886 	bl	800c278 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 800516c:	8bbb      	ldrh	r3, [r7, #28]
 800516e:	4618      	mov	r0, r3
 8005170:	f007 f894 	bl	800c29c <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8005174:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005178:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	4618      	mov	r0, r3
 8005180:	f006 ffe2 	bl	800c148 <UG_PutString>
}
 8005184:	bf00      	nop
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <LCD_setPower+0x14>
 800519c:	2329      	movs	r3, #41	@ 0x29
 800519e:	e000      	b.n	80051a2 <LCD_setPower+0x16>
 80051a0:	2328      	movs	r3, #40	@ 0x28
 80051a2:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80051a4:	f107 030c 	add.w	r3, r7, #12
 80051a8:	2100      	movs	r1, #0
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff fd5c 	bl	8004c68 <LCD_WriteCommand>
}
 80051b0:	bf00      	nop
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <LCD_Update>:

static void LCD_Update(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80051bc:	2100      	movs	r1, #0
 80051be:	2001      	movs	r0, #1
 80051c0:	f7ff fcc6 	bl	8004b50 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 80051c4:	bf00      	nop
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 80051ce:	4b28      	ldr	r3, [pc, #160]	@ (8005270 <LCD_init+0xa8>)
 80051d0:	2204      	movs	r2, #4
 80051d2:	619a      	str	r2, [r3, #24]
#endif
#ifdef LCD_RST
  LCD_PIN(LCD_RST,RESET);
 80051d4:	4b26      	ldr	r3, [pc, #152]	@ (8005270 <LCD_init+0xa8>)
 80051d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80051da:	619a      	str	r2, [r3, #24]
  HAL_Delay(1);
 80051dc:	2001      	movs	r0, #1
 80051de:	f000 f8c9 	bl	8005374 <HAL_Delay>
  LCD_PIN(LCD_RST,SET);
 80051e2:	4b23      	ldr	r3, [pc, #140]	@ (8005270 <LCD_init+0xa8>)
 80051e4:	2202      	movs	r2, #2
 80051e6:	619a      	str	r2, [r3, #24]
  HAL_Delay(200);
 80051e8:	20c8      	movs	r0, #200	@ 0xc8
 80051ea:	f000 f8c3 	bl	8005374 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 80051ee:	4921      	ldr	r1, [pc, #132]	@ (8005274 <LCD_init+0xac>)
 80051f0:	4821      	ldr	r0, [pc, #132]	@ (8005278 <LCD_init+0xb0>)
 80051f2:	f006 fd27 	bl	800bc44 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 80051f6:	4921      	ldr	r1, [pc, #132]	@ (800527c <LCD_init+0xb4>)
 80051f8:	2000      	movs	r0, #0
 80051fa:	f008 f8e3 	bl	800d3c4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 80051fe:	4920      	ldr	r1, [pc, #128]	@ (8005280 <LCD_init+0xb8>)
 8005200:	2001      	movs	r0, #1
 8005202:	f008 f8df 	bl	800d3c4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8005206:	491f      	ldr	r1, [pc, #124]	@ (8005284 <LCD_init+0xbc>)
 8005208:	2002      	movs	r0, #2
 800520a:	f008 f8db 	bl	800d3c4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 800520e:	491e      	ldr	r1, [pc, #120]	@ (8005288 <LCD_init+0xc0>)
 8005210:	2003      	movs	r0, #3
 8005212:	f008 f8d7 	bl	800d3c4 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8005216:	2000      	movs	r0, #0
 8005218:	f007 f852 	bl	800c2c0 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 800521c:	2000      	movs	r0, #0
 800521e:	f007 f863 	bl	800c2e8 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8005222:	2300      	movs	r3, #0
 8005224:	80fb      	strh	r3, [r7, #6]
 8005226:	e013      	b.n	8005250 <LCD_init+0x88>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8005228:	88fb      	ldrh	r3, [r7, #6]
 800522a:	3301      	adds	r3, #1
 800522c:	4a17      	ldr	r2, [pc, #92]	@ (800528c <LCD_init+0xc4>)
 800522e:	441a      	add	r2, r3
 8005230:	88fb      	ldrh	r3, [r7, #6]
 8005232:	4916      	ldr	r1, [pc, #88]	@ (800528c <LCD_init+0xc4>)
 8005234:	5ccb      	ldrb	r3, [r1, r3]
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f7ff fd15 	bl	8004c68 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	4a12      	ldr	r2, [pc, #72]	@ (800528c <LCD_init+0xc4>)
 8005242:	5cd3      	ldrb	r3, [r2, r3]
 8005244:	461a      	mov	r2, r3
 8005246:	88fb      	ldrh	r3, [r7, #6]
 8005248:	4413      	add	r3, r2
 800524a:	b29b      	uxth	r3, r3
 800524c:	3302      	adds	r3, #2
 800524e:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8005250:	88fb      	ldrh	r3, [r7, #6]
 8005252:	2b4b      	cmp	r3, #75	@ 0x4b
 8005254:	d9e8      	bls.n	8005228 <LCD_init+0x60>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8005256:	2000      	movs	r0, #0
 8005258:	f006 fd9e 	bl	800bd98 <UG_FillScreen>
  LCD_setPower(ENABLE);
 800525c:	2001      	movs	r0, #1
 800525e:	f7ff ff95 	bl	800518c <LCD_setPower>
  UG_Update();
 8005262:	f008 f8d1 	bl	800d408 <UG_Update>
}
 8005266:	bf00      	nop
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	40020400 	.word	0x40020400
 8005274:	20000054 	.word	0x20000054
 8005278:	20001200 	.word	0x20001200
 800527c:	080050d1 	.word	0x080050d1
 8005280:	08004fb9 	.word	0x08004fb9
 8005284:	08004f51 	.word	0x08004f51
 8005288:	08005027 	.word	0x08005027
 800528c:	0801380c 	.word	0x0801380c

08005290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005294:	4b0e      	ldr	r3, [pc, #56]	@ (80052d0 <HAL_Init+0x40>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a0d      	ldr	r2, [pc, #52]	@ (80052d0 <HAL_Init+0x40>)
 800529a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800529e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80052a0:	4b0b      	ldr	r3, [pc, #44]	@ (80052d0 <HAL_Init+0x40>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a0a      	ldr	r2, [pc, #40]	@ (80052d0 <HAL_Init+0x40>)
 80052a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80052aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052ac:	4b08      	ldr	r3, [pc, #32]	@ (80052d0 <HAL_Init+0x40>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a07      	ldr	r2, [pc, #28]	@ (80052d0 <HAL_Init+0x40>)
 80052b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052b8:	2003      	movs	r0, #3
 80052ba:	f000 fed3 	bl	8006064 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80052be:	200f      	movs	r0, #15
 80052c0:	f000 f808 	bl	80052d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80052c4:	f7fd fc6a 	bl	8002b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	40023c00 	.word	0x40023c00

080052d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80052dc:	4b12      	ldr	r3, [pc, #72]	@ (8005328 <HAL_InitTick+0x54>)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	4b12      	ldr	r3, [pc, #72]	@ (800532c <HAL_InitTick+0x58>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	4619      	mov	r1, r3
 80052e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80052ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80052ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 feeb 	bl	80060ce <HAL_SYSTICK_Config>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e00e      	b.n	8005320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b0f      	cmp	r3, #15
 8005306:	d80a      	bhi.n	800531e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005308:	2200      	movs	r2, #0
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	f04f 30ff 	mov.w	r0, #4294967295
 8005310:	f000 feb3 	bl	800607a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005314:	4a06      	ldr	r2, [pc, #24]	@ (8005330 <HAL_InitTick+0x5c>)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	e000      	b.n	8005320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
}
 8005320:	4618      	mov	r0, r3
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	20000028 	.word	0x20000028
 800532c:	20000064 	.word	0x20000064
 8005330:	20000060 	.word	0x20000060

08005334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005334:	b480      	push	{r7}
 8005336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005338:	4b06      	ldr	r3, [pc, #24]	@ (8005354 <HAL_IncTick+0x20>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	461a      	mov	r2, r3
 800533e:	4b06      	ldr	r3, [pc, #24]	@ (8005358 <HAL_IncTick+0x24>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4413      	add	r3, r2
 8005344:	4a04      	ldr	r2, [pc, #16]	@ (8005358 <HAL_IncTick+0x24>)
 8005346:	6013      	str	r3, [r2, #0]
}
 8005348:	bf00      	nop
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	20000064 	.word	0x20000064
 8005358:	20001274 	.word	0x20001274

0800535c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  return uwTick;
 8005360:	4b03      	ldr	r3, [pc, #12]	@ (8005370 <HAL_GetTick+0x14>)
 8005362:	681b      	ldr	r3, [r3, #0]
}
 8005364:	4618      	mov	r0, r3
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	20001274 	.word	0x20001274

08005374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800537c:	f7ff ffee 	bl	800535c <HAL_GetTick>
 8005380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538c:	d005      	beq.n	800539a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800538e:	4b0a      	ldr	r3, [pc, #40]	@ (80053b8 <HAL_Delay+0x44>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800539a:	bf00      	nop
 800539c:	f7ff ffde 	bl	800535c <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d8f7      	bhi.n	800539c <HAL_Delay+0x28>
  {
  }
}
 80053ac:	bf00      	nop
 80053ae:	bf00      	nop
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000064 	.word	0x20000064

080053bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e033      	b.n	800543a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d109      	bne.n	80053ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fd fc06 	bl	8002bec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d118      	bne.n	800542c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005402:	f023 0302 	bic.w	r3, r3, #2
 8005406:	f043 0202 	orr.w	r2, r3, #2
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fbd0 	bl	8005bb4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541e:	f023 0303 	bic.w	r3, r3, #3
 8005422:	f043 0201 	orr.w	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	641a      	str	r2, [r3, #64]	@ 0x40
 800542a:	e001      	b.n	8005430 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005438:	7bfb      	ldrb	r3, [r7, #15]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b086      	sub	sp, #24
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
 800544e:	2300      	movs	r3, #0
 8005450:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d049      	beq.n	800550c <HAL_ADC_IRQHandler+0xca>
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d046      	beq.n	800550c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005482:	f003 0310 	and.w	r3, r3, #16
 8005486:	2b00      	cmp	r3, #0
 8005488:	d105      	bne.n	8005496 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800548e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d12b      	bne.n	80054fc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d127      	bne.n	80054fc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d006      	beq.n	80054c8 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d119      	bne.n	80054fc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0220 	bic.w	r2, r2, #32
 80054d6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d105      	bne.n	80054fc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f4:	f043 0201 	orr.w	r2, r3, #1
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7fc fbbf 	bl	8001c80 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f06f 0212 	mvn.w	r2, #18
 800550a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800551a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d057      	beq.n	80055d2 <HAL_ADC_IRQHandler+0x190>
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d054      	beq.n	80055d2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	2b00      	cmp	r3, #0
 8005532:	d105      	bne.n	8005540 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005538:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d139      	bne.n	80055c2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005554:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8005558:	2b00      	cmp	r3, #0
 800555a:	d006      	beq.n	800556a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8005566:	2b00      	cmp	r3, #0
 8005568:	d12b      	bne.n	80055c2 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8005574:	2b00      	cmp	r3, #0
 8005576:	d124      	bne.n	80055c2 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8005582:	2b00      	cmp	r3, #0
 8005584:	d11d      	bne.n	80055c2 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800558a:	2b00      	cmp	r3, #0
 800558c:	d119      	bne.n	80055c2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800559c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d105      	bne.n	80055c2 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ba:	f043 0201 	orr.w	r2, r3, #1
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fc74 	bl	8005eb0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 020c 	mvn.w	r2, #12
 80055d0:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d017      	beq.n	8005618 <HAL_ADC_IRQHandler+0x1d6>
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d014      	beq.n	8005618 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d10d      	bne.n	8005618 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005600:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 f98c 	bl	8005926 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f06f 0201 	mvn.w	r2, #1
 8005616:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005626:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d015      	beq.n	800565a <HAL_ADC_IRQHandler+0x218>
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d012      	beq.n	800565a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005638:	f043 0202 	orr.w	r2, r3, #2
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f06f 0220 	mvn.w	r2, #32
 8005648:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f975 	bl	800593a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0220 	mvn.w	r2, #32
 8005658:	601a      	str	r2, [r3, #0]
  }
}
 800565a:	bf00      	nop
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
	...

08005664 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_ADC_Start_DMA+0x1e>
 800567e:	2302      	movs	r3, #2
 8005680:	e0ce      	b.n	8005820 <HAL_ADC_Start_DMA+0x1bc>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f003 0301 	and.w	r3, r3, #1
 8005694:	2b01      	cmp	r3, #1
 8005696:	d018      	beq.n	80056ca <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80056a8:	4b5f      	ldr	r3, [pc, #380]	@ (8005828 <HAL_ADC_Start_DMA+0x1c4>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a5f      	ldr	r2, [pc, #380]	@ (800582c <HAL_ADC_Start_DMA+0x1c8>)
 80056ae:	fba2 2303 	umull	r2, r3, r2, r3
 80056b2:	0c9a      	lsrs	r2, r3, #18
 80056b4:	4613      	mov	r3, r2
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	4413      	add	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80056bc:	e002      	b.n	80056c4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	3b01      	subs	r3, #1
 80056c2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1f9      	bne.n	80056be <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056d8:	d107      	bne.n	80056ea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056e8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	f040 8086 	bne.w	8005806 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005702:	f023 0301 	bic.w	r3, r3, #1
 8005706:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005718:	2b00      	cmp	r3, #0
 800571a:	d007      	beq.n	800572c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005720:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005724:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005730:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005738:	d106      	bne.n	8005748 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800573e:	f023 0206 	bic.w	r2, r3, #6
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	645a      	str	r2, [r3, #68]	@ 0x44
 8005746:	e002      	b.n	800574e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005756:	4b36      	ldr	r3, [pc, #216]	@ (8005830 <HAL_ADC_Start_DMA+0x1cc>)
 8005758:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575e:	4a35      	ldr	r2, [pc, #212]	@ (8005834 <HAL_ADC_Start_DMA+0x1d0>)
 8005760:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005766:	4a34      	ldr	r2, [pc, #208]	@ (8005838 <HAL_ADC_Start_DMA+0x1d4>)
 8005768:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576e:	4a33      	ldr	r2, [pc, #204]	@ (800583c <HAL_ADC_Start_DMA+0x1d8>)
 8005770:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800577a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800578a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800579a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	334c      	adds	r3, #76	@ 0x4c
 80057a6:	4619      	mov	r1, r3
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f000 fd4a 	bl	8006244 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 031f 	and.w	r3, r3, #31
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10f      	bne.n	80057dc <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d129      	bne.n	800581e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80057d8:	609a      	str	r2, [r3, #8]
 80057da:	e020      	b.n	800581e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a17      	ldr	r2, [pc, #92]	@ (8005840 <HAL_ADC_Start_DMA+0x1dc>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d11b      	bne.n	800581e <HAL_ADC_Start_DMA+0x1ba>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d114      	bne.n	800581e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005802:	609a      	str	r2, [r3, #8]
 8005804:	e00b      	b.n	800581e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580a:	f043 0210 	orr.w	r2, r3, #16
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005816:	f043 0201 	orr.w	r2, r3, #1
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20000028 	.word	0x20000028
 800582c:	431bde83 	.word	0x431bde83
 8005830:	40012300 	.word	0x40012300
 8005834:	08005dad 	.word	0x08005dad
 8005838:	08005e67 	.word	0x08005e67
 800583c:	08005e83 	.word	0x08005e83
 8005840:	40012000 	.word	0x40012000

08005844 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800584c:	2300      	movs	r3, #0
 800584e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005856:	2b01      	cmp	r3, #1
 8005858:	d101      	bne.n	800585e <HAL_ADC_Stop_DMA+0x1a>
 800585a:	2302      	movs	r3, #2
 800585c:	e048      	b.n	80058f0 <HAL_ADC_Stop_DMA+0xac>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0201 	bic.w	r2, r2, #1
 8005874:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d130      	bne.n	80058e6 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005892:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005898:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d10f      	bne.n	80058c2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fd24 	bl	80062f4 <HAL_DMA_Abort>
 80058ac:	4603      	mov	r3, r0
 80058ae:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80058d0:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80058da:	f023 0301 	bic.w	r3, r3, #1
 80058de:	f043 0201 	orr.w	r2, r3, #1
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005906:	4618      	mov	r0, r3
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
	...

08005950 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_ADC_ConfigChannel+0x1c>
 8005968:	2302      	movs	r3, #2
 800596a:	e113      	b.n	8005b94 <HAL_ADC_ConfigChannel+0x244>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b09      	cmp	r3, #9
 800597a:	d925      	bls.n	80059c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68d9      	ldr	r1, [r3, #12]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	b29b      	uxth	r3, r3
 8005988:	461a      	mov	r2, r3
 800598a:	4613      	mov	r3, r2
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	4413      	add	r3, r2
 8005990:	3b1e      	subs	r3, #30
 8005992:	2207      	movs	r2, #7
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	43da      	mvns	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	400a      	ands	r2, r1
 80059a0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68d9      	ldr	r1, [r3, #12]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	4618      	mov	r0, r3
 80059b4:	4603      	mov	r3, r0
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	4403      	add	r3, r0
 80059ba:	3b1e      	subs	r3, #30
 80059bc:	409a      	lsls	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	60da      	str	r2, [r3, #12]
 80059c6:	e022      	b.n	8005a0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6919      	ldr	r1, [r3, #16]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	4613      	mov	r3, r2
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	4413      	add	r3, r2
 80059dc:	2207      	movs	r2, #7
 80059de:	fa02 f303 	lsl.w	r3, r2, r3
 80059e2:	43da      	mvns	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	400a      	ands	r2, r1
 80059ea:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6919      	ldr	r1, [r3, #16]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	4618      	mov	r0, r3
 80059fe:	4603      	mov	r3, r0
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	4403      	add	r3, r0
 8005a04:	409a      	lsls	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	2b06      	cmp	r3, #6
 8005a14:	d824      	bhi.n	8005a60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	4613      	mov	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	3b05      	subs	r3, #5
 8005a28:	221f      	movs	r2, #31
 8005a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a2e:	43da      	mvns	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	400a      	ands	r2, r1
 8005a36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	4618      	mov	r0, r3
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	3b05      	subs	r3, #5
 8005a52:	fa00 f203 	lsl.w	r2, r0, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a5e:	e04c      	b.n	8005afa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2b0c      	cmp	r3, #12
 8005a66:	d824      	bhi.n	8005ab2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	4613      	mov	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	3b23      	subs	r3, #35	@ 0x23
 8005a7a:	221f      	movs	r2, #31
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	43da      	mvns	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	400a      	ands	r2, r1
 8005a88:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	4618      	mov	r0, r3
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	3b23      	subs	r3, #35	@ 0x23
 8005aa4:	fa00 f203 	lsl.w	r2, r0, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ab0:	e023      	b.n	8005afa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	3b41      	subs	r3, #65	@ 0x41
 8005ac4:	221f      	movs	r2, #31
 8005ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aca:	43da      	mvns	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	400a      	ands	r2, r1
 8005ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	3b41      	subs	r3, #65	@ 0x41
 8005aee:	fa00 f203 	lsl.w	r2, r0, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005afa:	4b29      	ldr	r3, [pc, #164]	@ (8005ba0 <HAL_ADC_ConfigChannel+0x250>)
 8005afc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a28      	ldr	r2, [pc, #160]	@ (8005ba4 <HAL_ADC_ConfigChannel+0x254>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d10f      	bne.n	8005b28 <HAL_ADC_ConfigChannel+0x1d8>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b12      	cmp	r3, #18
 8005b0e:	d10b      	bne.n	8005b28 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba4 <HAL_ADC_ConfigChannel+0x254>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d12b      	bne.n	8005b8a <HAL_ADC_ConfigChannel+0x23a>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a1c      	ldr	r2, [pc, #112]	@ (8005ba8 <HAL_ADC_ConfigChannel+0x258>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d003      	beq.n	8005b44 <HAL_ADC_ConfigChannel+0x1f4>
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b11      	cmp	r3, #17
 8005b42:	d122      	bne.n	8005b8a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a11      	ldr	r2, [pc, #68]	@ (8005ba8 <HAL_ADC_ConfigChannel+0x258>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d111      	bne.n	8005b8a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005b66:	4b11      	ldr	r3, [pc, #68]	@ (8005bac <HAL_ADC_ConfigChannel+0x25c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a11      	ldr	r2, [pc, #68]	@ (8005bb0 <HAL_ADC_ConfigChannel+0x260>)
 8005b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b70:	0c9a      	lsrs	r2, r3, #18
 8005b72:	4613      	mov	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005b7c:	e002      	b.n	8005b84 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1f9      	bne.n	8005b7e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	40012300 	.word	0x40012300
 8005ba4:	40012000 	.word	0x40012000
 8005ba8:	10000012 	.word	0x10000012
 8005bac:	20000028 	.word	0x20000028
 8005bb0:	431bde83 	.word	0x431bde83

08005bb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bbc:	4b79      	ldr	r3, [pc, #484]	@ (8005da4 <ADC_Init+0x1f0>)
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005be8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6859      	ldr	r1, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	021a      	lsls	r2, r3, #8
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005c0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6859      	ldr	r1, [r3, #4]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689a      	ldr	r2, [r3, #8]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689a      	ldr	r2, [r3, #8]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6899      	ldr	r1, [r3, #8]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68da      	ldr	r2, [r3, #12]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c46:	4a58      	ldr	r2, [pc, #352]	@ (8005da8 <ADC_Init+0x1f4>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d022      	beq.n	8005c92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689a      	ldr	r2, [r3, #8]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005c5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6899      	ldr	r1, [r3, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005c7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6899      	ldr	r1, [r3, #8]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	609a      	str	r2, [r3, #8]
 8005c90:	e00f      	b.n	8005cb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ca0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005cb0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 0202 	bic.w	r2, r2, #2
 8005cc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6899      	ldr	r1, [r3, #8]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	7e1b      	ldrb	r3, [r3, #24]
 8005ccc:	005a      	lsls	r2, r3, #1
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01b      	beq.n	8005d18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cee:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005cfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6859      	ldr	r1, [r3, #4]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	035a      	lsls	r2, r3, #13
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	605a      	str	r2, [r3, #4]
 8005d16:	e007      	b.n	8005d28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d26:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005d36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	051a      	lsls	r2, r3, #20
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005d5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6899      	ldr	r1, [r3, #8]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005d6a:	025a      	lsls	r2, r3, #9
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689a      	ldr	r2, [r3, #8]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6899      	ldr	r1, [r3, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	029a      	lsls	r2, r3, #10
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	609a      	str	r2, [r3, #8]
}
 8005d98:	bf00      	nop
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	40012300 	.word	0x40012300
 8005da8:	0f000001 	.word	0x0f000001

08005dac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d13c      	bne.n	8005e40 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d12b      	bne.n	8005e38 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d127      	bne.n	8005e38 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dee:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d006      	beq.n	8005e04 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d119      	bne.n	8005e38 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0220 	bic.w	r2, r2, #32
 8005e12:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d105      	bne.n	8005e38 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e30:	f043 0201 	orr.w	r2, r3, #1
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f7fb ff21 	bl	8001c80 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005e3e:	e00e      	b.n	8005e5e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d003      	beq.n	8005e54 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f7ff fd74 	bl	800593a <HAL_ADC_ErrorCallback>
}
 8005e52:	e004      	b.n	8005e5e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	4798      	blx	r3
}
 8005e5e:	bf00      	nop
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e72:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f7ff fd4c 	bl	8005912 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e7a:	bf00      	nop
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e8e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2240      	movs	r2, #64	@ 0x40
 8005e94:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9a:	f043 0204 	orr.w	r2, r3, #4
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f7ff fd49 	bl	800593a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ea8:	bf00      	nop
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8005f08 <__NVIC_SetPriorityGrouping+0x44>)
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005eec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ef6:	4a04      	ldr	r2, [pc, #16]	@ (8005f08 <__NVIC_SetPriorityGrouping+0x44>)
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	60d3      	str	r3, [r2, #12]
}
 8005efc:	bf00      	nop
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	e000ed00 	.word	0xe000ed00

08005f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f10:	4b04      	ldr	r3, [pc, #16]	@ (8005f24 <__NVIC_GetPriorityGrouping+0x18>)
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	0a1b      	lsrs	r3, r3, #8
 8005f16:	f003 0307 	and.w	r3, r3, #7
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	e000ed00 	.word	0xe000ed00

08005f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	4603      	mov	r3, r0
 8005f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	db0b      	blt.n	8005f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005f3a:	79fb      	ldrb	r3, [r7, #7]
 8005f3c:	f003 021f 	and.w	r2, r3, #31
 8005f40:	4907      	ldr	r1, [pc, #28]	@ (8005f60 <__NVIC_EnableIRQ+0x38>)
 8005f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	2001      	movs	r0, #1
 8005f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8005f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	e000e100 	.word	0xe000e100

08005f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	6039      	str	r1, [r7, #0]
 8005f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	db0a      	blt.n	8005f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	b2da      	uxtb	r2, r3
 8005f7c:	490c      	ldr	r1, [pc, #48]	@ (8005fb0 <__NVIC_SetPriority+0x4c>)
 8005f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f82:	0112      	lsls	r2, r2, #4
 8005f84:	b2d2      	uxtb	r2, r2
 8005f86:	440b      	add	r3, r1
 8005f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f8c:	e00a      	b.n	8005fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	4908      	ldr	r1, [pc, #32]	@ (8005fb4 <__NVIC_SetPriority+0x50>)
 8005f94:	79fb      	ldrb	r3, [r7, #7]
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	3b04      	subs	r3, #4
 8005f9c:	0112      	lsls	r2, r2, #4
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	761a      	strb	r2, [r3, #24]
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	e000e100 	.word	0xe000e100
 8005fb4:	e000ed00 	.word	0xe000ed00

08005fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b089      	sub	sp, #36	@ 0x24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	f1c3 0307 	rsb	r3, r3, #7
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	bf28      	it	cs
 8005fd6:	2304      	movcs	r3, #4
 8005fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	2b06      	cmp	r3, #6
 8005fe0:	d902      	bls.n	8005fe8 <NVIC_EncodePriority+0x30>
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	3b03      	subs	r3, #3
 8005fe6:	e000      	b.n	8005fea <NVIC_EncodePriority+0x32>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fec:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff6:	43da      	mvns	r2, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	401a      	ands	r2, r3
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006000:	f04f 31ff 	mov.w	r1, #4294967295
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	fa01 f303 	lsl.w	r3, r1, r3
 800600a:	43d9      	mvns	r1, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006010:	4313      	orrs	r3, r2
         );
}
 8006012:	4618      	mov	r0, r3
 8006014:	3724      	adds	r7, #36	@ 0x24
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
	...

08006020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3b01      	subs	r3, #1
 800602c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006030:	d301      	bcc.n	8006036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006032:	2301      	movs	r3, #1
 8006034:	e00f      	b.n	8006056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006036:	4a0a      	ldr	r2, [pc, #40]	@ (8006060 <SysTick_Config+0x40>)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3b01      	subs	r3, #1
 800603c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800603e:	210f      	movs	r1, #15
 8006040:	f04f 30ff 	mov.w	r0, #4294967295
 8006044:	f7ff ff8e 	bl	8005f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006048:	4b05      	ldr	r3, [pc, #20]	@ (8006060 <SysTick_Config+0x40>)
 800604a:	2200      	movs	r2, #0
 800604c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800604e:	4b04      	ldr	r3, [pc, #16]	@ (8006060 <SysTick_Config+0x40>)
 8006050:	2207      	movs	r2, #7
 8006052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3708      	adds	r7, #8
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	e000e010 	.word	0xe000e010

08006064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7ff ff29 	bl	8005ec4 <__NVIC_SetPriorityGrouping>
}
 8006072:	bf00      	nop
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}

0800607a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800607a:	b580      	push	{r7, lr}
 800607c:	b086      	sub	sp, #24
 800607e:	af00      	add	r7, sp, #0
 8006080:	4603      	mov	r3, r0
 8006082:	60b9      	str	r1, [r7, #8]
 8006084:	607a      	str	r2, [r7, #4]
 8006086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800608c:	f7ff ff3e 	bl	8005f0c <__NVIC_GetPriorityGrouping>
 8006090:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	68b9      	ldr	r1, [r7, #8]
 8006096:	6978      	ldr	r0, [r7, #20]
 8006098:	f7ff ff8e 	bl	8005fb8 <NVIC_EncodePriority>
 800609c:	4602      	mov	r2, r0
 800609e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060a2:	4611      	mov	r1, r2
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff ff5d 	bl	8005f64 <__NVIC_SetPriority>
}
 80060aa:	bf00      	nop
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	4603      	mov	r3, r0
 80060ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff ff31 	bl	8005f28 <__NVIC_EnableIRQ>
}
 80060c6:	bf00      	nop
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b082      	sub	sp, #8
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff ffa2 	bl	8006020 <SysTick_Config>
 80060dc:	4603      	mov	r3, r0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
	...

080060e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80060f4:	f7ff f932 	bl	800535c <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e099      	b.n	8006238 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0201 	bic.w	r2, r2, #1
 8006122:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006124:	e00f      	b.n	8006146 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006126:	f7ff f919 	bl	800535c <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	2b05      	cmp	r3, #5
 8006132:	d908      	bls.n	8006146 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2220      	movs	r2, #32
 8006138:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2203      	movs	r2, #3
 800613e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e078      	b.n	8006238 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0301 	and.w	r3, r3, #1
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1e8      	bne.n	8006126 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	4b38      	ldr	r3, [pc, #224]	@ (8006240 <HAL_DMA_Init+0x158>)
 8006160:	4013      	ands	r3, r2
 8006162:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006172:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800617e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800618a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	4313      	orrs	r3, r2
 8006196:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619c:	2b04      	cmp	r3, #4
 800619e:	d107      	bne.n	80061b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a8:	4313      	orrs	r3, r2
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	f023 0307 	bic.w	r3, r3, #7
 80061c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d6:	2b04      	cmp	r3, #4
 80061d8:	d117      	bne.n	800620a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00e      	beq.n	800620a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 faed 	bl	80067cc <DMA_CheckFifoParam>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d008      	beq.n	800620a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2240      	movs	r2, #64	@ 0x40
 80061fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006206:	2301      	movs	r3, #1
 8006208:	e016      	b.n	8006238 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 faa4 	bl	8006760 <DMA_CalcBaseAndBitshift>
 8006218:	4603      	mov	r3, r0
 800621a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006220:	223f      	movs	r2, #63	@ 0x3f
 8006222:	409a      	lsls	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	f010803f 	.word	0xf010803f

08006244 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b086      	sub	sp, #24
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800625a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006262:	2b01      	cmp	r3, #1
 8006264:	d101      	bne.n	800626a <HAL_DMA_Start_IT+0x26>
 8006266:	2302      	movs	r3, #2
 8006268:	e040      	b.n	80062ec <HAL_DMA_Start_IT+0xa8>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b01      	cmp	r3, #1
 800627c:	d12f      	bne.n	80062de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2202      	movs	r2, #2
 8006282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	68b9      	ldr	r1, [r7, #8]
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 fa36 	bl	8006704 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800629c:	223f      	movs	r2, #63	@ 0x3f
 800629e:	409a      	lsls	r2, r3
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f042 0216 	orr.w	r2, r2, #22
 80062b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d007      	beq.n	80062cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0208 	orr.w	r2, r2, #8
 80062ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0201 	orr.w	r2, r2, #1
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	e005      	b.n	80062ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80062e6:	2302      	movs	r3, #2
 80062e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006300:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006302:	f7ff f82b 	bl	800535c <HAL_GetTick>
 8006306:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d008      	beq.n	8006326 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2280      	movs	r2, #128	@ 0x80
 8006318:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e052      	b.n	80063cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0216 	bic.w	r2, r2, #22
 8006334:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	695a      	ldr	r2, [r3, #20]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006344:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	d103      	bne.n	8006356 <HAL_DMA_Abort+0x62>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006352:	2b00      	cmp	r3, #0
 8006354:	d007      	beq.n	8006366 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0208 	bic.w	r2, r2, #8
 8006364:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 0201 	bic.w	r2, r2, #1
 8006374:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006376:	e013      	b.n	80063a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006378:	f7fe fff0 	bl	800535c <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b05      	cmp	r3, #5
 8006384:	d90c      	bls.n	80063a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2220      	movs	r2, #32
 800638a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2203      	movs	r2, #3
 8006390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e015      	b.n	80063cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1e4      	bne.n	8006378 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063b2:	223f      	movs	r2, #63	@ 0x3f
 80063b4:	409a      	lsls	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063e0:	4b8e      	ldr	r3, [pc, #568]	@ (800661c <HAL_DMA_IRQHandler+0x248>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a8e      	ldr	r2, [pc, #568]	@ (8006620 <HAL_DMA_IRQHandler+0x24c>)
 80063e6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ea:	0a9b      	lsrs	r3, r3, #10
 80063ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063fe:	2208      	movs	r2, #8
 8006400:	409a      	lsls	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4013      	ands	r3, r2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d01a      	beq.n	8006440 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b00      	cmp	r3, #0
 8006416:	d013      	beq.n	8006440 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f022 0204 	bic.w	r2, r2, #4
 8006426:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800642c:	2208      	movs	r2, #8
 800642e:	409a      	lsls	r2, r3
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006438:	f043 0201 	orr.w	r2, r3, #1
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006444:	2201      	movs	r2, #1
 8006446:	409a      	lsls	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4013      	ands	r3, r2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d012      	beq.n	8006476 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00b      	beq.n	8006476 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006462:	2201      	movs	r2, #1
 8006464:	409a      	lsls	r2, r3
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800646e:	f043 0202 	orr.w	r2, r3, #2
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800647a:	2204      	movs	r2, #4
 800647c:	409a      	lsls	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4013      	ands	r3, r2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d012      	beq.n	80064ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00b      	beq.n	80064ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006498:	2204      	movs	r2, #4
 800649a:	409a      	lsls	r2, r3
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a4:	f043 0204 	orr.w	r2, r3, #4
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064b0:	2210      	movs	r2, #16
 80064b2:	409a      	lsls	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4013      	ands	r3, r2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d043      	beq.n	8006544 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d03c      	beq.n	8006544 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064ce:	2210      	movs	r2, #16
 80064d0:	409a      	lsls	r2, r3
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d018      	beq.n	8006516 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d108      	bne.n	8006504 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d024      	beq.n	8006544 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	4798      	blx	r3
 8006502:	e01f      	b.n	8006544 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006508:	2b00      	cmp	r3, #0
 800650a:	d01b      	beq.n	8006544 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	4798      	blx	r3
 8006514:	e016      	b.n	8006544 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006520:	2b00      	cmp	r3, #0
 8006522:	d107      	bne.n	8006534 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0208 	bic.w	r2, r2, #8
 8006532:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006548:	2220      	movs	r2, #32
 800654a:	409a      	lsls	r2, r3
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4013      	ands	r3, r2
 8006550:	2b00      	cmp	r3, #0
 8006552:	f000 808f 	beq.w	8006674 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 8087 	beq.w	8006674 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800656a:	2220      	movs	r2, #32
 800656c:	409a      	lsls	r2, r3
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b05      	cmp	r3, #5
 800657c:	d136      	bne.n	80065ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 0216 	bic.w	r2, r2, #22
 800658c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	695a      	ldr	r2, [r3, #20]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800659c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d103      	bne.n	80065ae <HAL_DMA_IRQHandler+0x1da>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d007      	beq.n	80065be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 0208 	bic.w	r2, r2, #8
 80065bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065c2:	223f      	movs	r2, #63	@ 0x3f
 80065c4:	409a      	lsls	r2, r3
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d07e      	beq.n	80066e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4798      	blx	r3
        }
        return;
 80065ea:	e079      	b.n	80066e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d01d      	beq.n	8006636 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10d      	bne.n	8006624 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800660c:	2b00      	cmp	r3, #0
 800660e:	d031      	beq.n	8006674 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	4798      	blx	r3
 8006618:	e02c      	b.n	8006674 <HAL_DMA_IRQHandler+0x2a0>
 800661a:	bf00      	nop
 800661c:	20000028 	.word	0x20000028
 8006620:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d023      	beq.n	8006674 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	4798      	blx	r3
 8006634:	e01e      	b.n	8006674 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10f      	bne.n	8006664 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0210 	bic.w	r2, r2, #16
 8006652:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006678:	2b00      	cmp	r3, #0
 800667a:	d032      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d022      	beq.n	80066ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2205      	movs	r2, #5
 800668c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0201 	bic.w	r2, r2, #1
 800669e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	3301      	adds	r3, #1
 80066a4:	60bb      	str	r3, [r7, #8]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d307      	bcc.n	80066bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f2      	bne.n	80066a0 <HAL_DMA_IRQHandler+0x2cc>
 80066ba:	e000      	b.n	80066be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80066bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d005      	beq.n	80066e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	4798      	blx	r3
 80066de:	e000      	b.n	80066e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80066e0:	bf00      	nop
    }
  }
}
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80066f6:	b2db      	uxtb	r3, r3
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
 8006710:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006720:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	2b40      	cmp	r3, #64	@ 0x40
 8006730:	d108      	bne.n	8006744 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006742:	e007      	b.n	8006754 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	60da      	str	r2, [r3, #12]
}
 8006754:	bf00      	nop
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	3b10      	subs	r3, #16
 8006770:	4a14      	ldr	r2, [pc, #80]	@ (80067c4 <DMA_CalcBaseAndBitshift+0x64>)
 8006772:	fba2 2303 	umull	r2, r3, r2, r3
 8006776:	091b      	lsrs	r3, r3, #4
 8006778:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800677a:	4a13      	ldr	r2, [pc, #76]	@ (80067c8 <DMA_CalcBaseAndBitshift+0x68>)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2b03      	cmp	r3, #3
 800678c:	d909      	bls.n	80067a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006796:	f023 0303 	bic.w	r3, r3, #3
 800679a:	1d1a      	adds	r2, r3, #4
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	659a      	str	r2, [r3, #88]	@ 0x58
 80067a0:	e007      	b.n	80067b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80067aa:	f023 0303 	bic.w	r3, r3, #3
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	aaaaaaab 	.word	0xaaaaaaab
 80067c8:	08013858 	.word	0x08013858

080067cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d11f      	bne.n	8006826 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2b03      	cmp	r3, #3
 80067ea:	d856      	bhi.n	800689a <DMA_CheckFifoParam+0xce>
 80067ec:	a201      	add	r2, pc, #4	@ (adr r2, 80067f4 <DMA_CheckFifoParam+0x28>)
 80067ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f2:	bf00      	nop
 80067f4:	08006805 	.word	0x08006805
 80067f8:	08006817 	.word	0x08006817
 80067fc:	08006805 	.word	0x08006805
 8006800:	0800689b 	.word	0x0800689b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006808:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d046      	beq.n	800689e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006814:	e043      	b.n	800689e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800681a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800681e:	d140      	bne.n	80068a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006824:	e03d      	b.n	80068a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800682e:	d121      	bne.n	8006874 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	2b03      	cmp	r3, #3
 8006834:	d837      	bhi.n	80068a6 <DMA_CheckFifoParam+0xda>
 8006836:	a201      	add	r2, pc, #4	@ (adr r2, 800683c <DMA_CheckFifoParam+0x70>)
 8006838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683c:	0800684d 	.word	0x0800684d
 8006840:	08006853 	.word	0x08006853
 8006844:	0800684d 	.word	0x0800684d
 8006848:	08006865 	.word	0x08006865
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	73fb      	strb	r3, [r7, #15]
      break;
 8006850:	e030      	b.n	80068b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006856:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d025      	beq.n	80068aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006862:	e022      	b.n	80068aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006868:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800686c:	d11f      	bne.n	80068ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006872:	e01c      	b.n	80068ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b02      	cmp	r3, #2
 8006878:	d903      	bls.n	8006882 <DMA_CheckFifoParam+0xb6>
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2b03      	cmp	r3, #3
 800687e:	d003      	beq.n	8006888 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006880:	e018      	b.n	80068b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	73fb      	strb	r3, [r7, #15]
      break;
 8006886:	e015      	b.n	80068b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00e      	beq.n	80068b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	73fb      	strb	r3, [r7, #15]
      break;
 8006898:	e00b      	b.n	80068b2 <DMA_CheckFifoParam+0xe6>
      break;
 800689a:	bf00      	nop
 800689c:	e00a      	b.n	80068b4 <DMA_CheckFifoParam+0xe8>
      break;
 800689e:	bf00      	nop
 80068a0:	e008      	b.n	80068b4 <DMA_CheckFifoParam+0xe8>
      break;
 80068a2:	bf00      	nop
 80068a4:	e006      	b.n	80068b4 <DMA_CheckFifoParam+0xe8>
      break;
 80068a6:	bf00      	nop
 80068a8:	e004      	b.n	80068b4 <DMA_CheckFifoParam+0xe8>
      break;
 80068aa:	bf00      	nop
 80068ac:	e002      	b.n	80068b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80068ae:	bf00      	nop
 80068b0:	e000      	b.n	80068b4 <DMA_CheckFifoParam+0xe8>
      break;
 80068b2:	bf00      	nop
    }
  } 
  
  return status; 
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop

080068c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b089      	sub	sp, #36	@ 0x24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80068d2:	2300      	movs	r3, #0
 80068d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80068da:	2300      	movs	r3, #0
 80068dc:	61fb      	str	r3, [r7, #28]
 80068de:	e159      	b.n	8006b94 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80068e0:	2201      	movs	r2, #1
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	fa02 f303 	lsl.w	r3, r2, r3
 80068e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4013      	ands	r3, r2
 80068f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	f040 8148 	bne.w	8006b8e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	2b01      	cmp	r3, #1
 8006908:	d005      	beq.n	8006916 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006912:	2b02      	cmp	r3, #2
 8006914:	d130      	bne.n	8006978 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	2203      	movs	r2, #3
 8006922:	fa02 f303 	lsl.w	r3, r2, r3
 8006926:	43db      	mvns	r3, r3
 8006928:	69ba      	ldr	r2, [r7, #24]
 800692a:	4013      	ands	r3, r2
 800692c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	68da      	ldr	r2, [r3, #12]
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	fa02 f303 	lsl.w	r3, r2, r3
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	4313      	orrs	r3, r2
 800693e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800694c:	2201      	movs	r2, #1
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	fa02 f303 	lsl.w	r3, r2, r3
 8006954:	43db      	mvns	r3, r3
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	4013      	ands	r3, r2
 800695a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	091b      	lsrs	r3, r3, #4
 8006962:	f003 0201 	and.w	r2, r3, #1
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	fa02 f303 	lsl.w	r3, r2, r3
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	4313      	orrs	r3, r2
 8006970:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f003 0303 	and.w	r3, r3, #3
 8006980:	2b03      	cmp	r3, #3
 8006982:	d017      	beq.n	80069b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	005b      	lsls	r3, r3, #1
 800698e:	2203      	movs	r2, #3
 8006990:	fa02 f303 	lsl.w	r3, r2, r3
 8006994:	43db      	mvns	r3, r3
 8006996:	69ba      	ldr	r2, [r7, #24]
 8006998:	4013      	ands	r3, r2
 800699a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	fa02 f303 	lsl.w	r3, r2, r3
 80069a8:	69ba      	ldr	r2, [r7, #24]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f003 0303 	and.w	r3, r3, #3
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d123      	bne.n	8006a08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	08da      	lsrs	r2, r3, #3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	3208      	adds	r2, #8
 80069c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	220f      	movs	r2, #15
 80069d8:	fa02 f303 	lsl.w	r3, r2, r3
 80069dc:	43db      	mvns	r3, r3
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	4013      	ands	r3, r2
 80069e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	691a      	ldr	r2, [r3, #16]
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	f003 0307 	and.w	r3, r3, #7
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	fa02 f303 	lsl.w	r3, r2, r3
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	08da      	lsrs	r2, r3, #3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	3208      	adds	r2, #8
 8006a02:	69b9      	ldr	r1, [r7, #24]
 8006a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	2203      	movs	r2, #3
 8006a14:	fa02 f303 	lsl.w	r3, r2, r3
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	69ba      	ldr	r2, [r7, #24]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f003 0203 	and.w	r2, r3, #3
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 80a2 	beq.w	8006b8e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60fb      	str	r3, [r7, #12]
 8006a4e:	4b57      	ldr	r3, [pc, #348]	@ (8006bac <HAL_GPIO_Init+0x2e8>)
 8006a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a52:	4a56      	ldr	r2, [pc, #344]	@ (8006bac <HAL_GPIO_Init+0x2e8>)
 8006a54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a58:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a5a:	4b54      	ldr	r3, [pc, #336]	@ (8006bac <HAL_GPIO_Init+0x2e8>)
 8006a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a62:	60fb      	str	r3, [r7, #12]
 8006a64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a66:	4a52      	ldr	r2, [pc, #328]	@ (8006bb0 <HAL_GPIO_Init+0x2ec>)
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	089b      	lsrs	r3, r3, #2
 8006a6c:	3302      	adds	r3, #2
 8006a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	220f      	movs	r2, #15
 8006a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a82:	43db      	mvns	r3, r3
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	4013      	ands	r3, r2
 8006a88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a49      	ldr	r2, [pc, #292]	@ (8006bb4 <HAL_GPIO_Init+0x2f0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d019      	beq.n	8006ac6 <HAL_GPIO_Init+0x202>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a48      	ldr	r2, [pc, #288]	@ (8006bb8 <HAL_GPIO_Init+0x2f4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d013      	beq.n	8006ac2 <HAL_GPIO_Init+0x1fe>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a47      	ldr	r2, [pc, #284]	@ (8006bbc <HAL_GPIO_Init+0x2f8>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d00d      	beq.n	8006abe <HAL_GPIO_Init+0x1fa>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a46      	ldr	r2, [pc, #280]	@ (8006bc0 <HAL_GPIO_Init+0x2fc>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d007      	beq.n	8006aba <HAL_GPIO_Init+0x1f6>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a45      	ldr	r2, [pc, #276]	@ (8006bc4 <HAL_GPIO_Init+0x300>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d101      	bne.n	8006ab6 <HAL_GPIO_Init+0x1f2>
 8006ab2:	2304      	movs	r3, #4
 8006ab4:	e008      	b.n	8006ac8 <HAL_GPIO_Init+0x204>
 8006ab6:	2307      	movs	r3, #7
 8006ab8:	e006      	b.n	8006ac8 <HAL_GPIO_Init+0x204>
 8006aba:	2303      	movs	r3, #3
 8006abc:	e004      	b.n	8006ac8 <HAL_GPIO_Init+0x204>
 8006abe:	2302      	movs	r3, #2
 8006ac0:	e002      	b.n	8006ac8 <HAL_GPIO_Init+0x204>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e000      	b.n	8006ac8 <HAL_GPIO_Init+0x204>
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	69fa      	ldr	r2, [r7, #28]
 8006aca:	f002 0203 	and.w	r2, r2, #3
 8006ace:	0092      	lsls	r2, r2, #2
 8006ad0:	4093      	lsls	r3, r2
 8006ad2:	69ba      	ldr	r2, [r7, #24]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ad8:	4935      	ldr	r1, [pc, #212]	@ (8006bb0 <HAL_GPIO_Init+0x2ec>)
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	089b      	lsrs	r3, r3, #2
 8006ade:	3302      	adds	r3, #2
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006ae6:	4b38      	ldr	r3, [pc, #224]	@ (8006bc8 <HAL_GPIO_Init+0x304>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	43db      	mvns	r3, r3
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	4013      	ands	r3, r2
 8006af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b0a:	4a2f      	ldr	r2, [pc, #188]	@ (8006bc8 <HAL_GPIO_Init+0x304>)
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b10:	4b2d      	ldr	r3, [pc, #180]	@ (8006bc8 <HAL_GPIO_Init+0x304>)
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	43db      	mvns	r3, r3
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006b34:	4a24      	ldr	r2, [pc, #144]	@ (8006bc8 <HAL_GPIO_Init+0x304>)
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006b3a:	4b23      	ldr	r3, [pc, #140]	@ (8006bc8 <HAL_GPIO_Init+0x304>)
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	43db      	mvns	r3, r3
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	4013      	ands	r3, r2
 8006b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d003      	beq.n	8006b5e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006b56:	69ba      	ldr	r2, [r7, #24]
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8006bc8 <HAL_GPIO_Init+0x304>)
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b64:	4b18      	ldr	r3, [pc, #96]	@ (8006bc8 <HAL_GPIO_Init+0x304>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	43db      	mvns	r3, r3
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	4013      	ands	r3, r2
 8006b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006b88:	4a0f      	ldr	r2, [pc, #60]	@ (8006bc8 <HAL_GPIO_Init+0x304>)
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	3301      	adds	r3, #1
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	2b0f      	cmp	r3, #15
 8006b98:	f67f aea2 	bls.w	80068e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006b9c:	bf00      	nop
 8006b9e:	bf00      	nop
 8006ba0:	3724      	adds	r7, #36	@ 0x24
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	40023800 	.word	0x40023800
 8006bb0:	40013800 	.word	0x40013800
 8006bb4:	40020000 	.word	0x40020000
 8006bb8:	40020400 	.word	0x40020400
 8006bbc:	40020800 	.word	0x40020800
 8006bc0:	40020c00 	.word	0x40020c00
 8006bc4:	40021000 	.word	0x40021000
 8006bc8:	40013c00 	.word	0x40013c00

08006bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	807b      	strh	r3, [r7, #2]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006bdc:	787b      	ldrb	r3, [r7, #1]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006be2:	887a      	ldrh	r2, [r7, #2]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006be8:	e003      	b.n	8006bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006bea:	887b      	ldrh	r3, [r7, #2]
 8006bec:	041a      	lsls	r2, r3, #16
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	619a      	str	r2, [r3, #24]
}
 8006bf2:	bf00      	nop
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b085      	sub	sp, #20
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	460b      	mov	r3, r1
 8006c08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006c10:	887a      	ldrh	r2, [r7, #2]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4013      	ands	r3, r2
 8006c16:	041a      	lsls	r2, r3, #16
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	43d9      	mvns	r1, r3
 8006c1c:	887b      	ldrh	r3, [r7, #2]
 8006c1e:	400b      	ands	r3, r1
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	619a      	str	r2, [r3, #24]
}
 8006c26:	bf00      	nop
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
	...

08006c34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006c3e:	4b08      	ldr	r3, [pc, #32]	@ (8006c60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c40:	695a      	ldr	r2, [r3, #20]
 8006c42:	88fb      	ldrh	r3, [r7, #6]
 8006c44:	4013      	ands	r3, r2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d006      	beq.n	8006c58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c4a:	4a05      	ldr	r2, [pc, #20]	@ (8006c60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c4c:	88fb      	ldrh	r3, [r7, #6]
 8006c4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c50:	88fb      	ldrh	r3, [r7, #6]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fb f8fe 	bl	8001e54 <HAL_GPIO_EXTI_Callback>
  }
}
 8006c58:	bf00      	nop
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	40013c00 	.word	0x40013c00

08006c64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e12b      	b.n	8006ece <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d106      	bne.n	8006c90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7fc f82e 	bl	8002cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2224      	movs	r2, #36	@ 0x24
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0201 	bic.w	r2, r2, #1
 8006ca6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006cc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006cc8:	f001 ff90 	bl	8008bec <HAL_RCC_GetPCLK1Freq>
 8006ccc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	4a81      	ldr	r2, [pc, #516]	@ (8006ed8 <HAL_I2C_Init+0x274>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d807      	bhi.n	8006ce8 <HAL_I2C_Init+0x84>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	4a80      	ldr	r2, [pc, #512]	@ (8006edc <HAL_I2C_Init+0x278>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	bf94      	ite	ls
 8006ce0:	2301      	movls	r3, #1
 8006ce2:	2300      	movhi	r3, #0
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	e006      	b.n	8006cf6 <HAL_I2C_Init+0x92>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	4a7d      	ldr	r2, [pc, #500]	@ (8006ee0 <HAL_I2C_Init+0x27c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	bf94      	ite	ls
 8006cf0:	2301      	movls	r3, #1
 8006cf2:	2300      	movhi	r3, #0
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e0e7      	b.n	8006ece <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4a78      	ldr	r2, [pc, #480]	@ (8006ee4 <HAL_I2C_Init+0x280>)
 8006d02:	fba2 2303 	umull	r2, r3, r2, r3
 8006d06:	0c9b      	lsrs	r3, r3, #18
 8006d08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	4a6a      	ldr	r2, [pc, #424]	@ (8006ed8 <HAL_I2C_Init+0x274>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d802      	bhi.n	8006d38 <HAL_I2C_Init+0xd4>
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	3301      	adds	r3, #1
 8006d36:	e009      	b.n	8006d4c <HAL_I2C_Init+0xe8>
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006d3e:	fb02 f303 	mul.w	r3, r2, r3
 8006d42:	4a69      	ldr	r2, [pc, #420]	@ (8006ee8 <HAL_I2C_Init+0x284>)
 8006d44:	fba2 2303 	umull	r2, r3, r2, r3
 8006d48:	099b      	lsrs	r3, r3, #6
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	6812      	ldr	r2, [r2, #0]
 8006d50:	430b      	orrs	r3, r1
 8006d52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	69db      	ldr	r3, [r3, #28]
 8006d5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006d5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	495c      	ldr	r1, [pc, #368]	@ (8006ed8 <HAL_I2C_Init+0x274>)
 8006d68:	428b      	cmp	r3, r1
 8006d6a:	d819      	bhi.n	8006da0 <HAL_I2C_Init+0x13c>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	1e59      	subs	r1, r3, #1
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d7a:	1c59      	adds	r1, r3, #1
 8006d7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006d80:	400b      	ands	r3, r1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00a      	beq.n	8006d9c <HAL_I2C_Init+0x138>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	1e59      	subs	r1, r3, #1
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	005b      	lsls	r3, r3, #1
 8006d90:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d94:	3301      	adds	r3, #1
 8006d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d9a:	e051      	b.n	8006e40 <HAL_I2C_Init+0x1dc>
 8006d9c:	2304      	movs	r3, #4
 8006d9e:	e04f      	b.n	8006e40 <HAL_I2C_Init+0x1dc>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d111      	bne.n	8006dcc <HAL_I2C_Init+0x168>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	1e58      	subs	r0, r3, #1
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6859      	ldr	r1, [r3, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	440b      	add	r3, r1
 8006db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006dba:	3301      	adds	r3, #1
 8006dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	bf0c      	ite	eq
 8006dc4:	2301      	moveq	r3, #1
 8006dc6:	2300      	movne	r3, #0
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	e012      	b.n	8006df2 <HAL_I2C_Init+0x18e>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	1e58      	subs	r0, r3, #1
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6859      	ldr	r1, [r3, #4]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	440b      	add	r3, r1
 8006dda:	0099      	lsls	r1, r3, #2
 8006ddc:	440b      	add	r3, r1
 8006dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8006de2:	3301      	adds	r3, #1
 8006de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	bf0c      	ite	eq
 8006dec:	2301      	moveq	r3, #1
 8006dee:	2300      	movne	r3, #0
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <HAL_I2C_Init+0x196>
 8006df6:	2301      	movs	r3, #1
 8006df8:	e022      	b.n	8006e40 <HAL_I2C_Init+0x1dc>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10e      	bne.n	8006e20 <HAL_I2C_Init+0x1bc>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	1e58      	subs	r0, r3, #1
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6859      	ldr	r1, [r3, #4]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	440b      	add	r3, r1
 8006e10:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e14:	3301      	adds	r3, #1
 8006e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e1e:	e00f      	b.n	8006e40 <HAL_I2C_Init+0x1dc>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	1e58      	subs	r0, r3, #1
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6859      	ldr	r1, [r3, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	0099      	lsls	r1, r3, #2
 8006e30:	440b      	add	r3, r1
 8006e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e36:	3301      	adds	r3, #1
 8006e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e40:	6879      	ldr	r1, [r7, #4]
 8006e42:	6809      	ldr	r1, [r1, #0]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69da      	ldr	r2, [r3, #28]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a1b      	ldr	r3, [r3, #32]
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	430a      	orrs	r2, r1
 8006e62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006e6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	6911      	ldr	r1, [r2, #16]
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	68d2      	ldr	r2, [r2, #12]
 8006e7a:	4311      	orrs	r1, r2
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6812      	ldr	r2, [r2, #0]
 8006e80:	430b      	orrs	r3, r1
 8006e82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	695a      	ldr	r2, [r3, #20]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f042 0201 	orr.w	r2, r2, #1
 8006eae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	000186a0 	.word	0x000186a0
 8006edc:	001e847f 	.word	0x001e847f
 8006ee0:	003d08ff 	.word	0x003d08ff
 8006ee4:	431bde83 	.word	0x431bde83
 8006ee8:	10624dd3 	.word	0x10624dd3

08006eec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af02      	add	r7, sp, #8
 8006ef2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e101      	b.n	8007102 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d106      	bne.n	8006f1e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f008 ff8b 	bl	800fe34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2203      	movs	r2, #3
 8006f22:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f2c:	d102      	bne.n	8006f34 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f003 fc40 	bl	800a7be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	7c1a      	ldrb	r2, [r3, #16]
 8006f46:	f88d 2000 	strb.w	r2, [sp]
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f4e:	f003 fb1f 	bl	800a590 <USB_CoreInit>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d005      	beq.n	8006f64 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e0ce      	b.n	8007102 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2100      	movs	r1, #0
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f003 fc38 	bl	800a7e0 <USB_SetCurrentMode>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d005      	beq.n	8006f82 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2202      	movs	r2, #2
 8006f7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e0bf      	b.n	8007102 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f82:	2300      	movs	r3, #0
 8006f84:	73fb      	strb	r3, [r7, #15]
 8006f86:	e04a      	b.n	800701e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006f88:	7bfa      	ldrb	r2, [r7, #15]
 8006f8a:	6879      	ldr	r1, [r7, #4]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	4413      	add	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	440b      	add	r3, r1
 8006f96:	3315      	adds	r3, #21
 8006f98:	2201      	movs	r2, #1
 8006f9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006f9c:	7bfa      	ldrb	r2, [r7, #15]
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	4413      	add	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	440b      	add	r3, r1
 8006faa:	3314      	adds	r3, #20
 8006fac:	7bfa      	ldrb	r2, [r7, #15]
 8006fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006fb0:	7bfa      	ldrb	r2, [r7, #15]
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	b298      	uxth	r0, r3
 8006fb6:	6879      	ldr	r1, [r7, #4]
 8006fb8:	4613      	mov	r3, r2
 8006fba:	00db      	lsls	r3, r3, #3
 8006fbc:	4413      	add	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	440b      	add	r3, r1
 8006fc2:	332e      	adds	r3, #46	@ 0x2e
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006fc8:	7bfa      	ldrb	r2, [r7, #15]
 8006fca:	6879      	ldr	r1, [r7, #4]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	00db      	lsls	r3, r3, #3
 8006fd0:	4413      	add	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	440b      	add	r3, r1
 8006fd6:	3318      	adds	r3, #24
 8006fd8:	2200      	movs	r2, #0
 8006fda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006fdc:	7bfa      	ldrb	r2, [r7, #15]
 8006fde:	6879      	ldr	r1, [r7, #4]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	4413      	add	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	440b      	add	r3, r1
 8006fea:	331c      	adds	r3, #28
 8006fec:	2200      	movs	r2, #0
 8006fee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006ff0:	7bfa      	ldrb	r2, [r7, #15]
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	00db      	lsls	r3, r3, #3
 8006ff8:	4413      	add	r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	440b      	add	r3, r1
 8006ffe:	3320      	adds	r3, #32
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007004:	7bfa      	ldrb	r2, [r7, #15]
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	4613      	mov	r3, r2
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	4413      	add	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	440b      	add	r3, r1
 8007012:	3324      	adds	r3, #36	@ 0x24
 8007014:	2200      	movs	r2, #0
 8007016:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	3301      	adds	r3, #1
 800701c:	73fb      	strb	r3, [r7, #15]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	791b      	ldrb	r3, [r3, #4]
 8007022:	7bfa      	ldrb	r2, [r7, #15]
 8007024:	429a      	cmp	r2, r3
 8007026:	d3af      	bcc.n	8006f88 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007028:	2300      	movs	r3, #0
 800702a:	73fb      	strb	r3, [r7, #15]
 800702c:	e044      	b.n	80070b8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800702e:	7bfa      	ldrb	r2, [r7, #15]
 8007030:	6879      	ldr	r1, [r7, #4]
 8007032:	4613      	mov	r3, r2
 8007034:	00db      	lsls	r3, r3, #3
 8007036:	4413      	add	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	440b      	add	r3, r1
 800703c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007040:	2200      	movs	r2, #0
 8007042:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007044:	7bfa      	ldrb	r2, [r7, #15]
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	4613      	mov	r3, r2
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	4413      	add	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	440b      	add	r3, r1
 8007052:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007056:	7bfa      	ldrb	r2, [r7, #15]
 8007058:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800705a:	7bfa      	ldrb	r2, [r7, #15]
 800705c:	6879      	ldr	r1, [r7, #4]
 800705e:	4613      	mov	r3, r2
 8007060:	00db      	lsls	r3, r3, #3
 8007062:	4413      	add	r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	440b      	add	r3, r1
 8007068:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800706c:	2200      	movs	r2, #0
 800706e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007070:	7bfa      	ldrb	r2, [r7, #15]
 8007072:	6879      	ldr	r1, [r7, #4]
 8007074:	4613      	mov	r3, r2
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	440b      	add	r3, r1
 800707e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007082:	2200      	movs	r2, #0
 8007084:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007086:	7bfa      	ldrb	r2, [r7, #15]
 8007088:	6879      	ldr	r1, [r7, #4]
 800708a:	4613      	mov	r3, r2
 800708c:	00db      	lsls	r3, r3, #3
 800708e:	4413      	add	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	440b      	add	r3, r1
 8007094:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800709c:	7bfa      	ldrb	r2, [r7, #15]
 800709e:	6879      	ldr	r1, [r7, #4]
 80070a0:	4613      	mov	r3, r2
 80070a2:	00db      	lsls	r3, r3, #3
 80070a4:	4413      	add	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	440b      	add	r3, r1
 80070aa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80070ae:	2200      	movs	r2, #0
 80070b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	3301      	adds	r3, #1
 80070b6:	73fb      	strb	r3, [r7, #15]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	791b      	ldrb	r3, [r3, #4]
 80070bc:	7bfa      	ldrb	r2, [r7, #15]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d3b5      	bcc.n	800702e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6818      	ldr	r0, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	7c1a      	ldrb	r2, [r3, #16]
 80070ca:	f88d 2000 	strb.w	r2, [sp]
 80070ce:	3304      	adds	r3, #4
 80070d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070d2:	f003 fbd1 	bl	800a878 <USB_DevInit>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e00c      	b.n	8007102 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f004 fc15 	bl	800b92a <USB_DevDisconnect>

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b084      	sub	sp, #16
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800711e:	2b01      	cmp	r3, #1
 8007120:	d101      	bne.n	8007126 <HAL_PCD_Start+0x1c>
 8007122:	2302      	movs	r3, #2
 8007124:	e022      	b.n	800716c <HAL_PCD_Start+0x62>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007136:	2b00      	cmp	r3, #0
 8007138:	d009      	beq.n	800714e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800713e:	2b01      	cmp	r3, #1
 8007140:	d105      	bne.n	800714e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007146:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4618      	mov	r0, r3
 8007154:	f003 fb22 	bl	800a79c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4618      	mov	r0, r3
 800715e:	f004 fbc3 	bl	800b8e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007174:	b590      	push	{r4, r7, lr}
 8007176:	b08d      	sub	sp, #52	@ 0x34
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4618      	mov	r0, r3
 800718c:	f004 fc81 	bl	800ba92 <USB_GetMode>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	f040 848c 	bne.w	8007ab0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4618      	mov	r0, r3
 800719e:	f004 fbe5 	bl	800b96c <USB_ReadInterrupts>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 8482 	beq.w	8007aae <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	0a1b      	lsrs	r3, r3, #8
 80071b4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f004 fbd2 	bl	800b96c <USB_ReadInterrupts>
 80071c8:	4603      	mov	r3, r0
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d107      	bne.n	80071e2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	695a      	ldr	r2, [r3, #20]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f002 0202 	and.w	r2, r2, #2
 80071e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f004 fbc0 	bl	800b96c <USB_ReadInterrupts>
 80071ec:	4603      	mov	r3, r0
 80071ee:	f003 0310 	and.w	r3, r3, #16
 80071f2:	2b10      	cmp	r3, #16
 80071f4:	d161      	bne.n	80072ba <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	699a      	ldr	r2, [r3, #24]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0210 	bic.w	r2, r2, #16
 8007204:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800720c:	69bb      	ldr	r3, [r7, #24]
 800720e:	f003 020f 	and.w	r2, r3, #15
 8007212:	4613      	mov	r3, r2
 8007214:	00db      	lsls	r3, r3, #3
 8007216:	4413      	add	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	4413      	add	r3, r2
 8007222:	3304      	adds	r3, #4
 8007224:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	0c5b      	lsrs	r3, r3, #17
 800722a:	f003 030f 	and.w	r3, r3, #15
 800722e:	2b02      	cmp	r3, #2
 8007230:	d124      	bne.n	800727c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007238:	4013      	ands	r3, r2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d035      	beq.n	80072aa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	091b      	lsrs	r3, r3, #4
 8007246:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007248:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800724c:	b29b      	uxth	r3, r3
 800724e:	461a      	mov	r2, r3
 8007250:	6a38      	ldr	r0, [r7, #32]
 8007252:	f004 f9f7 	bl	800b644 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	091b      	lsrs	r3, r3, #4
 800725e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007262:	441a      	add	r2, r3
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	695a      	ldr	r2, [r3, #20]
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	091b      	lsrs	r3, r3, #4
 8007270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007274:	441a      	add	r2, r3
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	615a      	str	r2, [r3, #20]
 800727a:	e016      	b.n	80072aa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	0c5b      	lsrs	r3, r3, #17
 8007280:	f003 030f 	and.w	r3, r3, #15
 8007284:	2b06      	cmp	r3, #6
 8007286:	d110      	bne.n	80072aa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800728e:	2208      	movs	r2, #8
 8007290:	4619      	mov	r1, r3
 8007292:	6a38      	ldr	r0, [r7, #32]
 8007294:	f004 f9d6 	bl	800b644 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	695a      	ldr	r2, [r3, #20]
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	091b      	lsrs	r3, r3, #4
 80072a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072a4:	441a      	add	r2, r3
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	699a      	ldr	r2, [r3, #24]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f042 0210 	orr.w	r2, r2, #16
 80072b8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4618      	mov	r0, r3
 80072c0:	f004 fb54 	bl	800b96c <USB_ReadInterrupts>
 80072c4:	4603      	mov	r3, r0
 80072c6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80072ca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80072ce:	f040 80a7 	bne.w	8007420 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4618      	mov	r0, r3
 80072dc:	f004 fb59 	bl	800b992 <USB_ReadDevAllOutEpInterrupt>
 80072e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80072e2:	e099      	b.n	8007418 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80072e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 808e 	beq.w	800740c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072f6:	b2d2      	uxtb	r2, r2
 80072f8:	4611      	mov	r1, r2
 80072fa:	4618      	mov	r0, r3
 80072fc:	f004 fb7d 	bl	800b9fa <USB_ReadDevOutEPInterrupt>
 8007300:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f003 0301 	and.w	r3, r3, #1
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00c      	beq.n	8007326 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800730c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007318:	461a      	mov	r2, r3
 800731a:	2301      	movs	r3, #1
 800731c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800731e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fea1 	bl	8008068 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f003 0308 	and.w	r3, r3, #8
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00c      	beq.n	800734a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800733c:	461a      	mov	r2, r3
 800733e:	2308      	movs	r3, #8
 8007340:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007342:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 ff77 	bl	8008238 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	f003 0310 	and.w	r3, r3, #16
 8007350:	2b00      	cmp	r3, #0
 8007352:	d008      	beq.n	8007366 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007360:	461a      	mov	r2, r3
 8007362:	2310      	movs	r3, #16
 8007364:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	f003 0302 	and.w	r3, r3, #2
 800736c:	2b00      	cmp	r3, #0
 800736e:	d030      	beq.n	80073d2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	695b      	ldr	r3, [r3, #20]
 8007374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007378:	2b80      	cmp	r3, #128	@ 0x80
 800737a:	d109      	bne.n	8007390 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800737c:	69fb      	ldr	r3, [r7, #28]
 800737e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	69fa      	ldr	r2, [r7, #28]
 8007386:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800738a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800738e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007392:	4613      	mov	r3, r2
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	4413      	add	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	4413      	add	r3, r2
 80073a2:	3304      	adds	r3, #4
 80073a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	78db      	ldrb	r3, [r3, #3]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d108      	bne.n	80073c0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2200      	movs	r2, #0
 80073b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80073b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f008 fe36 	bl	801002c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80073c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073cc:	461a      	mov	r2, r3
 80073ce:	2302      	movs	r3, #2
 80073d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	f003 0320 	and.w	r3, r3, #32
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d008      	beq.n	80073ee <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80073dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073e8:	461a      	mov	r2, r3
 80073ea:	2320      	movs	r3, #32
 80073ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d009      	beq.n	800740c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80073f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007404:	461a      	mov	r2, r3
 8007406:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800740a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800740c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740e:	3301      	adds	r3, #1
 8007410:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007414:	085b      	lsrs	r3, r3, #1
 8007416:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741a:	2b00      	cmp	r3, #0
 800741c:	f47f af62 	bne.w	80072e4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4618      	mov	r0, r3
 8007426:	f004 faa1 	bl	800b96c <USB_ReadInterrupts>
 800742a:	4603      	mov	r3, r0
 800742c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007430:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007434:	f040 80db 	bne.w	80075ee <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4618      	mov	r0, r3
 800743e:	f004 fac2 	bl	800b9c6 <USB_ReadDevAllInEpInterrupt>
 8007442:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007444:	2300      	movs	r3, #0
 8007446:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007448:	e0cd      	b.n	80075e6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800744a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 80c2 	beq.w	80075da <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800745c:	b2d2      	uxtb	r2, r2
 800745e:	4611      	mov	r1, r2
 8007460:	4618      	mov	r0, r3
 8007462:	f004 fae8 	bl	800ba36 <USB_ReadDevInEPInterrupt>
 8007466:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d057      	beq.n	8007522 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	f003 030f 	and.w	r3, r3, #15
 8007478:	2201      	movs	r2, #1
 800747a:	fa02 f303 	lsl.w	r3, r2, r3
 800747e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007486:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	43db      	mvns	r3, r3
 800748c:	69f9      	ldr	r1, [r7, #28]
 800748e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007492:	4013      	ands	r3, r2
 8007494:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007498:	015a      	lsls	r2, r3, #5
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	4413      	add	r3, r2
 800749e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074a2:	461a      	mov	r2, r3
 80074a4:	2301      	movs	r3, #1
 80074a6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	799b      	ldrb	r3, [r3, #6]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d132      	bne.n	8007516 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074b4:	4613      	mov	r3, r2
 80074b6:	00db      	lsls	r3, r3, #3
 80074b8:	4413      	add	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	440b      	add	r3, r1
 80074be:	3320      	adds	r3, #32
 80074c0:	6819      	ldr	r1, [r3, #0]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074c6:	4613      	mov	r3, r2
 80074c8:	00db      	lsls	r3, r3, #3
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4403      	add	r3, r0
 80074d0:	331c      	adds	r3, #28
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4419      	add	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074da:	4613      	mov	r3, r2
 80074dc:	00db      	lsls	r3, r3, #3
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4403      	add	r3, r0
 80074e4:	3320      	adds	r3, #32
 80074e6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80074e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d113      	bne.n	8007516 <HAL_PCD_IRQHandler+0x3a2>
 80074ee:	6879      	ldr	r1, [r7, #4]
 80074f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074f2:	4613      	mov	r3, r2
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	440b      	add	r3, r1
 80074fc:	3324      	adds	r3, #36	@ 0x24
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d108      	bne.n	8007516 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6818      	ldr	r0, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800750e:	461a      	mov	r2, r3
 8007510:	2101      	movs	r1, #1
 8007512:	f004 faef 	bl	800baf4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007518:	b2db      	uxtb	r3, r3
 800751a:	4619      	mov	r1, r3
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f008 fd0a 	bl	800ff36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	f003 0308 	and.w	r3, r3, #8
 8007528:	2b00      	cmp	r3, #0
 800752a:	d008      	beq.n	800753e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800752c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007538:	461a      	mov	r2, r3
 800753a:	2308      	movs	r3, #8
 800753c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	f003 0310 	and.w	r3, r3, #16
 8007544:	2b00      	cmp	r3, #0
 8007546:	d008      	beq.n	800755a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	4413      	add	r3, r2
 8007550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007554:	461a      	mov	r2, r3
 8007556:	2310      	movs	r3, #16
 8007558:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	d008      	beq.n	8007576 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007566:	015a      	lsls	r2, r3, #5
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	4413      	add	r3, r2
 800756c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007570:	461a      	mov	r2, r3
 8007572:	2340      	movs	r3, #64	@ 0x40
 8007574:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f003 0302 	and.w	r3, r3, #2
 800757c:	2b00      	cmp	r3, #0
 800757e:	d023      	beq.n	80075c8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007580:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007582:	6a38      	ldr	r0, [r7, #32]
 8007584:	f003 fadc 	bl	800ab40 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800758a:	4613      	mov	r3, r2
 800758c:	00db      	lsls	r3, r3, #3
 800758e:	4413      	add	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	3310      	adds	r3, #16
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	4413      	add	r3, r2
 8007598:	3304      	adds	r3, #4
 800759a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	78db      	ldrb	r3, [r3, #3]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d108      	bne.n	80075b6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	2200      	movs	r2, #0
 80075a8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f008 fd4d 	bl	8010050 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80075b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b8:	015a      	lsls	r2, r3, #5
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	4413      	add	r3, r2
 80075be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075c2:	461a      	mov	r2, r3
 80075c4:	2302      	movs	r3, #2
 80075c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80075d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fcbb 	bl	8007f50 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	3301      	adds	r3, #1
 80075de:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80075e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e2:	085b      	lsrs	r3, r3, #1
 80075e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80075e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f47f af2e 	bne.w	800744a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f004 f9ba 	bl	800b96c <USB_ReadInterrupts>
 80075f8:	4603      	mov	r3, r0
 80075fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007602:	d122      	bne.n	800764a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	69fa      	ldr	r2, [r7, #28]
 800760e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007612:	f023 0301 	bic.w	r3, r3, #1
 8007616:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800761e:	2b01      	cmp	r3, #1
 8007620:	d108      	bne.n	8007634 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800762a:	2100      	movs	r1, #0
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fea1 	bl	8008374 <HAL_PCDEx_LPM_Callback>
 8007632:	e002      	b.n	800763a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f008 fceb 	bl	8010010 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	695a      	ldr	r2, [r3, #20]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007648:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4618      	mov	r0, r3
 8007650:	f004 f98c 	bl	800b96c <USB_ReadInterrupts>
 8007654:	4603      	mov	r3, r0
 8007656:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800765a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800765e:	d112      	bne.n	8007686 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	2b01      	cmp	r3, #1
 800766e:	d102      	bne.n	8007676 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f008 fca7 	bl	800ffc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	695a      	ldr	r2, [r3, #20]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007684:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4618      	mov	r0, r3
 800768c:	f004 f96e 	bl	800b96c <USB_ReadInterrupts>
 8007690:	4603      	mov	r3, r0
 8007692:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007696:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800769a:	f040 80b7 	bne.w	800780c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	69fa      	ldr	r2, [r7, #28]
 80076a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076ac:	f023 0301 	bic.w	r3, r3, #1
 80076b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2110      	movs	r1, #16
 80076b8:	4618      	mov	r0, r3
 80076ba:	f003 fa41 	bl	800ab40 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076be:	2300      	movs	r3, #0
 80076c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076c2:	e046      	b.n	8007752 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80076c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076d0:	461a      	mov	r2, r3
 80076d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80076d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076e8:	0151      	lsls	r1, r2, #5
 80076ea:	69fa      	ldr	r2, [r7, #28]
 80076ec:	440a      	add	r2, r1
 80076ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80076f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007704:	461a      	mov	r2, r3
 8007706:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800770a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800770c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	4413      	add	r3, r2
 8007714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800771c:	0151      	lsls	r1, r2, #5
 800771e:	69fa      	ldr	r2, [r7, #28]
 8007720:	440a      	add	r2, r1
 8007722:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007726:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800772a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800772c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800773c:	0151      	lsls	r1, r2, #5
 800773e:	69fa      	ldr	r2, [r7, #28]
 8007740:	440a      	add	r2, r1
 8007742:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007746:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800774a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800774c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800774e:	3301      	adds	r3, #1
 8007750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	791b      	ldrb	r3, [r3, #4]
 8007756:	461a      	mov	r2, r3
 8007758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800775a:	4293      	cmp	r3, r2
 800775c:	d3b2      	bcc.n	80076c4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	69fa      	ldr	r2, [r7, #28]
 8007768:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800776c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007770:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	7bdb      	ldrb	r3, [r3, #15]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d016      	beq.n	80077a8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007780:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007784:	69fa      	ldr	r2, [r7, #28]
 8007786:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800778a:	f043 030b 	orr.w	r3, r3, #11
 800778e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800779a:	69fa      	ldr	r2, [r7, #28]
 800779c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077a0:	f043 030b 	orr.w	r3, r3, #11
 80077a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80077a6:	e015      	b.n	80077d4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	69fa      	ldr	r2, [r7, #28]
 80077b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80077ba:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80077be:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	69fa      	ldr	r2, [r7, #28]
 80077ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077ce:	f043 030b 	orr.w	r3, r3, #11
 80077d2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	69fa      	ldr	r2, [r7, #28]
 80077de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077e2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80077e6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6818      	ldr	r0, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80077f6:	461a      	mov	r2, r3
 80077f8:	f004 f97c 	bl	800baf4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	695a      	ldr	r2, [r3, #20]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800780a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4618      	mov	r0, r3
 8007812:	f004 f8ab 	bl	800b96c <USB_ReadInterrupts>
 8007816:	4603      	mov	r3, r0
 8007818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800781c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007820:	d123      	bne.n	800786a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4618      	mov	r0, r3
 8007828:	f004 f941 	bl	800baae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4618      	mov	r0, r3
 8007832:	f003 f9fe 	bl	800ac32 <USB_GetDevSpeed>
 8007836:	4603      	mov	r3, r0
 8007838:	461a      	mov	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681c      	ldr	r4, [r3, #0]
 8007842:	f001 f9c7 	bl	8008bd4 <HAL_RCC_GetHCLKFreq>
 8007846:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800784c:	461a      	mov	r2, r3
 800784e:	4620      	mov	r0, r4
 8007850:	f002 ff02 	bl	800a658 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f008 fb96 	bl	800ff86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	695a      	ldr	r2, [r3, #20]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007868:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4618      	mov	r0, r3
 8007870:	f004 f87c 	bl	800b96c <USB_ReadInterrupts>
 8007874:	4603      	mov	r3, r0
 8007876:	f003 0308 	and.w	r3, r3, #8
 800787a:	2b08      	cmp	r3, #8
 800787c:	d10a      	bne.n	8007894 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f008 fb73 	bl	800ff6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	695a      	ldr	r2, [r3, #20]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f002 0208 	and.w	r2, r2, #8
 8007892:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4618      	mov	r0, r3
 800789a:	f004 f867 	bl	800b96c <USB_ReadInterrupts>
 800789e:	4603      	mov	r3, r0
 80078a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078a4:	2b80      	cmp	r3, #128	@ 0x80
 80078a6:	d123      	bne.n	80078f0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078b4:	2301      	movs	r3, #1
 80078b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80078b8:	e014      	b.n	80078e4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80078ba:	6879      	ldr	r1, [r7, #4]
 80078bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078be:	4613      	mov	r3, r2
 80078c0:	00db      	lsls	r3, r3, #3
 80078c2:	4413      	add	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	440b      	add	r3, r1
 80078c8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d105      	bne.n	80078de <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80078d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fb08 	bl	8007eee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e0:	3301      	adds	r3, #1
 80078e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	791b      	ldrb	r3, [r3, #4]
 80078e8:	461a      	mov	r2, r3
 80078ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d3e4      	bcc.n	80078ba <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f004 f839 	bl	800b96c <USB_ReadInterrupts>
 80078fa:	4603      	mov	r3, r0
 80078fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007900:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007904:	d13c      	bne.n	8007980 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007906:	2301      	movs	r3, #1
 8007908:	627b      	str	r3, [r7, #36]	@ 0x24
 800790a:	e02b      	b.n	8007964 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800790c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800791c:	6879      	ldr	r1, [r7, #4]
 800791e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007920:	4613      	mov	r3, r2
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	4413      	add	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	440b      	add	r3, r1
 800792a:	3318      	adds	r3, #24
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d115      	bne.n	800795e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007932:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007934:	2b00      	cmp	r3, #0
 8007936:	da12      	bge.n	800795e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007938:	6879      	ldr	r1, [r7, #4]
 800793a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800793c:	4613      	mov	r3, r2
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	4413      	add	r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	440b      	add	r3, r1
 8007946:	3317      	adds	r3, #23
 8007948:	2201      	movs	r2, #1
 800794a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800794c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794e:	b2db      	uxtb	r3, r3
 8007950:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007954:	b2db      	uxtb	r3, r3
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fac8 	bl	8007eee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800795e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007960:	3301      	adds	r3, #1
 8007962:	627b      	str	r3, [r7, #36]	@ 0x24
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	791b      	ldrb	r3, [r3, #4]
 8007968:	461a      	mov	r2, r3
 800796a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800796c:	4293      	cmp	r3, r2
 800796e:	d3cd      	bcc.n	800790c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	695a      	ldr	r2, [r3, #20]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800797e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4618      	mov	r0, r3
 8007986:	f003 fff1 	bl	800b96c <USB_ReadInterrupts>
 800798a:	4603      	mov	r3, r0
 800798c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007990:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007994:	d156      	bne.n	8007a44 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007996:	2301      	movs	r3, #1
 8007998:	627b      	str	r3, [r7, #36]	@ 0x24
 800799a:	e045      	b.n	8007a28 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800799c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80079ac:	6879      	ldr	r1, [r7, #4]
 80079ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079b0:	4613      	mov	r3, r2
 80079b2:	00db      	lsls	r3, r3, #3
 80079b4:	4413      	add	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	440b      	add	r3, r1
 80079ba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d12e      	bne.n	8007a22 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80079c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	da2b      	bge.n	8007a22 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80079d6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80079da:	429a      	cmp	r2, r3
 80079dc:	d121      	bne.n	8007a22 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80079de:	6879      	ldr	r1, [r7, #4]
 80079e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079e2:	4613      	mov	r3, r2
 80079e4:	00db      	lsls	r3, r3, #3
 80079e6:	4413      	add	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	440b      	add	r3, r1
 80079ec:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80079f0:	2201      	movs	r2, #1
 80079f2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10a      	bne.n	8007a22 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	69fa      	ldr	r2, [r7, #28]
 8007a16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007a1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a1e:	6053      	str	r3, [r2, #4]
            break;
 8007a20:	e008      	b.n	8007a34 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a24:	3301      	adds	r3, #1
 8007a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	791b      	ldrb	r3, [r3, #4]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d3b3      	bcc.n	800799c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	695a      	ldr	r2, [r3, #20]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007a42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f003 ff8f 	bl	800b96c <USB_ReadInterrupts>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a58:	d10a      	bne.n	8007a70 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f008 fb0a 	bl	8010074 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	695a      	ldr	r2, [r3, #20]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007a6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f003 ff79 	bl	800b96c <USB_ReadInterrupts>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b04      	cmp	r3, #4
 8007a82:	d115      	bne.n	8007ab0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	f003 0304 	and.w	r3, r3, #4
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f008 fafa 	bl	8010090 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6859      	ldr	r1, [r3, #4]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	605a      	str	r2, [r3, #4]
 8007aac:	e000      	b.n	8007ab0 <HAL_PCD_IRQHandler+0x93c>
      return;
 8007aae:	bf00      	nop
    }
  }
}
 8007ab0:	3734      	adds	r7, #52	@ 0x34
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd90      	pop	{r4, r7, pc}

08007ab6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b082      	sub	sp, #8
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d101      	bne.n	8007ad0 <HAL_PCD_SetAddress+0x1a>
 8007acc:	2302      	movs	r3, #2
 8007ace:	e012      	b.n	8007af6 <HAL_PCD_SetAddress+0x40>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	78fa      	ldrb	r2, [r7, #3]
 8007adc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	78fa      	ldrb	r2, [r7, #3]
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f003 fed8 	bl	800b89c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	4608      	mov	r0, r1
 8007b08:	4611      	mov	r1, r2
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	70fb      	strb	r3, [r7, #3]
 8007b10:	460b      	mov	r3, r1
 8007b12:	803b      	strh	r3, [r7, #0]
 8007b14:	4613      	mov	r3, r2
 8007b16:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007b1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	da0f      	bge.n	8007b44 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	f003 020f 	and.w	r2, r3, #15
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	00db      	lsls	r3, r3, #3
 8007b2e:	4413      	add	r3, r2
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	3310      	adds	r3, #16
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	4413      	add	r3, r2
 8007b38:	3304      	adds	r3, #4
 8007b3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	705a      	strb	r2, [r3, #1]
 8007b42:	e00f      	b.n	8007b64 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b44:	78fb      	ldrb	r3, [r7, #3]
 8007b46:	f003 020f 	and.w	r2, r3, #15
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	4413      	add	r3, r2
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007b64:	78fb      	ldrb	r3, [r7, #3]
 8007b66:	f003 030f 	and.w	r3, r3, #15
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007b70:	883a      	ldrh	r2, [r7, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	78ba      	ldrb	r2, [r7, #2]
 8007b7a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	785b      	ldrb	r3, [r3, #1]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d004      	beq.n	8007b8e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007b8e:	78bb      	ldrb	r3, [r7, #2]
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d102      	bne.n	8007b9a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d101      	bne.n	8007ba8 <HAL_PCD_EP_Open+0xaa>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e00e      	b.n	8007bc6 <HAL_PCD_EP_Open+0xc8>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68f9      	ldr	r1, [r7, #12]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f003 f860 	bl	800ac7c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007bc4:	7afb      	ldrb	r3, [r7, #11]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b084      	sub	sp, #16
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007bda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	da0f      	bge.n	8007c02 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	f003 020f 	and.w	r2, r3, #15
 8007be8:	4613      	mov	r3, r2
 8007bea:	00db      	lsls	r3, r3, #3
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	3310      	adds	r3, #16
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	705a      	strb	r2, [r3, #1]
 8007c00:	e00f      	b.n	8007c22 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c02:	78fb      	ldrb	r3, [r7, #3]
 8007c04:	f003 020f 	and.w	r2, r3, #15
 8007c08:	4613      	mov	r3, r2
 8007c0a:	00db      	lsls	r3, r3, #3
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	4413      	add	r3, r2
 8007c18:	3304      	adds	r3, #4
 8007c1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c22:	78fb      	ldrb	r3, [r7, #3]
 8007c24:	f003 030f 	and.w	r3, r3, #15
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d101      	bne.n	8007c3c <HAL_PCD_EP_Close+0x6e>
 8007c38:	2302      	movs	r3, #2
 8007c3a:	e00e      	b.n	8007c5a <HAL_PCD_EP_Close+0x8c>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68f9      	ldr	r1, [r7, #12]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f003 f89e 	bl	800ad8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b086      	sub	sp, #24
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	60f8      	str	r0, [r7, #12]
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	603b      	str	r3, [r7, #0]
 8007c6e:	460b      	mov	r3, r1
 8007c70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c72:	7afb      	ldrb	r3, [r7, #11]
 8007c74:	f003 020f 	and.w	r2, r3, #15
 8007c78:	4613      	mov	r3, r2
 8007c7a:	00db      	lsls	r3, r3, #3
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	4413      	add	r3, r2
 8007c88:	3304      	adds	r3, #4
 8007c8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	683a      	ldr	r2, [r7, #0]
 8007c96:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ca4:	7afb      	ldrb	r3, [r7, #11]
 8007ca6:	f003 030f 	and.w	r3, r3, #15
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	799b      	ldrb	r3, [r3, #6]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d102      	bne.n	8007cbe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	799b      	ldrb	r3, [r3, #6]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	6979      	ldr	r1, [r7, #20]
 8007cca:	f003 f93b 	bl	800af44 <USB_EPStartXfer>

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3718      	adds	r7, #24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	f003 020f 	and.w	r2, r3, #15
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	4613      	mov	r3, r2
 8007cee:	00db      	lsls	r3, r3, #3
 8007cf0:	4413      	add	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	440b      	add	r3, r1
 8007cf6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007cfa:	681b      	ldr	r3, [r3, #0]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	60f8      	str	r0, [r7, #12]
 8007d10:	607a      	str	r2, [r7, #4]
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	460b      	mov	r3, r1
 8007d16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d18:	7afb      	ldrb	r3, [r7, #11]
 8007d1a:	f003 020f 	and.w	r2, r3, #15
 8007d1e:	4613      	mov	r3, r2
 8007d20:	00db      	lsls	r3, r3, #3
 8007d22:	4413      	add	r3, r2
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	3310      	adds	r3, #16
 8007d28:	68fa      	ldr	r2, [r7, #12]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	683a      	ldr	r2, [r7, #0]
 8007d3a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2201      	movs	r2, #1
 8007d46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d48:	7afb      	ldrb	r3, [r7, #11]
 8007d4a:	f003 030f 	and.w	r3, r3, #15
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	799b      	ldrb	r3, [r3, #6]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d102      	bne.n	8007d62 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6818      	ldr	r0, [r3, #0]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	799b      	ldrb	r3, [r3, #6]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	6979      	ldr	r1, [r7, #20]
 8007d6e:	f003 f8e9 	bl	800af44 <USB_EPStartXfer>

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3718      	adds	r7, #24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	f003 030f 	and.w	r3, r3, #15
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	7912      	ldrb	r2, [r2, #4]
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d901      	bls.n	8007d9a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e04f      	b.n	8007e3a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007d9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	da0f      	bge.n	8007dc2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007da2:	78fb      	ldrb	r3, [r7, #3]
 8007da4:	f003 020f 	and.w	r2, r3, #15
 8007da8:	4613      	mov	r3, r2
 8007daa:	00db      	lsls	r3, r3, #3
 8007dac:	4413      	add	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	3310      	adds	r3, #16
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	4413      	add	r3, r2
 8007db6:	3304      	adds	r3, #4
 8007db8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	705a      	strb	r2, [r3, #1]
 8007dc0:	e00d      	b.n	8007dde <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007dc2:	78fa      	ldrb	r2, [r7, #3]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	00db      	lsls	r3, r3, #3
 8007dc8:	4413      	add	r3, r2
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2201      	movs	r2, #1
 8007de2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007de4:	78fb      	ldrb	r3, [r7, #3]
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d101      	bne.n	8007dfe <HAL_PCD_EP_SetStall+0x82>
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	e01d      	b.n	8007e3a <HAL_PCD_EP_SetStall+0xbe>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68f9      	ldr	r1, [r7, #12]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f003 fc71 	bl	800b6f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e12:	78fb      	ldrb	r3, [r7, #3]
 8007e14:	f003 030f 	and.w	r3, r3, #15
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d109      	bne.n	8007e30 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6818      	ldr	r0, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	7999      	ldrb	r1, [r3, #6]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	f003 fe62 	bl	800baf4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007e4e:	78fb      	ldrb	r3, [r7, #3]
 8007e50:	f003 030f 	and.w	r3, r3, #15
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	7912      	ldrb	r2, [r2, #4]
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d901      	bls.n	8007e60 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e042      	b.n	8007ee6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007e60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	da0f      	bge.n	8007e88 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	f003 020f 	and.w	r2, r3, #15
 8007e6e:	4613      	mov	r3, r2
 8007e70:	00db      	lsls	r3, r3, #3
 8007e72:	4413      	add	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	3310      	adds	r3, #16
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2201      	movs	r2, #1
 8007e84:	705a      	strb	r2, [r3, #1]
 8007e86:	e00f      	b.n	8007ea8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e88:	78fb      	ldrb	r3, [r7, #3]
 8007e8a:	f003 020f 	and.w	r2, r3, #15
 8007e8e:	4613      	mov	r3, r2
 8007e90:	00db      	lsls	r3, r3, #3
 8007e92:	4413      	add	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007eae:	78fb      	ldrb	r3, [r7, #3]
 8007eb0:	f003 030f 	and.w	r3, r3, #15
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d101      	bne.n	8007ec8 <HAL_PCD_EP_ClrStall+0x86>
 8007ec4:	2302      	movs	r3, #2
 8007ec6:	e00e      	b.n	8007ee6 <HAL_PCD_EP_ClrStall+0xa4>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68f9      	ldr	r1, [r7, #12]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f003 fc7a 	bl	800b7d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007efa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	da0c      	bge.n	8007f1c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f02:	78fb      	ldrb	r3, [r7, #3]
 8007f04:	f003 020f 	and.w	r2, r3, #15
 8007f08:	4613      	mov	r3, r2
 8007f0a:	00db      	lsls	r3, r3, #3
 8007f0c:	4413      	add	r3, r2
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	3310      	adds	r3, #16
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	4413      	add	r3, r2
 8007f16:	3304      	adds	r3, #4
 8007f18:	60fb      	str	r3, [r7, #12]
 8007f1a:	e00c      	b.n	8007f36 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f1c:	78fb      	ldrb	r3, [r7, #3]
 8007f1e:	f003 020f 	and.w	r2, r3, #15
 8007f22:	4613      	mov	r3, r2
 8007f24:	00db      	lsls	r3, r3, #3
 8007f26:	4413      	add	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	4413      	add	r3, r2
 8007f32:	3304      	adds	r3, #4
 8007f34:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68f9      	ldr	r1, [r7, #12]
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f003 fa99 	bl	800b474 <USB_EPStopXfer>
 8007f42:	4603      	mov	r3, r0
 8007f44:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007f46:	7afb      	ldrb	r3, [r7, #11]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08a      	sub	sp, #40	@ 0x28
 8007f54:	af02      	add	r7, sp, #8
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007f64:	683a      	ldr	r2, [r7, #0]
 8007f66:	4613      	mov	r3, r2
 8007f68:	00db      	lsls	r3, r3, #3
 8007f6a:	4413      	add	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	3310      	adds	r3, #16
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	4413      	add	r3, r2
 8007f74:	3304      	adds	r3, #4
 8007f76:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	695a      	ldr	r2, [r3, #20]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d901      	bls.n	8007f88 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e06b      	b.n	8008060 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	691a      	ldr	r2, [r3, #16]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	69fa      	ldr	r2, [r7, #28]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d902      	bls.n	8007fa4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	3303      	adds	r3, #3
 8007fa8:	089b      	lsrs	r3, r3, #2
 8007faa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007fac:	e02a      	b.n	8008004 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	691a      	ldr	r2, [r3, #16]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	69fa      	ldr	r2, [r7, #28]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d902      	bls.n	8007fca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007fca:	69fb      	ldr	r3, [r7, #28]
 8007fcc:	3303      	adds	r3, #3
 8007fce:	089b      	lsrs	r3, r3, #2
 8007fd0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	68d9      	ldr	r1, [r3, #12]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	6978      	ldr	r0, [r7, #20]
 8007fe8:	f003 faee 	bl	800b5c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	68da      	ldr	r2, [r3, #12]
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	441a      	add	r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	695a      	ldr	r2, [r3, #20]
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	441a      	add	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	015a      	lsls	r2, r3, #5
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	4413      	add	r3, r2
 800800c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008014:	69ba      	ldr	r2, [r7, #24]
 8008016:	429a      	cmp	r2, r3
 8008018:	d809      	bhi.n	800802e <PCD_WriteEmptyTxFifo+0xde>
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	695a      	ldr	r2, [r3, #20]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008022:	429a      	cmp	r2, r3
 8008024:	d203      	bcs.n	800802e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1bf      	bne.n	8007fae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	691a      	ldr	r2, [r3, #16]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	429a      	cmp	r2, r3
 8008038:	d811      	bhi.n	800805e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	f003 030f 	and.w	r3, r3, #15
 8008040:	2201      	movs	r2, #1
 8008042:	fa02 f303 	lsl.w	r3, r2, r3
 8008046:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800804e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	43db      	mvns	r3, r3
 8008054:	6939      	ldr	r1, [r7, #16]
 8008056:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800805a:	4013      	ands	r3, r2
 800805c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3720      	adds	r7, #32
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b088      	sub	sp, #32
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	333c      	adds	r3, #60	@ 0x3c
 8008080:	3304      	adds	r3, #4
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	015a      	lsls	r2, r3, #5
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	4413      	add	r3, r2
 800808e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	799b      	ldrb	r3, [r3, #6]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d17b      	bne.n	8008196 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	f003 0308 	and.w	r3, r3, #8
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d015      	beq.n	80080d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	4a61      	ldr	r2, [pc, #388]	@ (8008230 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	f240 80b9 	bls.w	8008224 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f000 80b3 	beq.w	8008224 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	015a      	lsls	r2, r3, #5
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	4413      	add	r3, r2
 80080c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ca:	461a      	mov	r2, r3
 80080cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080d0:	6093      	str	r3, [r2, #8]
 80080d2:	e0a7      	b.n	8008224 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f003 0320 	and.w	r3, r3, #32
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d009      	beq.n	80080f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ea:	461a      	mov	r2, r3
 80080ec:	2320      	movs	r3, #32
 80080ee:	6093      	str	r3, [r2, #8]
 80080f0:	e098      	b.n	8008224 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f040 8093 	bne.w	8008224 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	4a4b      	ldr	r2, [pc, #300]	@ (8008230 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d90f      	bls.n	8008126 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00a      	beq.n	8008126 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	015a      	lsls	r2, r3, #5
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	4413      	add	r3, r2
 8008118:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800811c:	461a      	mov	r2, r3
 800811e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008122:	6093      	str	r3, [r2, #8]
 8008124:	e07e      	b.n	8008224 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	4613      	mov	r3, r2
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	4413      	add	r3, r2
 8008138:	3304      	adds	r3, #4
 800813a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6a1a      	ldr	r2, [r3, #32]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	0159      	lsls	r1, r3, #5
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	440b      	add	r3, r1
 8008148:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008152:	1ad2      	subs	r2, r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d114      	bne.n	8008188 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d109      	bne.n	800817a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6818      	ldr	r0, [r3, #0]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008170:	461a      	mov	r2, r3
 8008172:	2101      	movs	r1, #1
 8008174:	f003 fcbe 	bl	800baf4 <USB_EP0_OutStart>
 8008178:	e006      	b.n	8008188 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	68da      	ldr	r2, [r3, #12]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	441a      	add	r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	b2db      	uxtb	r3, r3
 800818c:	4619      	mov	r1, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f007 feb6 	bl	800ff00 <HAL_PCD_DataOutStageCallback>
 8008194:	e046      	b.n	8008224 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	4a26      	ldr	r2, [pc, #152]	@ (8008234 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d124      	bne.n	80081e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d00a      	beq.n	80081be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	015a      	lsls	r2, r3, #5
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	4413      	add	r3, r2
 80081b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081b4:	461a      	mov	r2, r3
 80081b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081ba:	6093      	str	r3, [r2, #8]
 80081bc:	e032      	b.n	8008224 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	f003 0320 	and.w	r3, r3, #32
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d008      	beq.n	80081da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081d4:	461a      	mov	r2, r3
 80081d6:	2320      	movs	r3, #32
 80081d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f007 fe8d 	bl	800ff00 <HAL_PCD_DataOutStageCallback>
 80081e6:	e01d      	b.n	8008224 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d114      	bne.n	8008218 <PCD_EP_OutXfrComplete_int+0x1b0>
 80081ee:	6879      	ldr	r1, [r7, #4]
 80081f0:	683a      	ldr	r2, [r7, #0]
 80081f2:	4613      	mov	r3, r2
 80081f4:	00db      	lsls	r3, r3, #3
 80081f6:	4413      	add	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	440b      	add	r3, r1
 80081fc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d108      	bne.n	8008218 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6818      	ldr	r0, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008210:	461a      	mov	r2, r3
 8008212:	2100      	movs	r1, #0
 8008214:	f003 fc6e 	bl	800baf4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	b2db      	uxtb	r3, r3
 800821c:	4619      	mov	r1, r3
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f007 fe6e 	bl	800ff00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3720      	adds	r7, #32
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	4f54300a 	.word	0x4f54300a
 8008234:	4f54310a 	.word	0x4f54310a

08008238 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	333c      	adds	r3, #60	@ 0x3c
 8008250:	3304      	adds	r3, #4
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	015a      	lsls	r2, r3, #5
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	4413      	add	r3, r2
 800825e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	4a15      	ldr	r2, [pc, #84]	@ (80082c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d90e      	bls.n	800828c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008274:	2b00      	cmp	r3, #0
 8008276:	d009      	beq.n	800828c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	4413      	add	r3, r2
 8008280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008284:	461a      	mov	r2, r3
 8008286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800828a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f007 fe25 	bl	800fedc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	4a0a      	ldr	r2, [pc, #40]	@ (80082c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d90c      	bls.n	80082b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	799b      	ldrb	r3, [r3, #6]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d108      	bne.n	80082b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80082ac:	461a      	mov	r2, r3
 80082ae:	2101      	movs	r1, #1
 80082b0:	f003 fc20 	bl	800baf4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3718      	adds	r7, #24
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	bf00      	nop
 80082c0:	4f54300a 	.word	0x4f54300a

080082c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	460b      	mov	r3, r1
 80082ce:	70fb      	strb	r3, [r7, #3]
 80082d0:	4613      	mov	r3, r2
 80082d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80082dc:	78fb      	ldrb	r3, [r7, #3]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d107      	bne.n	80082f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80082e2:	883b      	ldrh	r3, [r7, #0]
 80082e4:	0419      	lsls	r1, r3, #16
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	430a      	orrs	r2, r1
 80082ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80082f0:	e028      	b.n	8008344 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f8:	0c1b      	lsrs	r3, r3, #16
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	4413      	add	r3, r2
 80082fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008300:	2300      	movs	r3, #0
 8008302:	73fb      	strb	r3, [r7, #15]
 8008304:	e00d      	b.n	8008322 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	7bfb      	ldrb	r3, [r7, #15]
 800830c:	3340      	adds	r3, #64	@ 0x40
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	0c1b      	lsrs	r3, r3, #16
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	4413      	add	r3, r2
 800831a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800831c:	7bfb      	ldrb	r3, [r7, #15]
 800831e:	3301      	adds	r3, #1
 8008320:	73fb      	strb	r3, [r7, #15]
 8008322:	7bfa      	ldrb	r2, [r7, #15]
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	3b01      	subs	r3, #1
 8008328:	429a      	cmp	r2, r3
 800832a:	d3ec      	bcc.n	8008306 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800832c:	883b      	ldrh	r3, [r7, #0]
 800832e:	0418      	lsls	r0, r3, #16
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6819      	ldr	r1, [r3, #0]
 8008334:	78fb      	ldrb	r3, [r7, #3]
 8008336:	3b01      	subs	r3, #1
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	4302      	orrs	r2, r0
 800833c:	3340      	adds	r3, #64	@ 0x40
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	440b      	add	r3, r1
 8008342:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008352:	b480      	push	{r7}
 8008354:	b083      	sub	sp, #12
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
 800835a:	460b      	mov	r3, r1
 800835c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	887a      	ldrh	r2, [r7, #2]
 8008364:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008380:	bf00      	nop
 8008382:	370c      	adds	r7, #12
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d101      	bne.n	800839e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	e267      	b.n	800886e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 0301 	and.w	r3, r3, #1
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d075      	beq.n	8008496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083aa:	4b88      	ldr	r3, [pc, #544]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	f003 030c 	and.w	r3, r3, #12
 80083b2:	2b04      	cmp	r3, #4
 80083b4:	d00c      	beq.n	80083d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083b6:	4b85      	ldr	r3, [pc, #532]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80083be:	2b08      	cmp	r3, #8
 80083c0:	d112      	bne.n	80083e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083c2:	4b82      	ldr	r3, [pc, #520]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083ce:	d10b      	bne.n	80083e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083d0:	4b7e      	ldr	r3, [pc, #504]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d05b      	beq.n	8008494 <HAL_RCC_OscConfig+0x108>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d157      	bne.n	8008494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e242      	b.n	800886e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083f0:	d106      	bne.n	8008400 <HAL_RCC_OscConfig+0x74>
 80083f2:	4b76      	ldr	r3, [pc, #472]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a75      	ldr	r2, [pc, #468]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 80083f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	e01d      	b.n	800843c <HAL_RCC_OscConfig+0xb0>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008408:	d10c      	bne.n	8008424 <HAL_RCC_OscConfig+0x98>
 800840a:	4b70      	ldr	r3, [pc, #448]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a6f      	ldr	r2, [pc, #444]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 8008410:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008414:	6013      	str	r3, [r2, #0]
 8008416:	4b6d      	ldr	r3, [pc, #436]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a6c      	ldr	r2, [pc, #432]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 800841c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008420:	6013      	str	r3, [r2, #0]
 8008422:	e00b      	b.n	800843c <HAL_RCC_OscConfig+0xb0>
 8008424:	4b69      	ldr	r3, [pc, #420]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a68      	ldr	r2, [pc, #416]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 800842a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800842e:	6013      	str	r3, [r2, #0]
 8008430:	4b66      	ldr	r3, [pc, #408]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a65      	ldr	r2, [pc, #404]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 8008436:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800843a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d013      	beq.n	800846c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008444:	f7fc ff8a 	bl	800535c <HAL_GetTick>
 8008448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800844a:	e008      	b.n	800845e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800844c:	f7fc ff86 	bl	800535c <HAL_GetTick>
 8008450:	4602      	mov	r2, r0
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	2b64      	cmp	r3, #100	@ 0x64
 8008458:	d901      	bls.n	800845e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e207      	b.n	800886e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800845e:	4b5b      	ldr	r3, [pc, #364]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d0f0      	beq.n	800844c <HAL_RCC_OscConfig+0xc0>
 800846a:	e014      	b.n	8008496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800846c:	f7fc ff76 	bl	800535c <HAL_GetTick>
 8008470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008472:	e008      	b.n	8008486 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008474:	f7fc ff72 	bl	800535c <HAL_GetTick>
 8008478:	4602      	mov	r2, r0
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	2b64      	cmp	r3, #100	@ 0x64
 8008480:	d901      	bls.n	8008486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e1f3      	b.n	800886e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008486:	4b51      	ldr	r3, [pc, #324]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1f0      	bne.n	8008474 <HAL_RCC_OscConfig+0xe8>
 8008492:	e000      	b.n	8008496 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0302 	and.w	r3, r3, #2
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d063      	beq.n	800856a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084a2:	4b4a      	ldr	r3, [pc, #296]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f003 030c 	and.w	r3, r3, #12
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00b      	beq.n	80084c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084ae:	4b47      	ldr	r3, [pc, #284]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80084b6:	2b08      	cmp	r3, #8
 80084b8:	d11c      	bne.n	80084f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084ba:	4b44      	ldr	r3, [pc, #272]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d116      	bne.n	80084f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084c6:	4b41      	ldr	r3, [pc, #260]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d005      	beq.n	80084de <HAL_RCC_OscConfig+0x152>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d001      	beq.n	80084de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e1c7      	b.n	800886e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084de:	4b3b      	ldr	r3, [pc, #236]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	4937      	ldr	r1, [pc, #220]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 80084ee:	4313      	orrs	r3, r2
 80084f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084f2:	e03a      	b.n	800856a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d020      	beq.n	800853e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084fc:	4b34      	ldr	r3, [pc, #208]	@ (80085d0 <HAL_RCC_OscConfig+0x244>)
 80084fe:	2201      	movs	r2, #1
 8008500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008502:	f7fc ff2b 	bl	800535c <HAL_GetTick>
 8008506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008508:	e008      	b.n	800851c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800850a:	f7fc ff27 	bl	800535c <HAL_GetTick>
 800850e:	4602      	mov	r2, r0
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	2b02      	cmp	r3, #2
 8008516:	d901      	bls.n	800851c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e1a8      	b.n	800886e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800851c:	4b2b      	ldr	r3, [pc, #172]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0302 	and.w	r3, r3, #2
 8008524:	2b00      	cmp	r3, #0
 8008526:	d0f0      	beq.n	800850a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008528:	4b28      	ldr	r3, [pc, #160]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	00db      	lsls	r3, r3, #3
 8008536:	4925      	ldr	r1, [pc, #148]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 8008538:	4313      	orrs	r3, r2
 800853a:	600b      	str	r3, [r1, #0]
 800853c:	e015      	b.n	800856a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800853e:	4b24      	ldr	r3, [pc, #144]	@ (80085d0 <HAL_RCC_OscConfig+0x244>)
 8008540:	2200      	movs	r2, #0
 8008542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008544:	f7fc ff0a 	bl	800535c <HAL_GetTick>
 8008548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800854a:	e008      	b.n	800855e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800854c:	f7fc ff06 	bl	800535c <HAL_GetTick>
 8008550:	4602      	mov	r2, r0
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	2b02      	cmp	r3, #2
 8008558:	d901      	bls.n	800855e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e187      	b.n	800886e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800855e:	4b1b      	ldr	r3, [pc, #108]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0302 	and.w	r3, r3, #2
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1f0      	bne.n	800854c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0308 	and.w	r3, r3, #8
 8008572:	2b00      	cmp	r3, #0
 8008574:	d036      	beq.n	80085e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	695b      	ldr	r3, [r3, #20]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d016      	beq.n	80085ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800857e:	4b15      	ldr	r3, [pc, #84]	@ (80085d4 <HAL_RCC_OscConfig+0x248>)
 8008580:	2201      	movs	r2, #1
 8008582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008584:	f7fc feea 	bl	800535c <HAL_GetTick>
 8008588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800858a:	e008      	b.n	800859e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800858c:	f7fc fee6 	bl	800535c <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	2b02      	cmp	r3, #2
 8008598:	d901      	bls.n	800859e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800859a:	2303      	movs	r3, #3
 800859c:	e167      	b.n	800886e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800859e:	4b0b      	ldr	r3, [pc, #44]	@ (80085cc <HAL_RCC_OscConfig+0x240>)
 80085a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085a2:	f003 0302 	and.w	r3, r3, #2
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d0f0      	beq.n	800858c <HAL_RCC_OscConfig+0x200>
 80085aa:	e01b      	b.n	80085e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085ac:	4b09      	ldr	r3, [pc, #36]	@ (80085d4 <HAL_RCC_OscConfig+0x248>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085b2:	f7fc fed3 	bl	800535c <HAL_GetTick>
 80085b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085b8:	e00e      	b.n	80085d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80085ba:	f7fc fecf 	bl	800535c <HAL_GetTick>
 80085be:	4602      	mov	r2, r0
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	1ad3      	subs	r3, r2, r3
 80085c4:	2b02      	cmp	r3, #2
 80085c6:	d907      	bls.n	80085d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80085c8:	2303      	movs	r3, #3
 80085ca:	e150      	b.n	800886e <HAL_RCC_OscConfig+0x4e2>
 80085cc:	40023800 	.word	0x40023800
 80085d0:	42470000 	.word	0x42470000
 80085d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085d8:	4b88      	ldr	r3, [pc, #544]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 80085da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085dc:	f003 0302 	and.w	r3, r3, #2
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1ea      	bne.n	80085ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0304 	and.w	r3, r3, #4
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 8097 	beq.w	8008720 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085f2:	2300      	movs	r3, #0
 80085f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80085f6:	4b81      	ldr	r3, [pc, #516]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 80085f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d10f      	bne.n	8008622 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008602:	2300      	movs	r3, #0
 8008604:	60bb      	str	r3, [r7, #8]
 8008606:	4b7d      	ldr	r3, [pc, #500]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 8008608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800860a:	4a7c      	ldr	r2, [pc, #496]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 800860c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008610:	6413      	str	r3, [r2, #64]	@ 0x40
 8008612:	4b7a      	ldr	r3, [pc, #488]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 8008614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800861a:	60bb      	str	r3, [r7, #8]
 800861c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800861e:	2301      	movs	r3, #1
 8008620:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008622:	4b77      	ldr	r3, [pc, #476]	@ (8008800 <HAL_RCC_OscConfig+0x474>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800862a:	2b00      	cmp	r3, #0
 800862c:	d118      	bne.n	8008660 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800862e:	4b74      	ldr	r3, [pc, #464]	@ (8008800 <HAL_RCC_OscConfig+0x474>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a73      	ldr	r2, [pc, #460]	@ (8008800 <HAL_RCC_OscConfig+0x474>)
 8008634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800863a:	f7fc fe8f 	bl	800535c <HAL_GetTick>
 800863e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008640:	e008      	b.n	8008654 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008642:	f7fc fe8b 	bl	800535c <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	2b02      	cmp	r3, #2
 800864e:	d901      	bls.n	8008654 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008650:	2303      	movs	r3, #3
 8008652:	e10c      	b.n	800886e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008654:	4b6a      	ldr	r3, [pc, #424]	@ (8008800 <HAL_RCC_OscConfig+0x474>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800865c:	2b00      	cmp	r3, #0
 800865e:	d0f0      	beq.n	8008642 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	2b01      	cmp	r3, #1
 8008666:	d106      	bne.n	8008676 <HAL_RCC_OscConfig+0x2ea>
 8008668:	4b64      	ldr	r3, [pc, #400]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 800866a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800866c:	4a63      	ldr	r2, [pc, #396]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 800866e:	f043 0301 	orr.w	r3, r3, #1
 8008672:	6713      	str	r3, [r2, #112]	@ 0x70
 8008674:	e01c      	b.n	80086b0 <HAL_RCC_OscConfig+0x324>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	2b05      	cmp	r3, #5
 800867c:	d10c      	bne.n	8008698 <HAL_RCC_OscConfig+0x30c>
 800867e:	4b5f      	ldr	r3, [pc, #380]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 8008680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008682:	4a5e      	ldr	r2, [pc, #376]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 8008684:	f043 0304 	orr.w	r3, r3, #4
 8008688:	6713      	str	r3, [r2, #112]	@ 0x70
 800868a:	4b5c      	ldr	r3, [pc, #368]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 800868c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800868e:	4a5b      	ldr	r2, [pc, #364]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 8008690:	f043 0301 	orr.w	r3, r3, #1
 8008694:	6713      	str	r3, [r2, #112]	@ 0x70
 8008696:	e00b      	b.n	80086b0 <HAL_RCC_OscConfig+0x324>
 8008698:	4b58      	ldr	r3, [pc, #352]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 800869a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800869c:	4a57      	ldr	r2, [pc, #348]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 800869e:	f023 0301 	bic.w	r3, r3, #1
 80086a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80086a4:	4b55      	ldr	r3, [pc, #340]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 80086a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086a8:	4a54      	ldr	r2, [pc, #336]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 80086aa:	f023 0304 	bic.w	r3, r3, #4
 80086ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d015      	beq.n	80086e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086b8:	f7fc fe50 	bl	800535c <HAL_GetTick>
 80086bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086be:	e00a      	b.n	80086d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086c0:	f7fc fe4c 	bl	800535c <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	1ad3      	subs	r3, r2, r3
 80086ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d901      	bls.n	80086d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e0cb      	b.n	800886e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086d6:	4b49      	ldr	r3, [pc, #292]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 80086d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086da:	f003 0302 	and.w	r3, r3, #2
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d0ee      	beq.n	80086c0 <HAL_RCC_OscConfig+0x334>
 80086e2:	e014      	b.n	800870e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80086e4:	f7fc fe3a 	bl	800535c <HAL_GetTick>
 80086e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086ea:	e00a      	b.n	8008702 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086ec:	f7fc fe36 	bl	800535c <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d901      	bls.n	8008702 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e0b5      	b.n	800886e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008702:	4b3e      	ldr	r3, [pc, #248]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 8008704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008706:	f003 0302 	and.w	r3, r3, #2
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1ee      	bne.n	80086ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800870e:	7dfb      	ldrb	r3, [r7, #23]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d105      	bne.n	8008720 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008714:	4b39      	ldr	r3, [pc, #228]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 8008716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008718:	4a38      	ldr	r2, [pc, #224]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 800871a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800871e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 80a1 	beq.w	800886c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800872a:	4b34      	ldr	r3, [pc, #208]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	f003 030c 	and.w	r3, r3, #12
 8008732:	2b08      	cmp	r3, #8
 8008734:	d05c      	beq.n	80087f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	2b02      	cmp	r3, #2
 800873c:	d141      	bne.n	80087c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800873e:	4b31      	ldr	r3, [pc, #196]	@ (8008804 <HAL_RCC_OscConfig+0x478>)
 8008740:	2200      	movs	r2, #0
 8008742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008744:	f7fc fe0a 	bl	800535c <HAL_GetTick>
 8008748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800874a:	e008      	b.n	800875e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800874c:	f7fc fe06 	bl	800535c <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b02      	cmp	r3, #2
 8008758:	d901      	bls.n	800875e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e087      	b.n	800886e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800875e:	4b27      	ldr	r3, [pc, #156]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1f0      	bne.n	800874c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	69da      	ldr	r2, [r3, #28]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	431a      	orrs	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008778:	019b      	lsls	r3, r3, #6
 800877a:	431a      	orrs	r2, r3
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	3b01      	subs	r3, #1
 8008784:	041b      	lsls	r3, r3, #16
 8008786:	431a      	orrs	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800878c:	061b      	lsls	r3, r3, #24
 800878e:	491b      	ldr	r1, [pc, #108]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 8008790:	4313      	orrs	r3, r2
 8008792:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008794:	4b1b      	ldr	r3, [pc, #108]	@ (8008804 <HAL_RCC_OscConfig+0x478>)
 8008796:	2201      	movs	r2, #1
 8008798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800879a:	f7fc fddf 	bl	800535c <HAL_GetTick>
 800879e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087a0:	e008      	b.n	80087b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087a2:	f7fc fddb 	bl	800535c <HAL_GetTick>
 80087a6:	4602      	mov	r2, r0
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	1ad3      	subs	r3, r2, r3
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d901      	bls.n	80087b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80087b0:	2303      	movs	r3, #3
 80087b2:	e05c      	b.n	800886e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087b4:	4b11      	ldr	r3, [pc, #68]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d0f0      	beq.n	80087a2 <HAL_RCC_OscConfig+0x416>
 80087c0:	e054      	b.n	800886c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087c2:	4b10      	ldr	r3, [pc, #64]	@ (8008804 <HAL_RCC_OscConfig+0x478>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087c8:	f7fc fdc8 	bl	800535c <HAL_GetTick>
 80087cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087ce:	e008      	b.n	80087e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087d0:	f7fc fdc4 	bl	800535c <HAL_GetTick>
 80087d4:	4602      	mov	r2, r0
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	1ad3      	subs	r3, r2, r3
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d901      	bls.n	80087e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e045      	b.n	800886e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087e2:	4b06      	ldr	r3, [pc, #24]	@ (80087fc <HAL_RCC_OscConfig+0x470>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1f0      	bne.n	80087d0 <HAL_RCC_OscConfig+0x444>
 80087ee:	e03d      	b.n	800886c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d107      	bne.n	8008808 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e038      	b.n	800886e <HAL_RCC_OscConfig+0x4e2>
 80087fc:	40023800 	.word	0x40023800
 8008800:	40007000 	.word	0x40007000
 8008804:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008808:	4b1b      	ldr	r3, [pc, #108]	@ (8008878 <HAL_RCC_OscConfig+0x4ec>)
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d028      	beq.n	8008868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008820:	429a      	cmp	r2, r3
 8008822:	d121      	bne.n	8008868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800882e:	429a      	cmp	r2, r3
 8008830:	d11a      	bne.n	8008868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008838:	4013      	ands	r3, r2
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800883e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008840:	4293      	cmp	r3, r2
 8008842:	d111      	bne.n	8008868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800884e:	085b      	lsrs	r3, r3, #1
 8008850:	3b01      	subs	r3, #1
 8008852:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008854:	429a      	cmp	r2, r3
 8008856:	d107      	bne.n	8008868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008862:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008864:	429a      	cmp	r2, r3
 8008866:	d001      	beq.n	800886c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e000      	b.n	800886e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3718      	adds	r7, #24
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	40023800 	.word	0x40023800

0800887c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d101      	bne.n	8008890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e0cc      	b.n	8008a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008890:	4b68      	ldr	r3, [pc, #416]	@ (8008a34 <HAL_RCC_ClockConfig+0x1b8>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0307 	and.w	r3, r3, #7
 8008898:	683a      	ldr	r2, [r7, #0]
 800889a:	429a      	cmp	r2, r3
 800889c:	d90c      	bls.n	80088b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800889e:	4b65      	ldr	r3, [pc, #404]	@ (8008a34 <HAL_RCC_ClockConfig+0x1b8>)
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	b2d2      	uxtb	r2, r2
 80088a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088a6:	4b63      	ldr	r3, [pc, #396]	@ (8008a34 <HAL_RCC_ClockConfig+0x1b8>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0307 	and.w	r3, r3, #7
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d001      	beq.n	80088b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	e0b8      	b.n	8008a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 0302 	and.w	r3, r3, #2
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d020      	beq.n	8008906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 0304 	and.w	r3, r3, #4
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d005      	beq.n	80088dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088d0:	4b59      	ldr	r3, [pc, #356]	@ (8008a38 <HAL_RCC_ClockConfig+0x1bc>)
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	4a58      	ldr	r2, [pc, #352]	@ (8008a38 <HAL_RCC_ClockConfig+0x1bc>)
 80088d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80088da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 0308 	and.w	r3, r3, #8
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d005      	beq.n	80088f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80088e8:	4b53      	ldr	r3, [pc, #332]	@ (8008a38 <HAL_RCC_ClockConfig+0x1bc>)
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	4a52      	ldr	r2, [pc, #328]	@ (8008a38 <HAL_RCC_ClockConfig+0x1bc>)
 80088ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80088f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088f4:	4b50      	ldr	r3, [pc, #320]	@ (8008a38 <HAL_RCC_ClockConfig+0x1bc>)
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	494d      	ldr	r1, [pc, #308]	@ (8008a38 <HAL_RCC_ClockConfig+0x1bc>)
 8008902:	4313      	orrs	r3, r2
 8008904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	2b00      	cmp	r3, #0
 8008910:	d044      	beq.n	800899c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	2b01      	cmp	r3, #1
 8008918:	d107      	bne.n	800892a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800891a:	4b47      	ldr	r3, [pc, #284]	@ (8008a38 <HAL_RCC_ClockConfig+0x1bc>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d119      	bne.n	800895a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e07f      	b.n	8008a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	2b02      	cmp	r3, #2
 8008930:	d003      	beq.n	800893a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008936:	2b03      	cmp	r3, #3
 8008938:	d107      	bne.n	800894a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800893a:	4b3f      	ldr	r3, [pc, #252]	@ (8008a38 <HAL_RCC_ClockConfig+0x1bc>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d109      	bne.n	800895a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e06f      	b.n	8008a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800894a:	4b3b      	ldr	r3, [pc, #236]	@ (8008a38 <HAL_RCC_ClockConfig+0x1bc>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0302 	and.w	r3, r3, #2
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e067      	b.n	8008a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800895a:	4b37      	ldr	r3, [pc, #220]	@ (8008a38 <HAL_RCC_ClockConfig+0x1bc>)
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f023 0203 	bic.w	r2, r3, #3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	4934      	ldr	r1, [pc, #208]	@ (8008a38 <HAL_RCC_ClockConfig+0x1bc>)
 8008968:	4313      	orrs	r3, r2
 800896a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800896c:	f7fc fcf6 	bl	800535c <HAL_GetTick>
 8008970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008972:	e00a      	b.n	800898a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008974:	f7fc fcf2 	bl	800535c <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008982:	4293      	cmp	r3, r2
 8008984:	d901      	bls.n	800898a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e04f      	b.n	8008a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800898a:	4b2b      	ldr	r3, [pc, #172]	@ (8008a38 <HAL_RCC_ClockConfig+0x1bc>)
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f003 020c 	and.w	r2, r3, #12
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	429a      	cmp	r2, r3
 800899a:	d1eb      	bne.n	8008974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800899c:	4b25      	ldr	r3, [pc, #148]	@ (8008a34 <HAL_RCC_ClockConfig+0x1b8>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 0307 	and.w	r3, r3, #7
 80089a4:	683a      	ldr	r2, [r7, #0]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d20c      	bcs.n	80089c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089aa:	4b22      	ldr	r3, [pc, #136]	@ (8008a34 <HAL_RCC_ClockConfig+0x1b8>)
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	b2d2      	uxtb	r2, r2
 80089b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089b2:	4b20      	ldr	r3, [pc, #128]	@ (8008a34 <HAL_RCC_ClockConfig+0x1b8>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0307 	and.w	r3, r3, #7
 80089ba:	683a      	ldr	r2, [r7, #0]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d001      	beq.n	80089c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	e032      	b.n	8008a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f003 0304 	and.w	r3, r3, #4
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d008      	beq.n	80089e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089d0:	4b19      	ldr	r3, [pc, #100]	@ (8008a38 <HAL_RCC_ClockConfig+0x1bc>)
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	4916      	ldr	r1, [pc, #88]	@ (8008a38 <HAL_RCC_ClockConfig+0x1bc>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 0308 	and.w	r3, r3, #8
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d009      	beq.n	8008a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80089ee:	4b12      	ldr	r3, [pc, #72]	@ (8008a38 <HAL_RCC_ClockConfig+0x1bc>)
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	00db      	lsls	r3, r3, #3
 80089fc:	490e      	ldr	r1, [pc, #56]	@ (8008a38 <HAL_RCC_ClockConfig+0x1bc>)
 80089fe:	4313      	orrs	r3, r2
 8008a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a02:	f000 f821 	bl	8008a48 <HAL_RCC_GetSysClockFreq>
 8008a06:	4602      	mov	r2, r0
 8008a08:	4b0b      	ldr	r3, [pc, #44]	@ (8008a38 <HAL_RCC_ClockConfig+0x1bc>)
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	091b      	lsrs	r3, r3, #4
 8008a0e:	f003 030f 	and.w	r3, r3, #15
 8008a12:	490a      	ldr	r1, [pc, #40]	@ (8008a3c <HAL_RCC_ClockConfig+0x1c0>)
 8008a14:	5ccb      	ldrb	r3, [r1, r3]
 8008a16:	fa22 f303 	lsr.w	r3, r2, r3
 8008a1a:	4a09      	ldr	r2, [pc, #36]	@ (8008a40 <HAL_RCC_ClockConfig+0x1c4>)
 8008a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a1e:	4b09      	ldr	r3, [pc, #36]	@ (8008a44 <HAL_RCC_ClockConfig+0x1c8>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fc fc56 	bl	80052d4 <HAL_InitTick>

  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	40023c00 	.word	0x40023c00
 8008a38:	40023800 	.word	0x40023800
 8008a3c:	08013560 	.word	0x08013560
 8008a40:	20000028 	.word	0x20000028
 8008a44:	20000060 	.word	0x20000060

08008a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a4c:	b090      	sub	sp, #64	@ 0x40
 8008a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a54:	2300      	movs	r3, #0
 8008a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a58:	2300      	movs	r3, #0
 8008a5a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a60:	4b59      	ldr	r3, [pc, #356]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	f003 030c 	and.w	r3, r3, #12
 8008a68:	2b08      	cmp	r3, #8
 8008a6a:	d00d      	beq.n	8008a88 <HAL_RCC_GetSysClockFreq+0x40>
 8008a6c:	2b08      	cmp	r3, #8
 8008a6e:	f200 80a1 	bhi.w	8008bb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d002      	beq.n	8008a7c <HAL_RCC_GetSysClockFreq+0x34>
 8008a76:	2b04      	cmp	r3, #4
 8008a78:	d003      	beq.n	8008a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8008a7a:	e09b      	b.n	8008bb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a7c:	4b53      	ldr	r3, [pc, #332]	@ (8008bcc <HAL_RCC_GetSysClockFreq+0x184>)
 8008a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8008a80:	e09b      	b.n	8008bba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a82:	4b53      	ldr	r3, [pc, #332]	@ (8008bd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008a84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008a86:	e098      	b.n	8008bba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a88:	4b4f      	ldr	r3, [pc, #316]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a90:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a92:	4b4d      	ldr	r3, [pc, #308]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d028      	beq.n	8008af0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	099b      	lsrs	r3, r3, #6
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	623b      	str	r3, [r7, #32]
 8008aa8:	627a      	str	r2, [r7, #36]	@ 0x24
 8008aaa:	6a3b      	ldr	r3, [r7, #32]
 8008aac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	4b47      	ldr	r3, [pc, #284]	@ (8008bd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008ab4:	fb03 f201 	mul.w	r2, r3, r1
 8008ab8:	2300      	movs	r3, #0
 8008aba:	fb00 f303 	mul.w	r3, r0, r3
 8008abe:	4413      	add	r3, r2
 8008ac0:	4a43      	ldr	r2, [pc, #268]	@ (8008bd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008ac2:	fba0 1202 	umull	r1, r2, r0, r2
 8008ac6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ac8:	460a      	mov	r2, r1
 8008aca:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008acc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ace:	4413      	add	r3, r2
 8008ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	61bb      	str	r3, [r7, #24]
 8008ad8:	61fa      	str	r2, [r7, #28]
 8008ada:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ade:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008ae2:	f7f8 f8d9 	bl	8000c98 <__aeabi_uldivmod>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4613      	mov	r3, r2
 8008aec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008aee:	e053      	b.n	8008b98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008af0:	4b35      	ldr	r3, [pc, #212]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	099b      	lsrs	r3, r3, #6
 8008af6:	2200      	movs	r2, #0
 8008af8:	613b      	str	r3, [r7, #16]
 8008afa:	617a      	str	r2, [r7, #20]
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008b02:	f04f 0b00 	mov.w	fp, #0
 8008b06:	4652      	mov	r2, sl
 8008b08:	465b      	mov	r3, fp
 8008b0a:	f04f 0000 	mov.w	r0, #0
 8008b0e:	f04f 0100 	mov.w	r1, #0
 8008b12:	0159      	lsls	r1, r3, #5
 8008b14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b18:	0150      	lsls	r0, r2, #5
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	ebb2 080a 	subs.w	r8, r2, sl
 8008b22:	eb63 090b 	sbc.w	r9, r3, fp
 8008b26:	f04f 0200 	mov.w	r2, #0
 8008b2a:	f04f 0300 	mov.w	r3, #0
 8008b2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008b32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008b36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008b3a:	ebb2 0408 	subs.w	r4, r2, r8
 8008b3e:	eb63 0509 	sbc.w	r5, r3, r9
 8008b42:	f04f 0200 	mov.w	r2, #0
 8008b46:	f04f 0300 	mov.w	r3, #0
 8008b4a:	00eb      	lsls	r3, r5, #3
 8008b4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b50:	00e2      	lsls	r2, r4, #3
 8008b52:	4614      	mov	r4, r2
 8008b54:	461d      	mov	r5, r3
 8008b56:	eb14 030a 	adds.w	r3, r4, sl
 8008b5a:	603b      	str	r3, [r7, #0]
 8008b5c:	eb45 030b 	adc.w	r3, r5, fp
 8008b60:	607b      	str	r3, [r7, #4]
 8008b62:	f04f 0200 	mov.w	r2, #0
 8008b66:	f04f 0300 	mov.w	r3, #0
 8008b6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008b6e:	4629      	mov	r1, r5
 8008b70:	028b      	lsls	r3, r1, #10
 8008b72:	4621      	mov	r1, r4
 8008b74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008b78:	4621      	mov	r1, r4
 8008b7a:	028a      	lsls	r2, r1, #10
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b82:	2200      	movs	r2, #0
 8008b84:	60bb      	str	r3, [r7, #8]
 8008b86:	60fa      	str	r2, [r7, #12]
 8008b88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b8c:	f7f8 f884 	bl	8000c98 <__aeabi_uldivmod>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	4613      	mov	r3, r2
 8008b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008b98:	4b0b      	ldr	r3, [pc, #44]	@ (8008bc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	0c1b      	lsrs	r3, r3, #16
 8008b9e:	f003 0303 	and.w	r3, r3, #3
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	005b      	lsls	r3, r3, #1
 8008ba6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8008ba8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008bb2:	e002      	b.n	8008bba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008bb4:	4b05      	ldr	r3, [pc, #20]	@ (8008bcc <HAL_RCC_GetSysClockFreq+0x184>)
 8008bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3740      	adds	r7, #64	@ 0x40
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bc6:	bf00      	nop
 8008bc8:	40023800 	.word	0x40023800
 8008bcc:	00f42400 	.word	0x00f42400
 8008bd0:	017d7840 	.word	0x017d7840

08008bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bd8:	4b03      	ldr	r3, [pc, #12]	@ (8008be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008bda:	681b      	ldr	r3, [r3, #0]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	20000028 	.word	0x20000028

08008bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008bf0:	f7ff fff0 	bl	8008bd4 <HAL_RCC_GetHCLKFreq>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	4b05      	ldr	r3, [pc, #20]	@ (8008c0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	0a9b      	lsrs	r3, r3, #10
 8008bfc:	f003 0307 	and.w	r3, r3, #7
 8008c00:	4903      	ldr	r1, [pc, #12]	@ (8008c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c02:	5ccb      	ldrb	r3, [r1, r3]
 8008c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	40023800 	.word	0x40023800
 8008c10:	08013570 	.word	0x08013570

08008c14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d101      	bne.n	8008c26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	e07b      	b.n	8008d1e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d108      	bne.n	8008c40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c36:	d009      	beq.n	8008c4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	61da      	str	r2, [r3, #28]
 8008c3e:	e005      	b.n	8008c4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d106      	bne.n	8008c6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7fa f888 	bl	8002d7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2202      	movs	r2, #2
 8008c70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c82:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008c94:	431a      	orrs	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c9e:	431a      	orrs	r2, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	f003 0302 	and.w	r3, r3, #2
 8008ca8:	431a      	orrs	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cbc:	431a      	orrs	r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008cc6:	431a      	orrs	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a1b      	ldr	r3, [r3, #32]
 8008ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cd0:	ea42 0103 	orr.w	r1, r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	0c1b      	lsrs	r3, r3, #16
 8008cea:	f003 0104 	and.w	r1, r3, #4
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf2:	f003 0210 	and.w	r2, r3, #16
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	69da      	ldr	r2, [r3, #28]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008d0c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b088      	sub	sp, #32
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	60f8      	str	r0, [r7, #12]
 8008d2e:	60b9      	str	r1, [r7, #8]
 8008d30:	603b      	str	r3, [r7, #0]
 8008d32:	4613      	mov	r3, r2
 8008d34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d101      	bne.n	8008d48 <HAL_SPI_Transmit+0x22>
 8008d44:	2302      	movs	r3, #2
 8008d46:	e12d      	b.n	8008fa4 <HAL_SPI_Transmit+0x27e>
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d50:	f7fc fb04 	bl	800535c <HAL_GetTick>
 8008d54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008d56:	88fb      	ldrh	r3, [r7, #6]
 8008d58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d002      	beq.n	8008d6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008d66:	2302      	movs	r3, #2
 8008d68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d6a:	e116      	b.n	8008f9a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d002      	beq.n	8008d78 <HAL_SPI_Transmit+0x52>
 8008d72:	88fb      	ldrh	r3, [r7, #6]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d102      	bne.n	8008d7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008d7c:	e10d      	b.n	8008f9a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2203      	movs	r2, #3
 8008d82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	68ba      	ldr	r2, [r7, #8]
 8008d90:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	88fa      	ldrh	r2, [r7, #6]
 8008d96:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	88fa      	ldrh	r2, [r7, #6]
 8008d9c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2200      	movs	r2, #0
 8008da2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008dc4:	d10f      	bne.n	8008de6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008dd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008de4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008df0:	2b40      	cmp	r3, #64	@ 0x40
 8008df2:	d007      	beq.n	8008e04 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e0c:	d14f      	bne.n	8008eae <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d002      	beq.n	8008e1c <HAL_SPI_Transmit+0xf6>
 8008e16:	8afb      	ldrh	r3, [r7, #22]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d142      	bne.n	8008ea2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e20:	881a      	ldrh	r2, [r3, #0]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e2c:	1c9a      	adds	r2, r3, #2
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008e40:	e02f      	b.n	8008ea2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f003 0302 	and.w	r3, r3, #2
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d112      	bne.n	8008e76 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e54:	881a      	ldrh	r2, [r3, #0]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e60:	1c9a      	adds	r2, r3, #2
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	3b01      	subs	r3, #1
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008e74:	e015      	b.n	8008ea2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e76:	f7fc fa71 	bl	800535c <HAL_GetTick>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	683a      	ldr	r2, [r7, #0]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d803      	bhi.n	8008e8e <HAL_SPI_Transmit+0x168>
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8c:	d102      	bne.n	8008e94 <HAL_SPI_Transmit+0x16e>
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d106      	bne.n	8008ea2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008ea0:	e07b      	b.n	8008f9a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1ca      	bne.n	8008e42 <HAL_SPI_Transmit+0x11c>
 8008eac:	e050      	b.n	8008f50 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d002      	beq.n	8008ebc <HAL_SPI_Transmit+0x196>
 8008eb6:	8afb      	ldrh	r3, [r7, #22]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d144      	bne.n	8008f46 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	330c      	adds	r3, #12
 8008ec6:	7812      	ldrb	r2, [r2, #0]
 8008ec8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ece:	1c5a      	adds	r2, r3, #1
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	3b01      	subs	r3, #1
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008ee2:	e030      	b.n	8008f46 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f003 0302 	and.w	r3, r3, #2
 8008eee:	2b02      	cmp	r3, #2
 8008ef0:	d113      	bne.n	8008f1a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	330c      	adds	r3, #12
 8008efc:	7812      	ldrb	r2, [r2, #0]
 8008efe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f04:	1c5a      	adds	r2, r3, #1
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	3b01      	subs	r3, #1
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008f18:	e015      	b.n	8008f46 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f1a:	f7fc fa1f 	bl	800535c <HAL_GetTick>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d803      	bhi.n	8008f32 <HAL_SPI_Transmit+0x20c>
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f30:	d102      	bne.n	8008f38 <HAL_SPI_Transmit+0x212>
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d106      	bne.n	8008f46 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008f44:	e029      	b.n	8008f9a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1c9      	bne.n	8008ee4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f50:	69ba      	ldr	r2, [r7, #24]
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f000 fa03 	bl	8009360 <SPI_EndRxTxTransaction>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2220      	movs	r2, #32
 8008f64:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10a      	bne.n	8008f84 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f6e:	2300      	movs	r3, #0
 8008f70:	613b      	str	r3, [r7, #16]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	613b      	str	r3, [r7, #16]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	613b      	str	r3, [r7, #16]
 8008f82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d002      	beq.n	8008f92 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	77fb      	strb	r3, [r7, #31]
 8008f90:	e003      	b.n	8008f9a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008fa2:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3720      	adds	r7, #32
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d101      	bne.n	8008fcc <HAL_SPI_Transmit_DMA+0x20>
 8008fc8:	2302      	movs	r3, #2
 8008fca:	e097      	b.n	80090fc <HAL_SPI_Transmit_DMA+0x150>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d002      	beq.n	8008fe6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008fe4:	e085      	b.n	80090f2 <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d002      	beq.n	8008ff2 <HAL_SPI_Transmit_DMA+0x46>
 8008fec:	88fb      	ldrh	r3, [r7, #6]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d102      	bne.n	8008ff8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008ff6:	e07c      	b.n	80090f2 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2203      	movs	r2, #3
 8008ffc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	88fa      	ldrh	r2, [r7, #6]
 8009010:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	88fa      	ldrh	r2, [r7, #6]
 8009016:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2200      	movs	r2, #0
 8009028:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800903e:	d10f      	bne.n	8009060 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800904e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800905e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009064:	4a27      	ldr	r2, [pc, #156]	@ (8009104 <HAL_SPI_Transmit_DMA+0x158>)
 8009066:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800906c:	4a26      	ldr	r2, [pc, #152]	@ (8009108 <HAL_SPI_Transmit_DMA+0x15c>)
 800906e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009074:	4a25      	ldr	r2, [pc, #148]	@ (800910c <HAL_SPI_Transmit_DMA+0x160>)
 8009076:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800907c:	2200      	movs	r2, #0
 800907e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009088:	4619      	mov	r1, r3
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	330c      	adds	r3, #12
 8009090:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009096:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009098:	f7fd f8d4 	bl	8006244 <HAL_DMA_Start_IT>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d008      	beq.n	80090b4 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090a6:	f043 0210 	orr.w	r2, r3, #16
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	655a      	str	r2, [r3, #84]	@ 0x54
    errorcode = HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	75fb      	strb	r3, [r7, #23]

    goto error;
 80090b2:	e01e      	b.n	80090f2 <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090be:	2b40      	cmp	r3, #64	@ 0x40
 80090c0:	d007      	beq.n	80090d2 <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090d0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	685a      	ldr	r2, [r3, #4]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f042 0220 	orr.w	r2, r2, #32
 80090e0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f042 0202 	orr.w	r2, r2, #2
 80090f0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80090fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3718      	adds	r7, #24
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	080091f5 	.word	0x080091f5
 8009108:	0800914d 	.word	0x0800914d
 800910c:	08009211 	.word	0x08009211

08009110 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009158:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800915a:	f7fc f8ff 	bl	800535c <HAL_GetTick>
 800915e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800916a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800916e:	d03b      	beq.n	80091e8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f022 0220 	bic.w	r2, r2, #32
 800917e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	685a      	ldr	r2, [r3, #4]
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f022 0202 	bic.w	r2, r2, #2
 800918e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	2164      	movs	r1, #100	@ 0x64
 8009194:	6978      	ldr	r0, [r7, #20]
 8009196:	f000 f8e3 	bl	8009360 <SPI_EndRxTxTransaction>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d005      	beq.n	80091ac <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091a4:	f043 0220 	orr.w	r2, r3, #32
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10a      	bne.n	80091ca <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80091b4:	2300      	movs	r3, #0
 80091b6:	60fb      	str	r3, [r7, #12]
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	60fb      	str	r3, [r7, #12]
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	60fb      	str	r3, [r7, #12]
 80091c8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2200      	movs	r2, #0
 80091ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d003      	beq.n	80091e8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80091e0:	6978      	ldr	r0, [r7, #20]
 80091e2:	f7ff ffa9 	bl	8009138 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80091e6:	e002      	b.n	80091ee <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80091e8:	6978      	ldr	r0, [r7, #20]
 80091ea:	f7ff ff91 	bl	8009110 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091ee:	3718      	adds	r7, #24
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009200:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f7ff ff8e 	bl	8009124 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009208:	bf00      	nop
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800921c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f022 0203 	bic.w	r2, r2, #3
 800922c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009232:	f043 0210 	orr.w	r2, r3, #16
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f7ff ff78 	bl	8009138 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009248:	bf00      	nop
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	603b      	str	r3, [r7, #0]
 800925c:	4613      	mov	r3, r2
 800925e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009260:	f7fc f87c 	bl	800535c <HAL_GetTick>
 8009264:	4602      	mov	r2, r0
 8009266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009268:	1a9b      	subs	r3, r3, r2
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	4413      	add	r3, r2
 800926e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009270:	f7fc f874 	bl	800535c <HAL_GetTick>
 8009274:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009276:	4b39      	ldr	r3, [pc, #228]	@ (800935c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	015b      	lsls	r3, r3, #5
 800927c:	0d1b      	lsrs	r3, r3, #20
 800927e:	69fa      	ldr	r2, [r7, #28]
 8009280:	fb02 f303 	mul.w	r3, r2, r3
 8009284:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009286:	e054      	b.n	8009332 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800928e:	d050      	beq.n	8009332 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009290:	f7fc f864 	bl	800535c <HAL_GetTick>
 8009294:	4602      	mov	r2, r0
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	69fa      	ldr	r2, [r7, #28]
 800929c:	429a      	cmp	r2, r3
 800929e:	d902      	bls.n	80092a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d13d      	bne.n	8009322 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80092b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092be:	d111      	bne.n	80092e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092c8:	d004      	beq.n	80092d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	689b      	ldr	r3, [r3, #8]
 80092ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092d2:	d107      	bne.n	80092e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092ec:	d10f      	bne.n	800930e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80092fc:	601a      	str	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800930c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	e017      	b.n	8009352 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009328:	2300      	movs	r3, #0
 800932a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	3b01      	subs	r3, #1
 8009330:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	689a      	ldr	r2, [r3, #8]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	4013      	ands	r3, r2
 800933c:	68ba      	ldr	r2, [r7, #8]
 800933e:	429a      	cmp	r2, r3
 8009340:	bf0c      	ite	eq
 8009342:	2301      	moveq	r3, #1
 8009344:	2300      	movne	r3, #0
 8009346:	b2db      	uxtb	r3, r3
 8009348:	461a      	mov	r2, r3
 800934a:	79fb      	ldrb	r3, [r7, #7]
 800934c:	429a      	cmp	r2, r3
 800934e:	d19b      	bne.n	8009288 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3720      	adds	r7, #32
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	20000028 	.word	0x20000028

08009360 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b088      	sub	sp, #32
 8009364:	af02      	add	r7, sp, #8
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	9300      	str	r3, [sp, #0]
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	2201      	movs	r2, #1
 8009374:	2102      	movs	r1, #2
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f7ff ff6a 	bl	8009250 <SPI_WaitFlagStateUntilTimeout>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d007      	beq.n	8009392 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009386:	f043 0220 	orr.w	r2, r3, #32
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	e032      	b.n	80093f8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009392:	4b1b      	ldr	r3, [pc, #108]	@ (8009400 <SPI_EndRxTxTransaction+0xa0>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a1b      	ldr	r2, [pc, #108]	@ (8009404 <SPI_EndRxTxTransaction+0xa4>)
 8009398:	fba2 2303 	umull	r2, r3, r2, r3
 800939c:	0d5b      	lsrs	r3, r3, #21
 800939e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80093a2:	fb02 f303 	mul.w	r3, r2, r3
 80093a6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093b0:	d112      	bne.n	80093d8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	2200      	movs	r2, #0
 80093ba:	2180      	movs	r1, #128	@ 0x80
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f7ff ff47 	bl	8009250 <SPI_WaitFlagStateUntilTimeout>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d016      	beq.n	80093f6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093cc:	f043 0220 	orr.w	r2, r3, #32
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e00f      	b.n	80093f8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00a      	beq.n	80093f4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093ee:	2b80      	cmp	r3, #128	@ 0x80
 80093f0:	d0f2      	beq.n	80093d8 <SPI_EndRxTxTransaction+0x78>
 80093f2:	e000      	b.n	80093f6 <SPI_EndRxTxTransaction+0x96>
        break;
 80093f4:	bf00      	nop
  }

  return HAL_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3718      	adds	r7, #24
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	20000028 	.word	0x20000028
 8009404:	165e9f81 	.word	0x165e9f81

08009408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d101      	bne.n	800941a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	e041      	b.n	800949e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009420:	b2db      	uxtb	r3, r3
 8009422:	2b00      	cmp	r3, #0
 8009424:	d106      	bne.n	8009434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7f9 fd2e 	bl	8002e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2202      	movs	r2, #2
 8009438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3304      	adds	r3, #4
 8009444:	4619      	mov	r1, r3
 8009446:	4610      	mov	r0, r2
 8009448:	f000 fd48 	bl	8009edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2201      	movs	r2, #1
 8009460:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2201      	movs	r2, #1
 8009468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2201      	movs	r2, #1
 8009498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3708      	adds	r7, #8
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
	...

080094a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d001      	beq.n	80094c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e03c      	b.n	800953a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2202      	movs	r2, #2
 80094c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a1e      	ldr	r2, [pc, #120]	@ (8009548 <HAL_TIM_Base_Start+0xa0>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d018      	beq.n	8009504 <HAL_TIM_Base_Start+0x5c>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094da:	d013      	beq.n	8009504 <HAL_TIM_Base_Start+0x5c>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a1a      	ldr	r2, [pc, #104]	@ (800954c <HAL_TIM_Base_Start+0xa4>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d00e      	beq.n	8009504 <HAL_TIM_Base_Start+0x5c>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a19      	ldr	r2, [pc, #100]	@ (8009550 <HAL_TIM_Base_Start+0xa8>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d009      	beq.n	8009504 <HAL_TIM_Base_Start+0x5c>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a17      	ldr	r2, [pc, #92]	@ (8009554 <HAL_TIM_Base_Start+0xac>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d004      	beq.n	8009504 <HAL_TIM_Base_Start+0x5c>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a16      	ldr	r2, [pc, #88]	@ (8009558 <HAL_TIM_Base_Start+0xb0>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d111      	bne.n	8009528 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f003 0307 	and.w	r3, r3, #7
 800950e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2b06      	cmp	r3, #6
 8009514:	d010      	beq.n	8009538 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f042 0201 	orr.w	r2, r2, #1
 8009524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009526:	e007      	b.n	8009538 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f042 0201 	orr.w	r2, r2, #1
 8009536:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3714      	adds	r7, #20
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop
 8009548:	40010000 	.word	0x40010000
 800954c:	40000400 	.word	0x40000400
 8009550:	40000800 	.word	0x40000800
 8009554:	40000c00 	.word	0x40000c00
 8009558:	40014000 	.word	0x40014000

0800955c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6a1a      	ldr	r2, [r3, #32]
 800956a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800956e:	4013      	ands	r3, r2
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10f      	bne.n	8009594 <HAL_TIM_Base_Stop+0x38>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6a1a      	ldr	r2, [r3, #32]
 800957a:	f240 4344 	movw	r3, #1092	@ 0x444
 800957e:	4013      	ands	r3, r2
 8009580:	2b00      	cmp	r3, #0
 8009582:	d107      	bne.n	8009594 <HAL_TIM_Base_Stop+0x38>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f022 0201 	bic.w	r2, r2, #1
 8009592:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2201      	movs	r2, #1
 8009598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b082      	sub	sp, #8
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d101      	bne.n	80095bc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e041      	b.n	8009640 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d106      	bne.n	80095d6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f839 	bl	8009648 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2202      	movs	r2, #2
 80095da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	3304      	adds	r3, #4
 80095e6:	4619      	mov	r1, r3
 80095e8:	4610      	mov	r0, r2
 80095ea:	f000 fc77 	bl	8009edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2201      	movs	r2, #1
 80095f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2201      	movs	r2, #1
 8009612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2201      	movs	r2, #1
 800962a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2201      	movs	r2, #1
 8009632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2201      	movs	r2, #1
 800963a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d109      	bne.n	8009680 <HAL_TIM_OC_Start+0x24>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2b01      	cmp	r3, #1
 8009676:	bf14      	ite	ne
 8009678:	2301      	movne	r3, #1
 800967a:	2300      	moveq	r3, #0
 800967c:	b2db      	uxtb	r3, r3
 800967e:	e022      	b.n	80096c6 <HAL_TIM_OC_Start+0x6a>
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2b04      	cmp	r3, #4
 8009684:	d109      	bne.n	800969a <HAL_TIM_OC_Start+0x3e>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b01      	cmp	r3, #1
 8009690:	bf14      	ite	ne
 8009692:	2301      	movne	r3, #1
 8009694:	2300      	moveq	r3, #0
 8009696:	b2db      	uxtb	r3, r3
 8009698:	e015      	b.n	80096c6 <HAL_TIM_OC_Start+0x6a>
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	2b08      	cmp	r3, #8
 800969e:	d109      	bne.n	80096b4 <HAL_TIM_OC_Start+0x58>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	bf14      	ite	ne
 80096ac:	2301      	movne	r3, #1
 80096ae:	2300      	moveq	r3, #0
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	e008      	b.n	80096c6 <HAL_TIM_OC_Start+0x6a>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	2b01      	cmp	r3, #1
 80096be:	bf14      	ite	ne
 80096c0:	2301      	movne	r3, #1
 80096c2:	2300      	moveq	r3, #0
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e068      	b.n	80097a0 <HAL_TIM_OC_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d104      	bne.n	80096de <HAL_TIM_OC_Start+0x82>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2202      	movs	r2, #2
 80096d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80096dc:	e013      	b.n	8009706 <HAL_TIM_OC_Start+0xaa>
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b04      	cmp	r3, #4
 80096e2:	d104      	bne.n	80096ee <HAL_TIM_OC_Start+0x92>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2202      	movs	r2, #2
 80096e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096ec:	e00b      	b.n	8009706 <HAL_TIM_OC_Start+0xaa>
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	2b08      	cmp	r3, #8
 80096f2:	d104      	bne.n	80096fe <HAL_TIM_OC_Start+0xa2>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2202      	movs	r2, #2
 80096f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096fc:	e003      	b.n	8009706 <HAL_TIM_OC_Start+0xaa>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2202      	movs	r2, #2
 8009702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2201      	movs	r2, #1
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	4618      	mov	r0, r3
 8009710:	f000 fe96 	bl	800a440 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a23      	ldr	r2, [pc, #140]	@ (80097a8 <HAL_TIM_OC_Start+0x14c>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d107      	bne.n	800972e <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800972c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a1d      	ldr	r2, [pc, #116]	@ (80097a8 <HAL_TIM_OC_Start+0x14c>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d018      	beq.n	800976a <HAL_TIM_OC_Start+0x10e>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009740:	d013      	beq.n	800976a <HAL_TIM_OC_Start+0x10e>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a19      	ldr	r2, [pc, #100]	@ (80097ac <HAL_TIM_OC_Start+0x150>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d00e      	beq.n	800976a <HAL_TIM_OC_Start+0x10e>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a17      	ldr	r2, [pc, #92]	@ (80097b0 <HAL_TIM_OC_Start+0x154>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d009      	beq.n	800976a <HAL_TIM_OC_Start+0x10e>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a16      	ldr	r2, [pc, #88]	@ (80097b4 <HAL_TIM_OC_Start+0x158>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d004      	beq.n	800976a <HAL_TIM_OC_Start+0x10e>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a14      	ldr	r2, [pc, #80]	@ (80097b8 <HAL_TIM_OC_Start+0x15c>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d111      	bne.n	800978e <HAL_TIM_OC_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	f003 0307 	and.w	r3, r3, #7
 8009774:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2b06      	cmp	r3, #6
 800977a:	d010      	beq.n	800979e <HAL_TIM_OC_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f042 0201 	orr.w	r2, r2, #1
 800978a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800978c:	e007      	b.n	800979e <HAL_TIM_OC_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f042 0201 	orr.w	r2, r2, #1
 800979c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	40010000 	.word	0x40010000
 80097ac:	40000400 	.word	0x40000400
 80097b0:	40000800 	.word	0x40000800
 80097b4:	40000c00 	.word	0x40000c00
 80097b8:	40014000 	.word	0x40014000

080097bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b086      	sub	sp, #24
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
 80097c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e097      	b.n	8009900 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d106      	bne.n	80097ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7f9 fb79 	bl	8002edc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2202      	movs	r2, #2
 80097ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	6812      	ldr	r2, [r2, #0]
 80097fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009800:	f023 0307 	bic.w	r3, r3, #7
 8009804:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	3304      	adds	r3, #4
 800980e:	4619      	mov	r1, r3
 8009810:	4610      	mov	r0, r2
 8009812:	f000 fb63 	bl	8009edc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	6a1b      	ldr	r3, [r3, #32]
 800982c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	697a      	ldr	r2, [r7, #20]
 8009834:	4313      	orrs	r3, r2
 8009836:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800983e:	f023 0303 	bic.w	r3, r3, #3
 8009842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	689a      	ldr	r2, [r3, #8]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	021b      	lsls	r3, r3, #8
 800984e:	4313      	orrs	r3, r2
 8009850:	693a      	ldr	r2, [r7, #16]
 8009852:	4313      	orrs	r3, r2
 8009854:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800985c:	f023 030c 	bic.w	r3, r3, #12
 8009860:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009868:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800986c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	68da      	ldr	r2, [r3, #12]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	69db      	ldr	r3, [r3, #28]
 8009876:	021b      	lsls	r3, r3, #8
 8009878:	4313      	orrs	r3, r2
 800987a:	693a      	ldr	r2, [r7, #16]
 800987c:	4313      	orrs	r3, r2
 800987e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	011a      	lsls	r2, r3, #4
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	6a1b      	ldr	r3, [r3, #32]
 800988a:	031b      	lsls	r3, r3, #12
 800988c:	4313      	orrs	r3, r2
 800988e:	693a      	ldr	r2, [r7, #16]
 8009890:	4313      	orrs	r3, r2
 8009892:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800989a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80098a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	685a      	ldr	r2, [r3, #4]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	011b      	lsls	r3, r3, #4
 80098ae:	4313      	orrs	r3, r2
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	697a      	ldr	r2, [r7, #20]
 80098bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	693a      	ldr	r2, [r7, #16]
 80098c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3718      	adds	r7, #24
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009918:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009920:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009928:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009930:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d110      	bne.n	800995a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009938:	7bfb      	ldrb	r3, [r7, #15]
 800993a:	2b01      	cmp	r3, #1
 800993c:	d102      	bne.n	8009944 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800993e:	7b7b      	ldrb	r3, [r7, #13]
 8009940:	2b01      	cmp	r3, #1
 8009942:	d001      	beq.n	8009948 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e089      	b.n	8009a5c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2202      	movs	r2, #2
 800994c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2202      	movs	r2, #2
 8009954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009958:	e031      	b.n	80099be <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	2b04      	cmp	r3, #4
 800995e:	d110      	bne.n	8009982 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	2b01      	cmp	r3, #1
 8009964:	d102      	bne.n	800996c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009966:	7b3b      	ldrb	r3, [r7, #12]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d001      	beq.n	8009970 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e075      	b.n	8009a5c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2202      	movs	r2, #2
 8009974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2202      	movs	r2, #2
 800997c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009980:	e01d      	b.n	80099be <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d108      	bne.n	800999a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009988:	7bbb      	ldrb	r3, [r7, #14]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d105      	bne.n	800999a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800998e:	7b7b      	ldrb	r3, [r7, #13]
 8009990:	2b01      	cmp	r3, #1
 8009992:	d102      	bne.n	800999a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009994:	7b3b      	ldrb	r3, [r7, #12]
 8009996:	2b01      	cmp	r3, #1
 8009998:	d001      	beq.n	800999e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	e05e      	b.n	8009a5c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2202      	movs	r2, #2
 80099a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2202      	movs	r2, #2
 80099aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2202      	movs	r2, #2
 80099b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2202      	movs	r2, #2
 80099ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d003      	beq.n	80099cc <HAL_TIM_Encoder_Start_IT+0xc4>
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	2b04      	cmp	r3, #4
 80099c8:	d010      	beq.n	80099ec <HAL_TIM_Encoder_Start_IT+0xe4>
 80099ca:	e01f      	b.n	8009a0c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2201      	movs	r2, #1
 80099d2:	2100      	movs	r1, #0
 80099d4:	4618      	mov	r0, r3
 80099d6:	f000 fd33 	bl	800a440 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68da      	ldr	r2, [r3, #12]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f042 0202 	orr.w	r2, r2, #2
 80099e8:	60da      	str	r2, [r3, #12]
      break;
 80099ea:	e02e      	b.n	8009a4a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2201      	movs	r2, #1
 80099f2:	2104      	movs	r1, #4
 80099f4:	4618      	mov	r0, r3
 80099f6:	f000 fd23 	bl	800a440 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	68da      	ldr	r2, [r3, #12]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f042 0204 	orr.w	r2, r2, #4
 8009a08:	60da      	str	r2, [r3, #12]
      break;
 8009a0a:	e01e      	b.n	8009a4a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	2201      	movs	r2, #1
 8009a12:	2100      	movs	r1, #0
 8009a14:	4618      	mov	r0, r3
 8009a16:	f000 fd13 	bl	800a440 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	2104      	movs	r1, #4
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 fd0c 	bl	800a440 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68da      	ldr	r2, [r3, #12]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f042 0202 	orr.w	r2, r2, #2
 8009a36:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68da      	ldr	r2, [r3, #12]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f042 0204 	orr.w	r2, r2, #4
 8009a46:	60da      	str	r2, [r3, #12]
      break;
 8009a48:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f042 0201 	orr.w	r2, r2, #1
 8009a58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	f003 0302 	and.w	r3, r3, #2
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d020      	beq.n	8009ac8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f003 0302 	and.w	r3, r3, #2
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d01b      	beq.n	8009ac8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f06f 0202 	mvn.w	r2, #2
 8009a98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	f003 0303 	and.w	r3, r3, #3
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d003      	beq.n	8009ab6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7f8 feba 	bl	8002828 <HAL_TIM_IC_CaptureCallback>
 8009ab4:	e005      	b.n	8009ac2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f9f1 	bl	8009e9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 f9f8 	bl	8009eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	f003 0304 	and.w	r3, r3, #4
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d020      	beq.n	8009b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f003 0304 	and.w	r3, r3, #4
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d01b      	beq.n	8009b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f06f 0204 	mvn.w	r2, #4
 8009ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2202      	movs	r2, #2
 8009aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	699b      	ldr	r3, [r3, #24]
 8009af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d003      	beq.n	8009b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7f8 fe94 	bl	8002828 <HAL_TIM_IC_CaptureCallback>
 8009b00:	e005      	b.n	8009b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 f9cb 	bl	8009e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f9d2 	bl	8009eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	f003 0308 	and.w	r3, r3, #8
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d020      	beq.n	8009b60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f003 0308 	and.w	r3, r3, #8
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d01b      	beq.n	8009b60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f06f 0208 	mvn.w	r2, #8
 8009b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2204      	movs	r2, #4
 8009b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	69db      	ldr	r3, [r3, #28]
 8009b3e:	f003 0303 	and.w	r3, r3, #3
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d003      	beq.n	8009b4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7f8 fe6e 	bl	8002828 <HAL_TIM_IC_CaptureCallback>
 8009b4c:	e005      	b.n	8009b5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f9a5 	bl	8009e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f9ac 	bl	8009eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	f003 0310 	and.w	r3, r3, #16
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d020      	beq.n	8009bac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f003 0310 	and.w	r3, r3, #16
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d01b      	beq.n	8009bac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f06f 0210 	mvn.w	r2, #16
 8009b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2208      	movs	r2, #8
 8009b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	69db      	ldr	r3, [r3, #28]
 8009b8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d003      	beq.n	8009b9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7f8 fe48 	bl	8002828 <HAL_TIM_IC_CaptureCallback>
 8009b98:	e005      	b.n	8009ba6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f97f 	bl	8009e9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 f986 	bl	8009eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	f003 0301 	and.w	r3, r3, #1
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00c      	beq.n	8009bd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f003 0301 	and.w	r3, r3, #1
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d007      	beq.n	8009bd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f06f 0201 	mvn.w	r2, #1
 8009bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f95d 	bl	8009e8a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00c      	beq.n	8009bf4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d007      	beq.n	8009bf4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fcc4 	bl	800a57c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d00c      	beq.n	8009c18 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d007      	beq.n	8009c18 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f957 	bl	8009ec6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	f003 0320 	and.w	r3, r3, #32
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00c      	beq.n	8009c3c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f003 0320 	and.w	r3, r3, #32
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d007      	beq.n	8009c3c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f06f 0220 	mvn.w	r2, #32
 8009c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fc96 	bl	800a568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009c3c:	bf00      	nop
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b086      	sub	sp, #24
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c50:	2300      	movs	r3, #0
 8009c52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d101      	bne.n	8009c62 <HAL_TIM_OC_ConfigChannel+0x1e>
 8009c5e:	2302      	movs	r3, #2
 8009c60:	e048      	b.n	8009cf4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2b0c      	cmp	r3, #12
 8009c6e:	d839      	bhi.n	8009ce4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8009c70:	a201      	add	r2, pc, #4	@ (adr r2, 8009c78 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c76:	bf00      	nop
 8009c78:	08009cad 	.word	0x08009cad
 8009c7c:	08009ce5 	.word	0x08009ce5
 8009c80:	08009ce5 	.word	0x08009ce5
 8009c84:	08009ce5 	.word	0x08009ce5
 8009c88:	08009cbb 	.word	0x08009cbb
 8009c8c:	08009ce5 	.word	0x08009ce5
 8009c90:	08009ce5 	.word	0x08009ce5
 8009c94:	08009ce5 	.word	0x08009ce5
 8009c98:	08009cc9 	.word	0x08009cc9
 8009c9c:	08009ce5 	.word	0x08009ce5
 8009ca0:	08009ce5 	.word	0x08009ce5
 8009ca4:	08009ce5 	.word	0x08009ce5
 8009ca8:	08009cd7 	.word	0x08009cd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68b9      	ldr	r1, [r7, #8]
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f000 f99e 	bl	8009ff4 <TIM_OC1_SetConfig>
      break;
 8009cb8:	e017      	b.n	8009cea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	68b9      	ldr	r1, [r7, #8]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f000 f9fd 	bl	800a0c0 <TIM_OC2_SetConfig>
      break;
 8009cc6:	e010      	b.n	8009cea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68b9      	ldr	r1, [r7, #8]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 fa62 	bl	800a198 <TIM_OC3_SetConfig>
      break;
 8009cd4:	e009      	b.n	8009cea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68b9      	ldr	r1, [r7, #8]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f000 fac5 	bl	800a26c <TIM_OC4_SetConfig>
      break;
 8009ce2:	e002      	b.n	8009cea <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ce8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3718      	adds	r7, #24
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d101      	bne.n	8009d18 <HAL_TIM_ConfigClockSource+0x1c>
 8009d14:	2302      	movs	r3, #2
 8009d16:	e0b4      	b.n	8009e82 <HAL_TIM_ConfigClockSource+0x186>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2202      	movs	r2, #2
 8009d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d50:	d03e      	beq.n	8009dd0 <HAL_TIM_ConfigClockSource+0xd4>
 8009d52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d56:	f200 8087 	bhi.w	8009e68 <HAL_TIM_ConfigClockSource+0x16c>
 8009d5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d5e:	f000 8086 	beq.w	8009e6e <HAL_TIM_ConfigClockSource+0x172>
 8009d62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d66:	d87f      	bhi.n	8009e68 <HAL_TIM_ConfigClockSource+0x16c>
 8009d68:	2b70      	cmp	r3, #112	@ 0x70
 8009d6a:	d01a      	beq.n	8009da2 <HAL_TIM_ConfigClockSource+0xa6>
 8009d6c:	2b70      	cmp	r3, #112	@ 0x70
 8009d6e:	d87b      	bhi.n	8009e68 <HAL_TIM_ConfigClockSource+0x16c>
 8009d70:	2b60      	cmp	r3, #96	@ 0x60
 8009d72:	d050      	beq.n	8009e16 <HAL_TIM_ConfigClockSource+0x11a>
 8009d74:	2b60      	cmp	r3, #96	@ 0x60
 8009d76:	d877      	bhi.n	8009e68 <HAL_TIM_ConfigClockSource+0x16c>
 8009d78:	2b50      	cmp	r3, #80	@ 0x50
 8009d7a:	d03c      	beq.n	8009df6 <HAL_TIM_ConfigClockSource+0xfa>
 8009d7c:	2b50      	cmp	r3, #80	@ 0x50
 8009d7e:	d873      	bhi.n	8009e68 <HAL_TIM_ConfigClockSource+0x16c>
 8009d80:	2b40      	cmp	r3, #64	@ 0x40
 8009d82:	d058      	beq.n	8009e36 <HAL_TIM_ConfigClockSource+0x13a>
 8009d84:	2b40      	cmp	r3, #64	@ 0x40
 8009d86:	d86f      	bhi.n	8009e68 <HAL_TIM_ConfigClockSource+0x16c>
 8009d88:	2b30      	cmp	r3, #48	@ 0x30
 8009d8a:	d064      	beq.n	8009e56 <HAL_TIM_ConfigClockSource+0x15a>
 8009d8c:	2b30      	cmp	r3, #48	@ 0x30
 8009d8e:	d86b      	bhi.n	8009e68 <HAL_TIM_ConfigClockSource+0x16c>
 8009d90:	2b20      	cmp	r3, #32
 8009d92:	d060      	beq.n	8009e56 <HAL_TIM_ConfigClockSource+0x15a>
 8009d94:	2b20      	cmp	r3, #32
 8009d96:	d867      	bhi.n	8009e68 <HAL_TIM_ConfigClockSource+0x16c>
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d05c      	beq.n	8009e56 <HAL_TIM_ConfigClockSource+0x15a>
 8009d9c:	2b10      	cmp	r3, #16
 8009d9e:	d05a      	beq.n	8009e56 <HAL_TIM_ConfigClockSource+0x15a>
 8009da0:	e062      	b.n	8009e68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009db2:	f000 fb25 	bl	800a400 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009dc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	609a      	str	r2, [r3, #8]
      break;
 8009dce:	e04f      	b.n	8009e70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009de0:	f000 fb0e 	bl	800a400 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	689a      	ldr	r2, [r3, #8]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009df2:	609a      	str	r2, [r3, #8]
      break;
 8009df4:	e03c      	b.n	8009e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e02:	461a      	mov	r2, r3
 8009e04:	f000 fa82 	bl	800a30c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2150      	movs	r1, #80	@ 0x50
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 fadb 	bl	800a3ca <TIM_ITRx_SetConfig>
      break;
 8009e14:	e02c      	b.n	8009e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e22:	461a      	mov	r2, r3
 8009e24:	f000 faa1 	bl	800a36a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2160      	movs	r1, #96	@ 0x60
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f000 facb 	bl	800a3ca <TIM_ITRx_SetConfig>
      break;
 8009e34:	e01c      	b.n	8009e70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e42:	461a      	mov	r2, r3
 8009e44:	f000 fa62 	bl	800a30c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2140      	movs	r1, #64	@ 0x40
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 fabb 	bl	800a3ca <TIM_ITRx_SetConfig>
      break;
 8009e54:	e00c      	b.n	8009e70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4619      	mov	r1, r3
 8009e60:	4610      	mov	r0, r2
 8009e62:	f000 fab2 	bl	800a3ca <TIM_ITRx_SetConfig>
      break;
 8009e66:	e003      	b.n	8009e70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e6c:	e000      	b.n	8009e70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	b083      	sub	sp, #12
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009e92:	bf00      	nop
 8009e94:	370c      	adds	r7, #12
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ea6:	bf00      	nop
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009eb2:	b480      	push	{r7}
 8009eb4:	b083      	sub	sp, #12
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009eba:	bf00      	nop
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b083      	sub	sp, #12
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ece:	bf00      	nop
 8009ed0:	370c      	adds	r7, #12
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
	...

08009edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a3a      	ldr	r2, [pc, #232]	@ (8009fd8 <TIM_Base_SetConfig+0xfc>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d00f      	beq.n	8009f14 <TIM_Base_SetConfig+0x38>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009efa:	d00b      	beq.n	8009f14 <TIM_Base_SetConfig+0x38>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	4a37      	ldr	r2, [pc, #220]	@ (8009fdc <TIM_Base_SetConfig+0x100>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d007      	beq.n	8009f14 <TIM_Base_SetConfig+0x38>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a36      	ldr	r2, [pc, #216]	@ (8009fe0 <TIM_Base_SetConfig+0x104>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d003      	beq.n	8009f14 <TIM_Base_SetConfig+0x38>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a35      	ldr	r2, [pc, #212]	@ (8009fe4 <TIM_Base_SetConfig+0x108>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d108      	bne.n	8009f26 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a2b      	ldr	r2, [pc, #172]	@ (8009fd8 <TIM_Base_SetConfig+0xfc>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d01b      	beq.n	8009f66 <TIM_Base_SetConfig+0x8a>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f34:	d017      	beq.n	8009f66 <TIM_Base_SetConfig+0x8a>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a28      	ldr	r2, [pc, #160]	@ (8009fdc <TIM_Base_SetConfig+0x100>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d013      	beq.n	8009f66 <TIM_Base_SetConfig+0x8a>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a27      	ldr	r2, [pc, #156]	@ (8009fe0 <TIM_Base_SetConfig+0x104>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d00f      	beq.n	8009f66 <TIM_Base_SetConfig+0x8a>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a26      	ldr	r2, [pc, #152]	@ (8009fe4 <TIM_Base_SetConfig+0x108>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d00b      	beq.n	8009f66 <TIM_Base_SetConfig+0x8a>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a25      	ldr	r2, [pc, #148]	@ (8009fe8 <TIM_Base_SetConfig+0x10c>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d007      	beq.n	8009f66 <TIM_Base_SetConfig+0x8a>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a24      	ldr	r2, [pc, #144]	@ (8009fec <TIM_Base_SetConfig+0x110>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d003      	beq.n	8009f66 <TIM_Base_SetConfig+0x8a>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4a23      	ldr	r2, [pc, #140]	@ (8009ff0 <TIM_Base_SetConfig+0x114>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d108      	bne.n	8009f78 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	695b      	ldr	r3, [r3, #20]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	689a      	ldr	r2, [r3, #8]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a0e      	ldr	r2, [pc, #56]	@ (8009fd8 <TIM_Base_SetConfig+0xfc>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d103      	bne.n	8009fac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	691a      	ldr	r2, [r3, #16]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	f003 0301 	and.w	r3, r3, #1
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d105      	bne.n	8009fca <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	f023 0201 	bic.w	r2, r3, #1
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	611a      	str	r2, [r3, #16]
  }
}
 8009fca:	bf00      	nop
 8009fcc:	3714      	adds	r7, #20
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop
 8009fd8:	40010000 	.word	0x40010000
 8009fdc:	40000400 	.word	0x40000400
 8009fe0:	40000800 	.word	0x40000800
 8009fe4:	40000c00 	.word	0x40000c00
 8009fe8:	40014000 	.word	0x40014000
 8009fec:	40014400 	.word	0x40014400
 8009ff0:	40014800 	.word	0x40014800

08009ff4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b087      	sub	sp, #28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6a1b      	ldr	r3, [r3, #32]
 800a008:	f023 0201 	bic.w	r2, r3, #1
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	699b      	ldr	r3, [r3, #24]
 800a01a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f023 0303 	bic.w	r3, r3, #3
 800a02a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	4313      	orrs	r3, r2
 800a034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	f023 0302 	bic.w	r3, r3, #2
 800a03c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	4313      	orrs	r3, r2
 800a046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a1c      	ldr	r2, [pc, #112]	@ (800a0bc <TIM_OC1_SetConfig+0xc8>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d10c      	bne.n	800a06a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	f023 0308 	bic.w	r3, r3, #8
 800a056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	697a      	ldr	r2, [r7, #20]
 800a05e:	4313      	orrs	r3, r2
 800a060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	f023 0304 	bic.w	r3, r3, #4
 800a068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a13      	ldr	r2, [pc, #76]	@ (800a0bc <TIM_OC1_SetConfig+0xc8>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d111      	bne.n	800a096 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	4313      	orrs	r3, r2
 800a08a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	699b      	ldr	r3, [r3, #24]
 800a090:	693a      	ldr	r2, [r7, #16]
 800a092:	4313      	orrs	r3, r2
 800a094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	685a      	ldr	r2, [r3, #4]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	697a      	ldr	r2, [r7, #20]
 800a0ae:	621a      	str	r2, [r3, #32]
}
 800a0b0:	bf00      	nop
 800a0b2:	371c      	adds	r7, #28
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	40010000 	.word	0x40010000

0800a0c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b087      	sub	sp, #28
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a1b      	ldr	r3, [r3, #32]
 800a0ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a1b      	ldr	r3, [r3, #32]
 800a0d4:	f023 0210 	bic.w	r2, r3, #16
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a0f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	021b      	lsls	r3, r3, #8
 800a0fe:	68fa      	ldr	r2, [r7, #12]
 800a100:	4313      	orrs	r3, r2
 800a102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	f023 0320 	bic.w	r3, r3, #32
 800a10a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	011b      	lsls	r3, r3, #4
 800a112:	697a      	ldr	r2, [r7, #20]
 800a114:	4313      	orrs	r3, r2
 800a116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a1e      	ldr	r2, [pc, #120]	@ (800a194 <TIM_OC2_SetConfig+0xd4>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d10d      	bne.n	800a13c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	011b      	lsls	r3, r3, #4
 800a12e:	697a      	ldr	r2, [r7, #20]
 800a130:	4313      	orrs	r3, r2
 800a132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a13a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a15      	ldr	r2, [pc, #84]	@ (800a194 <TIM_OC2_SetConfig+0xd4>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d113      	bne.n	800a16c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a14a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a152:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	695b      	ldr	r3, [r3, #20]
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	693a      	ldr	r2, [r7, #16]
 800a168:	4313      	orrs	r3, r2
 800a16a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	693a      	ldr	r2, [r7, #16]
 800a170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	685a      	ldr	r2, [r3, #4]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	697a      	ldr	r2, [r7, #20]
 800a184:	621a      	str	r2, [r3, #32]
}
 800a186:	bf00      	nop
 800a188:	371c      	adds	r7, #28
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	40010000 	.word	0x40010000

0800a198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a198:	b480      	push	{r7}
 800a19a:	b087      	sub	sp, #28
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a1b      	ldr	r3, [r3, #32]
 800a1a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a1b      	ldr	r3, [r3, #32]
 800a1ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	69db      	ldr	r3, [r3, #28]
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f023 0303 	bic.w	r3, r3, #3
 800a1ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a1e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	021b      	lsls	r3, r3, #8
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a1d      	ldr	r2, [pc, #116]	@ (800a268 <TIM_OC3_SetConfig+0xd0>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d10d      	bne.n	800a212 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a1fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	021b      	lsls	r3, r3, #8
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	4313      	orrs	r3, r2
 800a208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a14      	ldr	r2, [pc, #80]	@ (800a268 <TIM_OC3_SetConfig+0xd0>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d113      	bne.n	800a242 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	011b      	lsls	r3, r3, #4
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	4313      	orrs	r3, r2
 800a234:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	699b      	ldr	r3, [r3, #24]
 800a23a:	011b      	lsls	r3, r3, #4
 800a23c:	693a      	ldr	r2, [r7, #16]
 800a23e:	4313      	orrs	r3, r2
 800a240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	685a      	ldr	r2, [r3, #4]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	697a      	ldr	r2, [r7, #20]
 800a25a:	621a      	str	r2, [r3, #32]
}
 800a25c:	bf00      	nop
 800a25e:	371c      	adds	r7, #28
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr
 800a268:	40010000 	.word	0x40010000

0800a26c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b087      	sub	sp, #28
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a1b      	ldr	r3, [r3, #32]
 800a280:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	69db      	ldr	r3, [r3, #28]
 800a292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a29a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	021b      	lsls	r3, r3, #8
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a2b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	031b      	lsls	r3, r3, #12
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a10      	ldr	r2, [pc, #64]	@ (800a308 <TIM_OC4_SetConfig+0x9c>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d109      	bne.n	800a2e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	695b      	ldr	r3, [r3, #20]
 800a2d8:	019b      	lsls	r3, r3, #6
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	685a      	ldr	r2, [r3, #4]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	621a      	str	r2, [r3, #32]
}
 800a2fa:	bf00      	nop
 800a2fc:	371c      	adds	r7, #28
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	40010000 	.word	0x40010000

0800a30c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b087      	sub	sp, #28
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6a1b      	ldr	r3, [r3, #32]
 800a31c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	f023 0201 	bic.w	r2, r3, #1
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	699b      	ldr	r3, [r3, #24]
 800a32e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	011b      	lsls	r3, r3, #4
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	4313      	orrs	r3, r2
 800a340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f023 030a 	bic.w	r3, r3, #10
 800a348:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a34a:	697a      	ldr	r2, [r7, #20]
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	4313      	orrs	r3, r2
 800a350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	693a      	ldr	r2, [r7, #16]
 800a356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	697a      	ldr	r2, [r7, #20]
 800a35c:	621a      	str	r2, [r3, #32]
}
 800a35e:	bf00      	nop
 800a360:	371c      	adds	r7, #28
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b087      	sub	sp, #28
 800a36e:	af00      	add	r7, sp, #0
 800a370:	60f8      	str	r0, [r7, #12]
 800a372:	60b9      	str	r1, [r7, #8]
 800a374:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6a1b      	ldr	r3, [r3, #32]
 800a37a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6a1b      	ldr	r3, [r3, #32]
 800a380:	f023 0210 	bic.w	r2, r3, #16
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	699b      	ldr	r3, [r3, #24]
 800a38c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a394:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	031b      	lsls	r3, r3, #12
 800a39a:	693a      	ldr	r2, [r7, #16]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a3a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	011b      	lsls	r3, r3, #4
 800a3ac:	697a      	ldr	r2, [r7, #20]
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	693a      	ldr	r2, [r7, #16]
 800a3b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	697a      	ldr	r2, [r7, #20]
 800a3bc:	621a      	str	r2, [r3, #32]
}
 800a3be:	bf00      	nop
 800a3c0:	371c      	adds	r7, #28
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr

0800a3ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	b085      	sub	sp, #20
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	f043 0307 	orr.w	r3, r3, #7
 800a3ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	68fa      	ldr	r2, [r7, #12]
 800a3f2:	609a      	str	r2, [r3, #8]
}
 800a3f4:	bf00      	nop
 800a3f6:	3714      	adds	r7, #20
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a400:	b480      	push	{r7}
 800a402:	b087      	sub	sp, #28
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
 800a40c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a41a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	021a      	lsls	r2, r3, #8
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	431a      	orrs	r2, r3
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	4313      	orrs	r3, r2
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	697a      	ldr	r2, [r7, #20]
 800a432:	609a      	str	r2, [r3, #8]
}
 800a434:	bf00      	nop
 800a436:	371c      	adds	r7, #28
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a440:	b480      	push	{r7}
 800a442:	b087      	sub	sp, #28
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	f003 031f 	and.w	r3, r3, #31
 800a452:	2201      	movs	r2, #1
 800a454:	fa02 f303 	lsl.w	r3, r2, r3
 800a458:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6a1a      	ldr	r2, [r3, #32]
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	43db      	mvns	r3, r3
 800a462:	401a      	ands	r2, r3
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6a1a      	ldr	r2, [r3, #32]
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	f003 031f 	and.w	r3, r3, #31
 800a472:	6879      	ldr	r1, [r7, #4]
 800a474:	fa01 f303 	lsl.w	r3, r1, r3
 800a478:	431a      	orrs	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	621a      	str	r2, [r3, #32]
}
 800a47e:	bf00      	nop
 800a480:	371c      	adds	r7, #28
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
	...

0800a48c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d101      	bne.n	800a4a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	e050      	b.n	800a546 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2202      	movs	r2, #2
 800a4b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	68fa      	ldr	r2, [r7, #12]
 800a4dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a1c      	ldr	r2, [pc, #112]	@ (800a554 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d018      	beq.n	800a51a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4f0:	d013      	beq.n	800a51a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a18      	ldr	r2, [pc, #96]	@ (800a558 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d00e      	beq.n	800a51a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a16      	ldr	r2, [pc, #88]	@ (800a55c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d009      	beq.n	800a51a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a15      	ldr	r2, [pc, #84]	@ (800a560 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d004      	beq.n	800a51a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a13      	ldr	r2, [pc, #76]	@ (800a564 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d10c      	bne.n	800a534 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a520:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	68ba      	ldr	r2, [r7, #8]
 800a528:	4313      	orrs	r3, r2
 800a52a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3714      	adds	r7, #20
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	40010000 	.word	0x40010000
 800a558:	40000400 	.word	0x40000400
 800a55c:	40000800 	.word	0x40000800
 800a560:	40000c00 	.word	0x40000c00
 800a564:	40014000 	.word	0x40014000

0800a568 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a570:	bf00      	nop
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a590:	b084      	sub	sp, #16
 800a592:	b580      	push	{r7, lr}
 800a594:	b084      	sub	sp, #16
 800a596:	af00      	add	r7, sp, #0
 800a598:	6078      	str	r0, [r7, #4]
 800a59a:	f107 001c 	add.w	r0, r7, #28
 800a59e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a5a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	d123      	bne.n	800a5f2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a5be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	68db      	ldr	r3, [r3, #12]
 800a5ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a5d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d105      	bne.n	800a5e6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f001 fae2 	bl	800bbb0 <USB_CoreReset>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	73fb      	strb	r3, [r7, #15]
 800a5f0:	e01b      	b.n	800a62a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f001 fad6 	bl	800bbb0 <USB_CoreReset>
 800a604:	4603      	mov	r3, r0
 800a606:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a608:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d106      	bne.n	800a61e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a614:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	639a      	str	r2, [r3, #56]	@ 0x38
 800a61c:	e005      	b.n	800a62a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a622:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a62a:	7fbb      	ldrb	r3, [r7, #30]
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d10b      	bne.n	800a648 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	f043 0206 	orr.w	r2, r3, #6
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	f043 0220 	orr.w	r2, r3, #32
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a648:	7bfb      	ldrb	r3, [r7, #15]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a654:	b004      	add	sp, #16
 800a656:	4770      	bx	lr

0800a658 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a658:	b480      	push	{r7}
 800a65a:	b087      	sub	sp, #28
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	4613      	mov	r3, r2
 800a664:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a666:	79fb      	ldrb	r3, [r7, #7]
 800a668:	2b02      	cmp	r3, #2
 800a66a:	d165      	bne.n	800a738 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	4a41      	ldr	r2, [pc, #260]	@ (800a774 <USB_SetTurnaroundTime+0x11c>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d906      	bls.n	800a682 <USB_SetTurnaroundTime+0x2a>
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	4a40      	ldr	r2, [pc, #256]	@ (800a778 <USB_SetTurnaroundTime+0x120>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d202      	bcs.n	800a682 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a67c:	230f      	movs	r3, #15
 800a67e:	617b      	str	r3, [r7, #20]
 800a680:	e062      	b.n	800a748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	4a3c      	ldr	r2, [pc, #240]	@ (800a778 <USB_SetTurnaroundTime+0x120>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d306      	bcc.n	800a698 <USB_SetTurnaroundTime+0x40>
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	4a3b      	ldr	r2, [pc, #236]	@ (800a77c <USB_SetTurnaroundTime+0x124>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d202      	bcs.n	800a698 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a692:	230e      	movs	r3, #14
 800a694:	617b      	str	r3, [r7, #20]
 800a696:	e057      	b.n	800a748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	4a38      	ldr	r2, [pc, #224]	@ (800a77c <USB_SetTurnaroundTime+0x124>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d306      	bcc.n	800a6ae <USB_SetTurnaroundTime+0x56>
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	4a37      	ldr	r2, [pc, #220]	@ (800a780 <USB_SetTurnaroundTime+0x128>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d202      	bcs.n	800a6ae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a6a8:	230d      	movs	r3, #13
 800a6aa:	617b      	str	r3, [r7, #20]
 800a6ac:	e04c      	b.n	800a748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	4a33      	ldr	r2, [pc, #204]	@ (800a780 <USB_SetTurnaroundTime+0x128>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d306      	bcc.n	800a6c4 <USB_SetTurnaroundTime+0x6c>
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	4a32      	ldr	r2, [pc, #200]	@ (800a784 <USB_SetTurnaroundTime+0x12c>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d802      	bhi.n	800a6c4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a6be:	230c      	movs	r3, #12
 800a6c0:	617b      	str	r3, [r7, #20]
 800a6c2:	e041      	b.n	800a748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	4a2f      	ldr	r2, [pc, #188]	@ (800a784 <USB_SetTurnaroundTime+0x12c>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d906      	bls.n	800a6da <USB_SetTurnaroundTime+0x82>
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	4a2e      	ldr	r2, [pc, #184]	@ (800a788 <USB_SetTurnaroundTime+0x130>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d802      	bhi.n	800a6da <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a6d4:	230b      	movs	r3, #11
 800a6d6:	617b      	str	r3, [r7, #20]
 800a6d8:	e036      	b.n	800a748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	4a2a      	ldr	r2, [pc, #168]	@ (800a788 <USB_SetTurnaroundTime+0x130>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d906      	bls.n	800a6f0 <USB_SetTurnaroundTime+0x98>
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	4a29      	ldr	r2, [pc, #164]	@ (800a78c <USB_SetTurnaroundTime+0x134>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d802      	bhi.n	800a6f0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a6ea:	230a      	movs	r3, #10
 800a6ec:	617b      	str	r3, [r7, #20]
 800a6ee:	e02b      	b.n	800a748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	4a26      	ldr	r2, [pc, #152]	@ (800a78c <USB_SetTurnaroundTime+0x134>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d906      	bls.n	800a706 <USB_SetTurnaroundTime+0xae>
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	4a25      	ldr	r2, [pc, #148]	@ (800a790 <USB_SetTurnaroundTime+0x138>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d202      	bcs.n	800a706 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a700:	2309      	movs	r3, #9
 800a702:	617b      	str	r3, [r7, #20]
 800a704:	e020      	b.n	800a748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	4a21      	ldr	r2, [pc, #132]	@ (800a790 <USB_SetTurnaroundTime+0x138>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d306      	bcc.n	800a71c <USB_SetTurnaroundTime+0xc4>
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	4a20      	ldr	r2, [pc, #128]	@ (800a794 <USB_SetTurnaroundTime+0x13c>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d802      	bhi.n	800a71c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a716:	2308      	movs	r3, #8
 800a718:	617b      	str	r3, [r7, #20]
 800a71a:	e015      	b.n	800a748 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	4a1d      	ldr	r2, [pc, #116]	@ (800a794 <USB_SetTurnaroundTime+0x13c>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d906      	bls.n	800a732 <USB_SetTurnaroundTime+0xda>
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	4a1c      	ldr	r2, [pc, #112]	@ (800a798 <USB_SetTurnaroundTime+0x140>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d202      	bcs.n	800a732 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a72c:	2307      	movs	r3, #7
 800a72e:	617b      	str	r3, [r7, #20]
 800a730:	e00a      	b.n	800a748 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a732:	2306      	movs	r3, #6
 800a734:	617b      	str	r3, [r7, #20]
 800a736:	e007      	b.n	800a748 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a738:	79fb      	ldrb	r3, [r7, #7]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d102      	bne.n	800a744 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a73e:	2309      	movs	r3, #9
 800a740:	617b      	str	r3, [r7, #20]
 800a742:	e001      	b.n	800a748 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a744:	2309      	movs	r3, #9
 800a746:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	68da      	ldr	r2, [r3, #12]
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	029b      	lsls	r3, r3, #10
 800a75c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a760:	431a      	orrs	r2, r3
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a766:	2300      	movs	r3, #0
}
 800a768:	4618      	mov	r0, r3
 800a76a:	371c      	adds	r7, #28
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	00d8acbf 	.word	0x00d8acbf
 800a778:	00e4e1c0 	.word	0x00e4e1c0
 800a77c:	00f42400 	.word	0x00f42400
 800a780:	01067380 	.word	0x01067380
 800a784:	011a499f 	.word	0x011a499f
 800a788:	01312cff 	.word	0x01312cff
 800a78c:	014ca43f 	.word	0x014ca43f
 800a790:	016e3600 	.word	0x016e3600
 800a794:	01a6ab1f 	.word	0x01a6ab1f
 800a798:	01e84800 	.word	0x01e84800

0800a79c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	689b      	ldr	r3, [r3, #8]
 800a7a8:	f043 0201 	orr.w	r2, r3, #1
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b083      	sub	sp, #12
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	f023 0201 	bic.w	r2, r3, #1
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	68db      	ldr	r3, [r3, #12]
 800a7f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a7fc:	78fb      	ldrb	r3, [r7, #3]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d115      	bne.n	800a82e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a80e:	200a      	movs	r0, #10
 800a810:	f7fa fdb0 	bl	8005374 <HAL_Delay>
      ms += 10U;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	330a      	adds	r3, #10
 800a818:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f001 f939 	bl	800ba92 <USB_GetMode>
 800a820:	4603      	mov	r3, r0
 800a822:	2b01      	cmp	r3, #1
 800a824:	d01e      	beq.n	800a864 <USB_SetCurrentMode+0x84>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2bc7      	cmp	r3, #199	@ 0xc7
 800a82a:	d9f0      	bls.n	800a80e <USB_SetCurrentMode+0x2e>
 800a82c:	e01a      	b.n	800a864 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a82e:	78fb      	ldrb	r3, [r7, #3]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d115      	bne.n	800a860 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a840:	200a      	movs	r0, #10
 800a842:	f7fa fd97 	bl	8005374 <HAL_Delay>
      ms += 10U;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	330a      	adds	r3, #10
 800a84a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f001 f920 	bl	800ba92 <USB_GetMode>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d005      	beq.n	800a864 <USB_SetCurrentMode+0x84>
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2bc7      	cmp	r3, #199	@ 0xc7
 800a85c:	d9f0      	bls.n	800a840 <USB_SetCurrentMode+0x60>
 800a85e:	e001      	b.n	800a864 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	e005      	b.n	800a870 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2bc8      	cmp	r3, #200	@ 0xc8
 800a868:	d101      	bne.n	800a86e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	e000      	b.n	800a870 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a878:	b084      	sub	sp, #16
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b086      	sub	sp, #24
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a886:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a88a:	2300      	movs	r3, #0
 800a88c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a892:	2300      	movs	r3, #0
 800a894:	613b      	str	r3, [r7, #16]
 800a896:	e009      	b.n	800a8ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	3340      	adds	r3, #64	@ 0x40
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	613b      	str	r3, [r7, #16]
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	2b0e      	cmp	r3, #14
 800a8b0:	d9f2      	bls.n	800a898 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a8b2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d11c      	bne.n	800a8f4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8c8:	f043 0302 	orr.w	r3, r3, #2
 800a8cc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8de:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8ea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	639a      	str	r2, [r3, #56]	@ 0x38
 800a8f2:	e00b      	b.n	800a90c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a904:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a912:	461a      	mov	r2, r3
 800a914:	2300      	movs	r3, #0
 800a916:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a918:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d10d      	bne.n	800a93c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a924:	2b00      	cmp	r3, #0
 800a926:	d104      	bne.n	800a932 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a928:	2100      	movs	r1, #0
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f968 	bl	800ac00 <USB_SetDevSpeed>
 800a930:	e008      	b.n	800a944 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a932:	2101      	movs	r1, #1
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 f963 	bl	800ac00 <USB_SetDevSpeed>
 800a93a:	e003      	b.n	800a944 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a93c:	2103      	movs	r1, #3
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 f95e 	bl	800ac00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a944:	2110      	movs	r1, #16
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f8fa 	bl	800ab40 <USB_FlushTxFifo>
 800a94c:	4603      	mov	r3, r0
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d001      	beq.n	800a956 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f924 	bl	800aba4 <USB_FlushRxFifo>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d001      	beq.n	800a966 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a96c:	461a      	mov	r2, r3
 800a96e:	2300      	movs	r3, #0
 800a970:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a978:	461a      	mov	r2, r3
 800a97a:	2300      	movs	r3, #0
 800a97c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a984:	461a      	mov	r2, r3
 800a986:	2300      	movs	r3, #0
 800a988:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a98a:	2300      	movs	r3, #0
 800a98c:	613b      	str	r3, [r7, #16]
 800a98e:	e043      	b.n	800aa18 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	015a      	lsls	r2, r3, #5
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	4413      	add	r3, r2
 800a998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a9a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9a6:	d118      	bne.n	800a9da <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d10a      	bne.n	800a9c4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	015a      	lsls	r2, r3, #5
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a9c0:	6013      	str	r3, [r2, #0]
 800a9c2:	e013      	b.n	800a9ec <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	015a      	lsls	r2, r3, #5
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a9d6:	6013      	str	r3, [r2, #0]
 800a9d8:	e008      	b.n	800a9ec <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	015a      	lsls	r2, r3, #5
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	4413      	add	r3, r2
 800a9e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	015a      	lsls	r2, r3, #5
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	015a      	lsls	r2, r3, #5
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	4413      	add	r3, r2
 800aa06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800aa10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	3301      	adds	r3, #1
 800aa16:	613b      	str	r3, [r7, #16]
 800aa18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aa1c:	461a      	mov	r2, r3
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d3b5      	bcc.n	800a990 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa24:	2300      	movs	r3, #0
 800aa26:	613b      	str	r3, [r7, #16]
 800aa28:	e043      	b.n	800aab2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	015a      	lsls	r2, r3, #5
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	4413      	add	r3, r2
 800aa32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa40:	d118      	bne.n	800aa74 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10a      	bne.n	800aa5e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	015a      	lsls	r2, r3, #5
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	4413      	add	r3, r2
 800aa50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa54:	461a      	mov	r2, r3
 800aa56:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800aa5a:	6013      	str	r3, [r2, #0]
 800aa5c:	e013      	b.n	800aa86 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	015a      	lsls	r2, r3, #5
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	4413      	add	r3, r2
 800aa66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800aa70:	6013      	str	r3, [r2, #0]
 800aa72:	e008      	b.n	800aa86 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	015a      	lsls	r2, r3, #5
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa80:	461a      	mov	r2, r3
 800aa82:	2300      	movs	r3, #0
 800aa84:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	015a      	lsls	r2, r3, #5
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa92:	461a      	mov	r2, r3
 800aa94:	2300      	movs	r3, #0
 800aa96:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	015a      	lsls	r2, r3, #5
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800aaaa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	3301      	adds	r3, #1
 800aab0:	613b      	str	r3, [r7, #16]
 800aab2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aab6:	461a      	mov	r2, r3
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d3b5      	bcc.n	800aa2a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	68fa      	ldr	r2, [r7, #12]
 800aac8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aacc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aad0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2200      	movs	r2, #0
 800aad6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800aade:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aae0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d105      	bne.n	800aaf4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	699b      	ldr	r3, [r3, #24]
 800aaec:	f043 0210 	orr.w	r2, r3, #16
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	699a      	ldr	r2, [r3, #24]
 800aaf8:	4b10      	ldr	r3, [pc, #64]	@ (800ab3c <USB_DevInit+0x2c4>)
 800aafa:	4313      	orrs	r3, r2
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ab00:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d005      	beq.n	800ab14 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	699b      	ldr	r3, [r3, #24]
 800ab0c:	f043 0208 	orr.w	r2, r3, #8
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ab14:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d107      	bne.n	800ab2c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	699b      	ldr	r3, [r3, #24]
 800ab20:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab24:	f043 0304 	orr.w	r3, r3, #4
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ab2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3718      	adds	r7, #24
 800ab32:	46bd      	mov	sp, r7
 800ab34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab38:	b004      	add	sp, #16
 800ab3a:	4770      	bx	lr
 800ab3c:	803c3800 	.word	0x803c3800

0800ab40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	3301      	adds	r3, #1
 800ab52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab5a:	d901      	bls.n	800ab60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	e01b      	b.n	800ab98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	691b      	ldr	r3, [r3, #16]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	daf2      	bge.n	800ab4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	019b      	lsls	r3, r3, #6
 800ab70:	f043 0220 	orr.w	r2, r3, #32
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab84:	d901      	bls.n	800ab8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ab86:	2303      	movs	r3, #3
 800ab88:	e006      	b.n	800ab98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	691b      	ldr	r3, [r3, #16]
 800ab8e:	f003 0320 	and.w	r3, r3, #32
 800ab92:	2b20      	cmp	r3, #32
 800ab94:	d0f0      	beq.n	800ab78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3714      	adds	r7, #20
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b085      	sub	sp, #20
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abac:	2300      	movs	r3, #0
 800abae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	3301      	adds	r3, #1
 800abb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abbc:	d901      	bls.n	800abc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800abbe:	2303      	movs	r3, #3
 800abc0:	e018      	b.n	800abf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	daf2      	bge.n	800abb0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800abca:	2300      	movs	r3, #0
 800abcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2210      	movs	r2, #16
 800abd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	3301      	adds	r3, #1
 800abd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abe0:	d901      	bls.n	800abe6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800abe2:	2303      	movs	r3, #3
 800abe4:	e006      	b.n	800abf4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	691b      	ldr	r3, [r3, #16]
 800abea:	f003 0310 	and.w	r3, r3, #16
 800abee:	2b10      	cmp	r3, #16
 800abf0:	d0f0      	beq.n	800abd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	460b      	mov	r3, r1
 800ac0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	78fb      	ldrb	r3, [r7, #3]
 800ac1a:	68f9      	ldr	r1, [r7, #12]
 800ac1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac20:	4313      	orrs	r3, r2
 800ac22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3714      	adds	r7, #20
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac32:	b480      	push	{r7}
 800ac34:	b087      	sub	sp, #28
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac44:	689b      	ldr	r3, [r3, #8]
 800ac46:	f003 0306 	and.w	r3, r3, #6
 800ac4a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d102      	bne.n	800ac58 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ac52:	2300      	movs	r3, #0
 800ac54:	75fb      	strb	r3, [r7, #23]
 800ac56:	e00a      	b.n	800ac6e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d002      	beq.n	800ac64 <USB_GetDevSpeed+0x32>
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2b06      	cmp	r3, #6
 800ac62:	d102      	bne.n	800ac6a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ac64:	2302      	movs	r3, #2
 800ac66:	75fb      	strb	r3, [r7, #23]
 800ac68:	e001      	b.n	800ac6e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ac6a:	230f      	movs	r3, #15
 800ac6c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ac6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	371c      	adds	r7, #28
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	785b      	ldrb	r3, [r3, #1]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d13a      	bne.n	800ad0e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac9e:	69da      	ldr	r2, [r3, #28]
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	f003 030f 	and.w	r3, r3, #15
 800aca8:	2101      	movs	r1, #1
 800acaa:	fa01 f303 	lsl.w	r3, r1, r3
 800acae:	b29b      	uxth	r3, r3
 800acb0:	68f9      	ldr	r1, [r7, #12]
 800acb2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800acb6:	4313      	orrs	r3, r2
 800acb8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	015a      	lsls	r2, r3, #5
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	4413      	add	r3, r2
 800acc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800accc:	2b00      	cmp	r3, #0
 800acce:	d155      	bne.n	800ad7c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	015a      	lsls	r2, r3, #5
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	4413      	add	r3, r2
 800acd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	791b      	ldrb	r3, [r3, #4]
 800acea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800acec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	059b      	lsls	r3, r3, #22
 800acf2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800acf4:	4313      	orrs	r3, r2
 800acf6:	68ba      	ldr	r2, [r7, #8]
 800acf8:	0151      	lsls	r1, r2, #5
 800acfa:	68fa      	ldr	r2, [r7, #12]
 800acfc:	440a      	add	r2, r1
 800acfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad0a:	6013      	str	r3, [r2, #0]
 800ad0c:	e036      	b.n	800ad7c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad14:	69da      	ldr	r2, [r3, #28]
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	f003 030f 	and.w	r3, r3, #15
 800ad1e:	2101      	movs	r1, #1
 800ad20:	fa01 f303 	lsl.w	r3, r1, r3
 800ad24:	041b      	lsls	r3, r3, #16
 800ad26:	68f9      	ldr	r1, [r7, #12]
 800ad28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	015a      	lsls	r2, r3, #5
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	4413      	add	r3, r2
 800ad38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d11a      	bne.n	800ad7c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	015a      	lsls	r2, r3, #5
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	791b      	ldrb	r3, [r3, #4]
 800ad60:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad62:	430b      	orrs	r3, r1
 800ad64:	4313      	orrs	r3, r2
 800ad66:	68ba      	ldr	r2, [r7, #8]
 800ad68:	0151      	lsls	r1, r2, #5
 800ad6a:	68fa      	ldr	r2, [r7, #12]
 800ad6c:	440a      	add	r2, r1
 800ad6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ad72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad7a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3714      	adds	r7, #20
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr
	...

0800ad8c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b085      	sub	sp, #20
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	785b      	ldrb	r3, [r3, #1]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d161      	bne.n	800ae6c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	015a      	lsls	r2, r3, #5
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	4413      	add	r3, r2
 800adb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800adba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adbe:	d11f      	bne.n	800ae00 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	015a      	lsls	r2, r3, #5
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	4413      	add	r3, r2
 800adc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	68ba      	ldr	r2, [r7, #8]
 800add0:	0151      	lsls	r1, r2, #5
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	440a      	add	r2, r1
 800add6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adda:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800adde:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	015a      	lsls	r2, r3, #5
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	4413      	add	r3, r2
 800ade8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	0151      	lsls	r1, r2, #5
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	440a      	add	r2, r1
 800adf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800adfe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	f003 030f 	and.w	r3, r3, #15
 800ae10:	2101      	movs	r1, #1
 800ae12:	fa01 f303 	lsl.w	r3, r1, r3
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	43db      	mvns	r3, r3
 800ae1a:	68f9      	ldr	r1, [r7, #12]
 800ae1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae20:	4013      	ands	r3, r2
 800ae22:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae2a:	69da      	ldr	r2, [r3, #28]
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	f003 030f 	and.w	r3, r3, #15
 800ae34:	2101      	movs	r1, #1
 800ae36:	fa01 f303 	lsl.w	r3, r1, r3
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	43db      	mvns	r3, r3
 800ae3e:	68f9      	ldr	r1, [r7, #12]
 800ae40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae44:	4013      	ands	r3, r2
 800ae46:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	015a      	lsls	r2, r3, #5
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	4413      	add	r3, r2
 800ae50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	0159      	lsls	r1, r3, #5
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	440b      	add	r3, r1
 800ae5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae62:	4619      	mov	r1, r3
 800ae64:	4b35      	ldr	r3, [pc, #212]	@ (800af3c <USB_DeactivateEndpoint+0x1b0>)
 800ae66:	4013      	ands	r3, r2
 800ae68:	600b      	str	r3, [r1, #0]
 800ae6a:	e060      	b.n	800af2e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	015a      	lsls	r2, r3, #5
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	4413      	add	r3, r2
 800ae74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae82:	d11f      	bne.n	800aec4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	015a      	lsls	r2, r3, #5
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68ba      	ldr	r2, [r7, #8]
 800ae94:	0151      	lsls	r1, r2, #5
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	440a      	add	r2, r1
 800ae9a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ae9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aea2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	015a      	lsls	r2, r3, #5
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	4413      	add	r3, r2
 800aeac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	68ba      	ldr	r2, [r7, #8]
 800aeb4:	0151      	lsls	r1, r2, #5
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	440a      	add	r2, r1
 800aeba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aebe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aec2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aeca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	f003 030f 	and.w	r3, r3, #15
 800aed4:	2101      	movs	r1, #1
 800aed6:	fa01 f303 	lsl.w	r3, r1, r3
 800aeda:	041b      	lsls	r3, r3, #16
 800aedc:	43db      	mvns	r3, r3
 800aede:	68f9      	ldr	r1, [r7, #12]
 800aee0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aee4:	4013      	ands	r3, r2
 800aee6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aeee:	69da      	ldr	r2, [r3, #28]
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	f003 030f 	and.w	r3, r3, #15
 800aef8:	2101      	movs	r1, #1
 800aefa:	fa01 f303 	lsl.w	r3, r1, r3
 800aefe:	041b      	lsls	r3, r3, #16
 800af00:	43db      	mvns	r3, r3
 800af02:	68f9      	ldr	r1, [r7, #12]
 800af04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af08:	4013      	ands	r3, r2
 800af0a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	015a      	lsls	r2, r3, #5
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	4413      	add	r3, r2
 800af14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	0159      	lsls	r1, r3, #5
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	440b      	add	r3, r1
 800af22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af26:	4619      	mov	r1, r3
 800af28:	4b05      	ldr	r3, [pc, #20]	@ (800af40 <USB_DeactivateEndpoint+0x1b4>)
 800af2a:	4013      	ands	r3, r2
 800af2c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	4618      	mov	r0, r3
 800af32:	3714      	adds	r7, #20
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr
 800af3c:	ec337800 	.word	0xec337800
 800af40:	eff37800 	.word	0xeff37800

0800af44 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b08a      	sub	sp, #40	@ 0x28
 800af48:	af02      	add	r7, sp, #8
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	4613      	mov	r3, r2
 800af50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	785b      	ldrb	r3, [r3, #1]
 800af60:	2b01      	cmp	r3, #1
 800af62:	f040 817a 	bne.w	800b25a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	691b      	ldr	r3, [r3, #16]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d132      	bne.n	800afd4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	015a      	lsls	r2, r3, #5
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	4413      	add	r3, r2
 800af76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	69ba      	ldr	r2, [r7, #24]
 800af7e:	0151      	lsls	r1, r2, #5
 800af80:	69fa      	ldr	r2, [r7, #28]
 800af82:	440a      	add	r2, r1
 800af84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af88:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800af8c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800af90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	015a      	lsls	r2, r3, #5
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	4413      	add	r3, r2
 800af9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	69ba      	ldr	r2, [r7, #24]
 800afa2:	0151      	lsls	r1, r2, #5
 800afa4:	69fa      	ldr	r2, [r7, #28]
 800afa6:	440a      	add	r2, r1
 800afa8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800afb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	015a      	lsls	r2, r3, #5
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	4413      	add	r3, r2
 800afba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	69ba      	ldr	r2, [r7, #24]
 800afc2:	0151      	lsls	r1, r2, #5
 800afc4:	69fa      	ldr	r2, [r7, #28]
 800afc6:	440a      	add	r2, r1
 800afc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afcc:	0cdb      	lsrs	r3, r3, #19
 800afce:	04db      	lsls	r3, r3, #19
 800afd0:	6113      	str	r3, [r2, #16]
 800afd2:	e092      	b.n	800b0fa <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	015a      	lsls	r2, r3, #5
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	4413      	add	r3, r2
 800afdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	69ba      	ldr	r2, [r7, #24]
 800afe4:	0151      	lsls	r1, r2, #5
 800afe6:	69fa      	ldr	r2, [r7, #28]
 800afe8:	440a      	add	r2, r1
 800afea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afee:	0cdb      	lsrs	r3, r3, #19
 800aff0:	04db      	lsls	r3, r3, #19
 800aff2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aff4:	69bb      	ldr	r3, [r7, #24]
 800aff6:	015a      	lsls	r2, r3, #5
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	4413      	add	r3, r2
 800affc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b000:	691b      	ldr	r3, [r3, #16]
 800b002:	69ba      	ldr	r2, [r7, #24]
 800b004:	0151      	lsls	r1, r2, #5
 800b006:	69fa      	ldr	r2, [r7, #28]
 800b008:	440a      	add	r2, r1
 800b00a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b00e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b012:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b016:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d11a      	bne.n	800b054 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	691a      	ldr	r2, [r3, #16]
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	429a      	cmp	r2, r3
 800b028:	d903      	bls.n	800b032 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	689a      	ldr	r2, [r3, #8]
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	015a      	lsls	r2, r3, #5
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	4413      	add	r3, r2
 800b03a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	69ba      	ldr	r2, [r7, #24]
 800b042:	0151      	lsls	r1, r2, #5
 800b044:	69fa      	ldr	r2, [r7, #28]
 800b046:	440a      	add	r2, r1
 800b048:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b04c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b050:	6113      	str	r3, [r2, #16]
 800b052:	e01b      	b.n	800b08c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	015a      	lsls	r2, r3, #5
 800b058:	69fb      	ldr	r3, [r7, #28]
 800b05a:	4413      	add	r3, r2
 800b05c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b060:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	6919      	ldr	r1, [r3, #16]
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	689b      	ldr	r3, [r3, #8]
 800b06a:	440b      	add	r3, r1
 800b06c:	1e59      	subs	r1, r3, #1
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	689b      	ldr	r3, [r3, #8]
 800b072:	fbb1 f3f3 	udiv	r3, r1, r3
 800b076:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b078:	4ba2      	ldr	r3, [pc, #648]	@ (800b304 <USB_EPStartXfer+0x3c0>)
 800b07a:	400b      	ands	r3, r1
 800b07c:	69b9      	ldr	r1, [r7, #24]
 800b07e:	0148      	lsls	r0, r1, #5
 800b080:	69f9      	ldr	r1, [r7, #28]
 800b082:	4401      	add	r1, r0
 800b084:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b088:	4313      	orrs	r3, r2
 800b08a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	015a      	lsls	r2, r3, #5
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	4413      	add	r3, r2
 800b094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b098:	691a      	ldr	r2, [r3, #16]
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	691b      	ldr	r3, [r3, #16]
 800b09e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0a2:	69b9      	ldr	r1, [r7, #24]
 800b0a4:	0148      	lsls	r0, r1, #5
 800b0a6:	69f9      	ldr	r1, [r7, #28]
 800b0a8:	4401      	add	r1, r0
 800b0aa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	791b      	ldrb	r3, [r3, #4]
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d11f      	bne.n	800b0fa <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	015a      	lsls	r2, r3, #5
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	69ba      	ldr	r2, [r7, #24]
 800b0ca:	0151      	lsls	r1, r2, #5
 800b0cc:	69fa      	ldr	r2, [r7, #28]
 800b0ce:	440a      	add	r2, r1
 800b0d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0d4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b0d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	015a      	lsls	r2, r3, #5
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	4413      	add	r3, r2
 800b0e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	69ba      	ldr	r2, [r7, #24]
 800b0ea:	0151      	lsls	r1, r2, #5
 800b0ec:	69fa      	ldr	r2, [r7, #28]
 800b0ee:	440a      	add	r2, r1
 800b0f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b0f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b0fa:	79fb      	ldrb	r3, [r7, #7]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d14b      	bne.n	800b198 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	69db      	ldr	r3, [r3, #28]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d009      	beq.n	800b11c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	015a      	lsls	r2, r3, #5
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	4413      	add	r3, r2
 800b110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b114:	461a      	mov	r2, r3
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	69db      	ldr	r3, [r3, #28]
 800b11a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	791b      	ldrb	r3, [r3, #4]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d128      	bne.n	800b176 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b12a:	689b      	ldr	r3, [r3, #8]
 800b12c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b130:	2b00      	cmp	r3, #0
 800b132:	d110      	bne.n	800b156 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b134:	69bb      	ldr	r3, [r7, #24]
 800b136:	015a      	lsls	r2, r3, #5
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	4413      	add	r3, r2
 800b13c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	69ba      	ldr	r2, [r7, #24]
 800b144:	0151      	lsls	r1, r2, #5
 800b146:	69fa      	ldr	r2, [r7, #28]
 800b148:	440a      	add	r2, r1
 800b14a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b14e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b152:	6013      	str	r3, [r2, #0]
 800b154:	e00f      	b.n	800b176 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	015a      	lsls	r2, r3, #5
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	4413      	add	r3, r2
 800b15e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	69ba      	ldr	r2, [r7, #24]
 800b166:	0151      	lsls	r1, r2, #5
 800b168:	69fa      	ldr	r2, [r7, #28]
 800b16a:	440a      	add	r2, r1
 800b16c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b174:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	015a      	lsls	r2, r3, #5
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	4413      	add	r3, r2
 800b17e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	69ba      	ldr	r2, [r7, #24]
 800b186:	0151      	lsls	r1, r2, #5
 800b188:	69fa      	ldr	r2, [r7, #28]
 800b18a:	440a      	add	r2, r1
 800b18c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b190:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b194:	6013      	str	r3, [r2, #0]
 800b196:	e165      	b.n	800b464 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	015a      	lsls	r2, r3, #5
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	4413      	add	r3, r2
 800b1a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	69ba      	ldr	r2, [r7, #24]
 800b1a8:	0151      	lsls	r1, r2, #5
 800b1aa:	69fa      	ldr	r2, [r7, #28]
 800b1ac:	440a      	add	r2, r1
 800b1ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1b2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b1b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	791b      	ldrb	r3, [r3, #4]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d015      	beq.n	800b1ec <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	691b      	ldr	r3, [r3, #16]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f000 814d 	beq.w	800b464 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b1ca:	69fb      	ldr	r3, [r7, #28]
 800b1cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	f003 030f 	and.w	r3, r3, #15
 800b1da:	2101      	movs	r1, #1
 800b1dc:	fa01 f303 	lsl.w	r3, r1, r3
 800b1e0:	69f9      	ldr	r1, [r7, #28]
 800b1e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	634b      	str	r3, [r1, #52]	@ 0x34
 800b1ea:	e13b      	b.n	800b464 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d110      	bne.n	800b21e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b1fc:	69bb      	ldr	r3, [r7, #24]
 800b1fe:	015a      	lsls	r2, r3, #5
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	4413      	add	r3, r2
 800b204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	69ba      	ldr	r2, [r7, #24]
 800b20c:	0151      	lsls	r1, r2, #5
 800b20e:	69fa      	ldr	r2, [r7, #28]
 800b210:	440a      	add	r2, r1
 800b212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b216:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b21a:	6013      	str	r3, [r2, #0]
 800b21c:	e00f      	b.n	800b23e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	015a      	lsls	r2, r3, #5
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	4413      	add	r3, r2
 800b226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	69ba      	ldr	r2, [r7, #24]
 800b22e:	0151      	lsls	r1, r2, #5
 800b230:	69fa      	ldr	r2, [r7, #28]
 800b232:	440a      	add	r2, r1
 800b234:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b23c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	68d9      	ldr	r1, [r3, #12]
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	781a      	ldrb	r2, [r3, #0]
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	691b      	ldr	r3, [r3, #16]
 800b24a:	b298      	uxth	r0, r3
 800b24c:	79fb      	ldrb	r3, [r7, #7]
 800b24e:	9300      	str	r3, [sp, #0]
 800b250:	4603      	mov	r3, r0
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f000 f9b8 	bl	800b5c8 <USB_WritePacket>
 800b258:	e104      	b.n	800b464 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	015a      	lsls	r2, r3, #5
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	4413      	add	r3, r2
 800b262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b266:	691b      	ldr	r3, [r3, #16]
 800b268:	69ba      	ldr	r2, [r7, #24]
 800b26a:	0151      	lsls	r1, r2, #5
 800b26c:	69fa      	ldr	r2, [r7, #28]
 800b26e:	440a      	add	r2, r1
 800b270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b274:	0cdb      	lsrs	r3, r3, #19
 800b276:	04db      	lsls	r3, r3, #19
 800b278:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	015a      	lsls	r2, r3, #5
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	4413      	add	r3, r2
 800b282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b286:	691b      	ldr	r3, [r3, #16]
 800b288:	69ba      	ldr	r2, [r7, #24]
 800b28a:	0151      	lsls	r1, r2, #5
 800b28c:	69fa      	ldr	r2, [r7, #28]
 800b28e:	440a      	add	r2, r1
 800b290:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b294:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b298:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b29c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d131      	bne.n	800b308 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	691b      	ldr	r3, [r3, #16]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d003      	beq.n	800b2b4 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	689a      	ldr	r2, [r3, #8]
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	689a      	ldr	r2, [r3, #8]
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	015a      	lsls	r2, r3, #5
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2c8:	691a      	ldr	r2, [r3, #16]
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	6a1b      	ldr	r3, [r3, #32]
 800b2ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2d2:	69b9      	ldr	r1, [r7, #24]
 800b2d4:	0148      	lsls	r0, r1, #5
 800b2d6:	69f9      	ldr	r1, [r7, #28]
 800b2d8:	4401      	add	r1, r0
 800b2da:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	015a      	lsls	r2, r3, #5
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	69ba      	ldr	r2, [r7, #24]
 800b2f2:	0151      	lsls	r1, r2, #5
 800b2f4:	69fa      	ldr	r2, [r7, #28]
 800b2f6:	440a      	add	r2, r1
 800b2f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b300:	6113      	str	r3, [r2, #16]
 800b302:	e061      	b.n	800b3c8 <USB_EPStartXfer+0x484>
 800b304:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d123      	bne.n	800b358 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	015a      	lsls	r2, r3, #5
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	4413      	add	r3, r2
 800b318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b31c:	691a      	ldr	r2, [r3, #16]
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b326:	69b9      	ldr	r1, [r7, #24]
 800b328:	0148      	lsls	r0, r1, #5
 800b32a:	69f9      	ldr	r1, [r7, #28]
 800b32c:	4401      	add	r1, r0
 800b32e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b332:	4313      	orrs	r3, r2
 800b334:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	015a      	lsls	r2, r3, #5
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	4413      	add	r3, r2
 800b33e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b342:	691b      	ldr	r3, [r3, #16]
 800b344:	69ba      	ldr	r2, [r7, #24]
 800b346:	0151      	lsls	r1, r2, #5
 800b348:	69fa      	ldr	r2, [r7, #28]
 800b34a:	440a      	add	r2, r1
 800b34c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b350:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b354:	6113      	str	r3, [r2, #16]
 800b356:	e037      	b.n	800b3c8 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	691a      	ldr	r2, [r3, #16]
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	689b      	ldr	r3, [r3, #8]
 800b360:	4413      	add	r3, r2
 800b362:	1e5a      	subs	r2, r3, #1
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	fbb2 f3f3 	udiv	r3, r2, r3
 800b36c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	8afa      	ldrh	r2, [r7, #22]
 800b374:	fb03 f202 	mul.w	r2, r3, r2
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	015a      	lsls	r2, r3, #5
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	4413      	add	r3, r2
 800b384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b388:	691a      	ldr	r2, [r3, #16]
 800b38a:	8afb      	ldrh	r3, [r7, #22]
 800b38c:	04d9      	lsls	r1, r3, #19
 800b38e:	4b38      	ldr	r3, [pc, #224]	@ (800b470 <USB_EPStartXfer+0x52c>)
 800b390:	400b      	ands	r3, r1
 800b392:	69b9      	ldr	r1, [r7, #24]
 800b394:	0148      	lsls	r0, r1, #5
 800b396:	69f9      	ldr	r1, [r7, #28]
 800b398:	4401      	add	r1, r0
 800b39a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	015a      	lsls	r2, r3, #5
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3ae:	691a      	ldr	r2, [r3, #16]
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	6a1b      	ldr	r3, [r3, #32]
 800b3b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3b8:	69b9      	ldr	r1, [r7, #24]
 800b3ba:	0148      	lsls	r0, r1, #5
 800b3bc:	69f9      	ldr	r1, [r7, #28]
 800b3be:	4401      	add	r1, r0
 800b3c0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b3c8:	79fb      	ldrb	r3, [r7, #7]
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d10d      	bne.n	800b3ea <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d009      	beq.n	800b3ea <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	68d9      	ldr	r1, [r3, #12]
 800b3da:	69bb      	ldr	r3, [r7, #24]
 800b3dc:	015a      	lsls	r2, r3, #5
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3e6:	460a      	mov	r2, r1
 800b3e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	791b      	ldrb	r3, [r3, #4]
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d128      	bne.n	800b444 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3f8:	689b      	ldr	r3, [r3, #8]
 800b3fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d110      	bne.n	800b424 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	015a      	lsls	r2, r3, #5
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	4413      	add	r3, r2
 800b40a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	69ba      	ldr	r2, [r7, #24]
 800b412:	0151      	lsls	r1, r2, #5
 800b414:	69fa      	ldr	r2, [r7, #28]
 800b416:	440a      	add	r2, r1
 800b418:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b41c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b420:	6013      	str	r3, [r2, #0]
 800b422:	e00f      	b.n	800b444 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	015a      	lsls	r2, r3, #5
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	4413      	add	r3, r2
 800b42c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	69ba      	ldr	r2, [r7, #24]
 800b434:	0151      	lsls	r1, r2, #5
 800b436:	69fa      	ldr	r2, [r7, #28]
 800b438:	440a      	add	r2, r1
 800b43a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b43e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b442:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	015a      	lsls	r2, r3, #5
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	4413      	add	r3, r2
 800b44c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	69ba      	ldr	r2, [r7, #24]
 800b454:	0151      	lsls	r1, r2, #5
 800b456:	69fa      	ldr	r2, [r7, #28]
 800b458:	440a      	add	r2, r1
 800b45a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b45e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b462:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3720      	adds	r7, #32
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	1ff80000 	.word	0x1ff80000

0800b474 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b474:	b480      	push	{r7}
 800b476:	b087      	sub	sp, #28
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
 800b47c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b47e:	2300      	movs	r3, #0
 800b480:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b482:	2300      	movs	r3, #0
 800b484:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	785b      	ldrb	r3, [r3, #1]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d14a      	bne.n	800b528 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	015a      	lsls	r2, r3, #5
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	4413      	add	r3, r2
 800b49c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b4a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4aa:	f040 8086 	bne.w	800b5ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	015a      	lsls	r2, r3, #5
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	683a      	ldr	r2, [r7, #0]
 800b4c0:	7812      	ldrb	r2, [r2, #0]
 800b4c2:	0151      	lsls	r1, r2, #5
 800b4c4:	693a      	ldr	r2, [r7, #16]
 800b4c6:	440a      	add	r2, r1
 800b4c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b4d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	015a      	lsls	r2, r3, #5
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	4413      	add	r3, r2
 800b4dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	7812      	ldrb	r2, [r2, #0]
 800b4e6:	0151      	lsls	r1, r2, #5
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	440a      	add	r2, r1
 800b4ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b4f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	3301      	adds	r3, #1
 800b4fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b502:	4293      	cmp	r3, r2
 800b504:	d902      	bls.n	800b50c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	75fb      	strb	r3, [r7, #23]
          break;
 800b50a:	e056      	b.n	800b5ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	015a      	lsls	r2, r3, #5
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	4413      	add	r3, r2
 800b516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b520:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b524:	d0e7      	beq.n	800b4f6 <USB_EPStopXfer+0x82>
 800b526:	e048      	b.n	800b5ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	015a      	lsls	r2, r3, #5
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	4413      	add	r3, r2
 800b532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b53c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b540:	d13b      	bne.n	800b5ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	015a      	lsls	r2, r3, #5
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	4413      	add	r3, r2
 800b54c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	683a      	ldr	r2, [r7, #0]
 800b554:	7812      	ldrb	r2, [r2, #0]
 800b556:	0151      	lsls	r1, r2, #5
 800b558:	693a      	ldr	r2, [r7, #16]
 800b55a:	440a      	add	r2, r1
 800b55c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b560:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b564:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	015a      	lsls	r2, r3, #5
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	4413      	add	r3, r2
 800b570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	683a      	ldr	r2, [r7, #0]
 800b578:	7812      	ldrb	r2, [r2, #0]
 800b57a:	0151      	lsls	r1, r2, #5
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	440a      	add	r2, r1
 800b580:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b584:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b588:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	3301      	adds	r3, #1
 800b58e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b596:	4293      	cmp	r3, r2
 800b598:	d902      	bls.n	800b5a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	75fb      	strb	r3, [r7, #23]
          break;
 800b59e:	e00c      	b.n	800b5ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	015a      	lsls	r2, r3, #5
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b5b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5b8:	d0e7      	beq.n	800b58a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b5ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	371c      	adds	r7, #28
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b089      	sub	sp, #36	@ 0x24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	4611      	mov	r1, r2
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	71fb      	strb	r3, [r7, #7]
 800b5da:	4613      	mov	r3, r2
 800b5dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b5e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d123      	bne.n	800b636 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b5ee:	88bb      	ldrh	r3, [r7, #4]
 800b5f0:	3303      	adds	r3, #3
 800b5f2:	089b      	lsrs	r3, r3, #2
 800b5f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	61bb      	str	r3, [r7, #24]
 800b5fa:	e018      	b.n	800b62e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b5fc:	79fb      	ldrb	r3, [r7, #7]
 800b5fe:	031a      	lsls	r2, r3, #12
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	4413      	add	r3, r2
 800b604:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b608:	461a      	mov	r2, r3
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	3301      	adds	r3, #1
 800b614:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	3301      	adds	r3, #1
 800b61a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b61c:	69fb      	ldr	r3, [r7, #28]
 800b61e:	3301      	adds	r3, #1
 800b620:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	3301      	adds	r3, #1
 800b626:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	3301      	adds	r3, #1
 800b62c:	61bb      	str	r3, [r7, #24]
 800b62e:	69ba      	ldr	r2, [r7, #24]
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	429a      	cmp	r2, r3
 800b634:	d3e2      	bcc.n	800b5fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b636:	2300      	movs	r3, #0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3724      	adds	r7, #36	@ 0x24
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr

0800b644 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b644:	b480      	push	{r7}
 800b646:	b08b      	sub	sp, #44	@ 0x2c
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	4613      	mov	r3, r2
 800b650:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b65a:	88fb      	ldrh	r3, [r7, #6]
 800b65c:	089b      	lsrs	r3, r3, #2
 800b65e:	b29b      	uxth	r3, r3
 800b660:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b662:	88fb      	ldrh	r3, [r7, #6]
 800b664:	f003 0303 	and.w	r3, r3, #3
 800b668:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b66a:	2300      	movs	r3, #0
 800b66c:	623b      	str	r3, [r7, #32]
 800b66e:	e014      	b.n	800b69a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67a:	601a      	str	r2, [r3, #0]
    pDest++;
 800b67c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67e:	3301      	adds	r3, #1
 800b680:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b684:	3301      	adds	r3, #1
 800b686:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68a:	3301      	adds	r3, #1
 800b68c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b690:	3301      	adds	r3, #1
 800b692:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b694:	6a3b      	ldr	r3, [r7, #32]
 800b696:	3301      	adds	r3, #1
 800b698:	623b      	str	r3, [r7, #32]
 800b69a:	6a3a      	ldr	r2, [r7, #32]
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d3e6      	bcc.n	800b670 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b6a2:	8bfb      	ldrh	r3, [r7, #30]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d01e      	beq.n	800b6e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b6ac:	69bb      	ldr	r3, [r7, #24]
 800b6ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	f107 0310 	add.w	r3, r7, #16
 800b6b8:	6812      	ldr	r2, [r2, #0]
 800b6ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b6bc:	693a      	ldr	r2, [r7, #16]
 800b6be:	6a3b      	ldr	r3, [r7, #32]
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	00db      	lsls	r3, r3, #3
 800b6c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b6c8:	b2da      	uxtb	r2, r3
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6cc:	701a      	strb	r2, [r3, #0]
      i++;
 800b6ce:	6a3b      	ldr	r3, [r7, #32]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	623b      	str	r3, [r7, #32]
      pDest++;
 800b6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b6da:	8bfb      	ldrh	r3, [r7, #30]
 800b6dc:	3b01      	subs	r3, #1
 800b6de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b6e0:	8bfb      	ldrh	r3, [r7, #30]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1ea      	bne.n	800b6bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	372c      	adds	r7, #44	@ 0x2c
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	785b      	ldrb	r3, [r3, #1]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d12c      	bne.n	800b76a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	015a      	lsls	r2, r3, #5
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	4413      	add	r3, r2
 800b718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	db12      	blt.n	800b748 <USB_EPSetStall+0x54>
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d00f      	beq.n	800b748 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	015a      	lsls	r2, r3, #5
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	4413      	add	r3, r2
 800b730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	68ba      	ldr	r2, [r7, #8]
 800b738:	0151      	lsls	r1, r2, #5
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	440a      	add	r2, r1
 800b73e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b742:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b746:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	015a      	lsls	r2, r3, #5
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	4413      	add	r3, r2
 800b750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	68ba      	ldr	r2, [r7, #8]
 800b758:	0151      	lsls	r1, r2, #5
 800b75a:	68fa      	ldr	r2, [r7, #12]
 800b75c:	440a      	add	r2, r1
 800b75e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b762:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b766:	6013      	str	r3, [r2, #0]
 800b768:	e02b      	b.n	800b7c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	015a      	lsls	r2, r3, #5
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	4413      	add	r3, r2
 800b772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	db12      	blt.n	800b7a2 <USB_EPSetStall+0xae>
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00f      	beq.n	800b7a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	015a      	lsls	r2, r3, #5
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	4413      	add	r3, r2
 800b78a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68ba      	ldr	r2, [r7, #8]
 800b792:	0151      	lsls	r1, r2, #5
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	440a      	add	r2, r1
 800b798:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b79c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b7a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	015a      	lsls	r2, r3, #5
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	4413      	add	r3, r2
 800b7aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	68ba      	ldr	r2, [r7, #8]
 800b7b2:	0151      	lsls	r1, r2, #5
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	440a      	add	r2, r1
 800b7b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b7c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3714      	adds	r7, #20
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	785b      	ldrb	r3, [r3, #1]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d128      	bne.n	800b83e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	015a      	lsls	r2, r3, #5
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	0151      	lsls	r1, r2, #5
 800b7fe:	68fa      	ldr	r2, [r7, #12]
 800b800:	440a      	add	r2, r1
 800b802:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b806:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b80a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	791b      	ldrb	r3, [r3, #4]
 800b810:	2b03      	cmp	r3, #3
 800b812:	d003      	beq.n	800b81c <USB_EPClearStall+0x4c>
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	791b      	ldrb	r3, [r3, #4]
 800b818:	2b02      	cmp	r3, #2
 800b81a:	d138      	bne.n	800b88e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	015a      	lsls	r2, r3, #5
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	4413      	add	r3, r2
 800b824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68ba      	ldr	r2, [r7, #8]
 800b82c:	0151      	lsls	r1, r2, #5
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	440a      	add	r2, r1
 800b832:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b83a:	6013      	str	r3, [r2, #0]
 800b83c:	e027      	b.n	800b88e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	015a      	lsls	r2, r3, #5
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	4413      	add	r3, r2
 800b846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	0151      	lsls	r1, r2, #5
 800b850:	68fa      	ldr	r2, [r7, #12]
 800b852:	440a      	add	r2, r1
 800b854:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b858:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b85c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	791b      	ldrb	r3, [r3, #4]
 800b862:	2b03      	cmp	r3, #3
 800b864:	d003      	beq.n	800b86e <USB_EPClearStall+0x9e>
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	791b      	ldrb	r3, [r3, #4]
 800b86a:	2b02      	cmp	r3, #2
 800b86c:	d10f      	bne.n	800b88e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	015a      	lsls	r2, r3, #5
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	4413      	add	r3, r2
 800b876:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	68ba      	ldr	r2, [r7, #8]
 800b87e:	0151      	lsls	r1, r2, #5
 800b880:	68fa      	ldr	r2, [r7, #12]
 800b882:	440a      	add	r2, r1
 800b884:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b88c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3714      	adds	r7, #20
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b8ba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b8be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	78fb      	ldrb	r3, [r7, #3]
 800b8ca:	011b      	lsls	r3, r3, #4
 800b8cc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b8d0:	68f9      	ldr	r1, [r7, #12]
 800b8d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3714      	adds	r7, #20
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b902:	f023 0303 	bic.w	r3, r3, #3
 800b906:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b916:	f023 0302 	bic.w	r3, r3, #2
 800b91a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3714      	adds	r7, #20
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b92a:	b480      	push	{r7}
 800b92c:	b085      	sub	sp, #20
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	68fa      	ldr	r2, [r7, #12]
 800b940:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b944:	f023 0303 	bic.w	r3, r3, #3
 800b948:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b958:	f043 0302 	orr.w	r3, r3, #2
 800b95c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3714      	adds	r7, #20
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b085      	sub	sp, #20
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	695b      	ldr	r3, [r3, #20]
 800b978:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	699b      	ldr	r3, [r3, #24]
 800b97e:	68fa      	ldr	r2, [r7, #12]
 800b980:	4013      	ands	r3, r2
 800b982:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b984:	68fb      	ldr	r3, [r7, #12]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b992:	b480      	push	{r7}
 800b994:	b085      	sub	sp, #20
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9a4:	699b      	ldr	r3, [r3, #24]
 800b9a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9ae:	69db      	ldr	r3, [r3, #28]
 800b9b0:	68ba      	ldr	r2, [r7, #8]
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	0c1b      	lsrs	r3, r3, #16
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3714      	adds	r7, #20
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr

0800b9c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9c6:	b480      	push	{r7}
 800b9c8:	b085      	sub	sp, #20
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9d8:	699b      	ldr	r3, [r3, #24]
 800b9da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9e2:	69db      	ldr	r3, [r3, #28]
 800b9e4:	68ba      	ldr	r2, [r7, #8]
 800b9e6:	4013      	ands	r3, r2
 800b9e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	b29b      	uxth	r3, r3
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3714      	adds	r7, #20
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b9fa:	b480      	push	{r7}
 800b9fc:	b085      	sub	sp, #20
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
 800ba02:	460b      	mov	r3, r1
 800ba04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ba0a:	78fb      	ldrb	r3, [r7, #3]
 800ba0c:	015a      	lsls	r2, r3, #5
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	4413      	add	r3, r2
 800ba12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba16:	689b      	ldr	r3, [r3, #8]
 800ba18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba20:	695b      	ldr	r3, [r3, #20]
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	4013      	ands	r3, r2
 800ba26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba28:	68bb      	ldr	r3, [r7, #8]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3714      	adds	r7, #20
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba34:	4770      	bx	lr

0800ba36 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba36:	b480      	push	{r7}
 800ba38:	b087      	sub	sp, #28
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	6078      	str	r0, [r7, #4]
 800ba3e:	460b      	mov	r3, r1
 800ba40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba4c:	691b      	ldr	r3, [r3, #16]
 800ba4e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba58:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ba5a:	78fb      	ldrb	r3, [r7, #3]
 800ba5c:	f003 030f 	and.w	r3, r3, #15
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	fa22 f303 	lsr.w	r3, r2, r3
 800ba66:	01db      	lsls	r3, r3, #7
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	693a      	ldr	r2, [r7, #16]
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ba70:	78fb      	ldrb	r3, [r7, #3]
 800ba72:	015a      	lsls	r2, r3, #5
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	4413      	add	r3, r2
 800ba78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	693a      	ldr	r2, [r7, #16]
 800ba80:	4013      	ands	r3, r2
 800ba82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba84:	68bb      	ldr	r3, [r7, #8]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	371c      	adds	r7, #28
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba92:	b480      	push	{r7}
 800ba94:	b083      	sub	sp, #12
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	695b      	ldr	r3, [r3, #20]
 800ba9e:	f003 0301 	and.w	r3, r3, #1
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	370c      	adds	r7, #12
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr

0800baae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800baae:	b480      	push	{r7}
 800bab0:	b085      	sub	sp, #20
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	68fa      	ldr	r2, [r7, #12]
 800bac4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bac8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800bacc:	f023 0307 	bic.w	r3, r3, #7
 800bad0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bae4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3714      	adds	r7, #20
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b087      	sub	sp, #28
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	460b      	mov	r3, r1
 800bafe:	607a      	str	r2, [r7, #4]
 800bb00:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	333c      	adds	r3, #60	@ 0x3c
 800bb0a:	3304      	adds	r3, #4
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	4a26      	ldr	r2, [pc, #152]	@ (800bbac <USB_EP0_OutStart+0xb8>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d90a      	bls.n	800bb2e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb28:	d101      	bne.n	800bb2e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	e037      	b.n	800bb9e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb34:	461a      	mov	r2, r3
 800bb36:	2300      	movs	r3, #0
 800bb38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb40:	691b      	ldr	r3, [r3, #16]
 800bb42:	697a      	ldr	r2, [r7, #20]
 800bb44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bb4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	697a      	ldr	r2, [r7, #20]
 800bb58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb5c:	f043 0318 	orr.w	r3, r3, #24
 800bb60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	697a      	ldr	r2, [r7, #20]
 800bb6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb70:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800bb74:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bb76:	7afb      	ldrb	r3, [r7, #11]
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d10f      	bne.n	800bb9c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bb7c:	697b      	ldr	r3, [r7, #20]
 800bb7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb82:	461a      	mov	r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	697a      	ldr	r2, [r7, #20]
 800bb92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb96:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800bb9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	371c      	adds	r7, #28
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	4f54300a 	.word	0x4f54300a

0800bbb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bbc8:	d901      	bls.n	800bbce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bbca:	2303      	movs	r3, #3
 800bbcc:	e01b      	b.n	800bc06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	691b      	ldr	r3, [r3, #16]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	daf2      	bge.n	800bbbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	691b      	ldr	r3, [r3, #16]
 800bbde:	f043 0201 	orr.w	r2, r3, #1
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bbf2:	d901      	bls.n	800bbf8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bbf4:	2303      	movs	r3, #3
 800bbf6:	e006      	b.n	800bc06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	691b      	ldr	r3, [r3, #16]
 800bbfc:	f003 0301 	and.w	r3, r3, #1
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d0f0      	beq.n	800bbe6 <USB_CoreReset+0x36>

  return HAL_OK;
 800bc04:	2300      	movs	r3, #0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3714      	adds	r7, #20
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr

0800bc12 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 800bc12:	b480      	push	{r7}
 800bc14:	b085      	sub	sp, #20
 800bc16:	af00      	add	r7, sp, #0
 800bc18:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	1c5a      	adds	r2, r3, #1
 800bc1e:	607a      	str	r2, [r7, #4]
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 800bc24:	89fb      	ldrh	r3, [r7, #14]
 800bc26:	021b      	lsls	r3, r3, #8
 800bc28:	b21a      	sxth	r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	b21b      	sxth	r3, r3
 800bc30:	4313      	orrs	r3, r2
 800bc32:	b21b      	sxth	r3, r3
 800bc34:	b29b      	uxth	r3, r3
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3714      	adds	r7, #20
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
	...

0800bc44 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	683a      	ldr	r2, [r7, #0]
 800bc52:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2204      	movs	r2, #4
 800bc58:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2204      	movs	r2, #4
 800bc5e:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc68:	b29a      	uxth	r2, r3
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	1ad3      	subs	r3, r2, r3
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	3b01      	subs	r3, #1
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	b21a      	sxth	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bc88:	b29a      	uxth	r2, r3
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	1ad3      	subs	r3, r2, r3
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	3b01      	subs	r3, #1
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	b21a      	sxth	r2, r3
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	845a      	strh	r2, [r3, #34]	@ 0x22
   g->console.x_pos = g->console.x_end;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
   g->char_v_space = 1;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
   g->font=NULL;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	629a      	str	r2, [r3, #40]	@ 0x28
   g->currentFont.bytes_per_char = 0;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2200      	movs	r2, #0
 800bcce:	861a      	strh	r2, [r3, #48]	@ 0x30
   g->currentFont.char_height = 0;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   g->currentFont.char_width = 0;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
   g->currentFont.number_of_chars = 0;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	865a      	strh	r2, [r3, #50]	@ 0x32
   g->currentFont.number_of_offsets = 0;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2200      	movs	r2, #0
 800bcea:	869a      	strh	r2, [r3, #52]	@ 0x34
   g->currentFont.widths = NULL;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	639a      	str	r2, [r3, #56]	@ 0x38
   g->currentFont.offsets = NULL;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	63da      	str	r2, [r3, #60]	@ 0x3c
   g->currentFont.data = NULL;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	641a      	str	r2, [r3, #64]	@ 0x40
   g->currentFont.font = NULL;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2200      	movs	r2, #0
 800bd02:	645a      	str	r2, [r3, #68]	@ 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f645 425d 	movw	r2, #23645	@ 0x5c5d
 800bd0a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
   g->fore_color = C_WHITE;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bd14:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
   g->back_color = C_BLACK;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
   g->next_window = NULL;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800bd32:	2300      	movs	r3, #0
 800bd34:	73fb      	strb	r3, [r7, #15]
 800bd36:	e010      	b.n	800bd5a <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 800bd38:	7bfb      	ldrb	r3, [r7, #15]
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	330a      	adds	r3, #10
 800bd3e:	00db      	lsls	r3, r3, #3
 800bd40:	4413      	add	r3, r2
 800bd42:	2200      	movs	r2, #0
 800bd44:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 800bd46:	7bfb      	ldrb	r3, [r7, #15]
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	330a      	adds	r3, #10
 800bd4c:	00db      	lsls	r3, r3, #3
 800bd4e:	4413      	add	r3, r2
 800bd50:	2200      	movs	r2, #0
 800bd52:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800bd54:	7bfb      	ldrb	r3, [r7, #15]
 800bd56:	3301      	adds	r3, #1
 800bd58:	73fb      	strb	r3, [r7, #15]
 800bd5a:	7bfb      	ldrb	r3, [r7, #15]
 800bd5c:	2b03      	cmp	r3, #3
 800bd5e:	d9eb      	bls.n	800bd38 <UG_Init+0xf4>
   }

   gui = g;
 800bd60:	4a04      	ldr	r2, [pc, #16]	@ (800bd74 <UG_Init+0x130>)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6013      	str	r3, [r2, #0]
   return 1;
 800bd66:	2301      	movs	r3, #1
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3714      	adds	r7, #20
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr
 800bd74:	20001278 	.word	0x20001278

0800bd78 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  gui->font = font;
 800bd80:	4b04      	ldr	r3, [pc, #16]	@ (800bd94 <UG_FontSelect+0x1c>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800bd88:	bf00      	nop
 800bd8a:	370c      	adds	r7, #12
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd92:	4770      	bx	lr
 800bd94:	20001278 	.word	0x20001278

0800bd98 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af02      	add	r7, sp, #8
 800bd9e:	4603      	mov	r3, r0
 800bda0:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 800bda2:	4b0e      	ldr	r3, [pc, #56]	@ (800bddc <UG_FillScreen+0x44>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bdac:	b29b      	uxth	r3, r3
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	b21a      	sxth	r2, r3
 800bdb4:	4b09      	ldr	r3, [pc, #36]	@ (800bddc <UG_FillScreen+0x44>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bdbe:	b29b      	uxth	r3, r3
 800bdc0:	3b01      	subs	r3, #1
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	b219      	sxth	r1, r3
 800bdc6:	88fb      	ldrh	r3, [r7, #6]
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	460b      	mov	r3, r1
 800bdcc:	2100      	movs	r1, #0
 800bdce:	2000      	movs	r0, #0
 800bdd0:	f000 f806 	bl	800bde0 <UG_FillFrame>
}
 800bdd4:	bf00      	nop
 800bdd6:	3708      	adds	r7, #8
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	20001278 	.word	0x20001278

0800bde0 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800bde0:	b5b0      	push	{r4, r5, r7, lr}
 800bde2:	b086      	sub	sp, #24
 800bde4:	af02      	add	r7, sp, #8
 800bde6:	4604      	mov	r4, r0
 800bde8:	4608      	mov	r0, r1
 800bdea:	4611      	mov	r1, r2
 800bdec:	461a      	mov	r2, r3
 800bdee:	4623      	mov	r3, r4
 800bdf0:	80fb      	strh	r3, [r7, #6]
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	80bb      	strh	r3, [r7, #4]
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	807b      	strh	r3, [r7, #2]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800bdfe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800be02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800be06:	429a      	cmp	r2, r3
 800be08:	da05      	bge.n	800be16 <UG_FillFrame+0x36>
     swap(x1,x2);
 800be0a:	88fb      	ldrh	r3, [r7, #6]
 800be0c:	817b      	strh	r3, [r7, #10]
 800be0e:	887b      	ldrh	r3, [r7, #2]
 800be10:	80fb      	strh	r3, [r7, #6]
 800be12:	897b      	ldrh	r3, [r7, #10]
 800be14:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 800be16:	f9b7 2000 	ldrsh.w	r2, [r7]
 800be1a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800be1e:	429a      	cmp	r2, r3
 800be20:	da05      	bge.n	800be2e <UG_FillFrame+0x4e>
     swap(y1,y2);
 800be22:	88bb      	ldrh	r3, [r7, #4]
 800be24:	813b      	strh	r3, [r7, #8]
 800be26:	883b      	ldrh	r3, [r7, #0]
 800be28:	80bb      	strh	r3, [r7, #4]
 800be2a:	893b      	ldrh	r3, [r7, #8]
 800be2c:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800be2e:	4b24      	ldr	r3, [pc, #144]	@ (800bec0 <UG_FillFrame+0xe0>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800be36:	f003 0302 	and.w	r3, r3, #2
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d012      	beq.n	800be64 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800be3e:	4b20      	ldr	r3, [pc, #128]	@ (800bec0 <UG_FillFrame+0xe0>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be44:	461d      	mov	r5, r3
 800be46:	f9b7 4000 	ldrsh.w	r4, [r7]
 800be4a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800be4e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800be52:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800be56:	8c3b      	ldrh	r3, [r7, #32]
 800be58:	9300      	str	r3, [sp, #0]
 800be5a:	4623      	mov	r3, r4
 800be5c:	47a8      	blx	r5
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d028      	beq.n	800beb6 <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 800be64:	88bb      	ldrh	r3, [r7, #4]
 800be66:	81bb      	strh	r3, [r7, #12]
 800be68:	e01e      	b.n	800bea8 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 800be6a:	88fb      	ldrh	r3, [r7, #6]
 800be6c:	81fb      	strh	r3, [r7, #14]
 800be6e:	e00f      	b.n	800be90 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 800be70:	4b13      	ldr	r3, [pc, #76]	@ (800bec0 <UG_FillFrame+0xe0>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	8c3a      	ldrh	r2, [r7, #32]
 800be7a:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800be7e:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800be82:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800be84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800be88:	b29b      	uxth	r3, r3
 800be8a:	3301      	adds	r3, #1
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	81fb      	strh	r3, [r7, #14]
 800be90:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800be94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800be98:	429a      	cmp	r2, r3
 800be9a:	dde9      	ble.n	800be70 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 800be9c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	3301      	adds	r3, #1
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	81bb      	strh	r3, [r7, #12]
 800bea8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800beac:	f9b7 3000 	ldrsh.w	r3, [r7]
 800beb0:	429a      	cmp	r2, r3
 800beb2:	ddda      	ble.n	800be6a <UG_FillFrame+0x8a>
 800beb4:	e000      	b.n	800beb8 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800beb6:	bf00      	nop
      }
   }
}
 800beb8:	3710      	adds	r7, #16
 800beba:	46bd      	mov	sp, r7
 800bebc:	bdb0      	pop	{r4, r5, r7, pc}
 800bebe:	bf00      	nop
 800bec0:	20001278 	.word	0x20001278

0800bec4 <UG_DrawFrame>:
   }
   UG_DrawLine(x2, y1, x2, y2, c);
}

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800bec4:	b590      	push	{r4, r7, lr}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af02      	add	r7, sp, #8
 800beca:	4604      	mov	r4, r0
 800becc:	4608      	mov	r0, r1
 800bece:	4611      	mov	r1, r2
 800bed0:	461a      	mov	r2, r3
 800bed2:	4623      	mov	r3, r4
 800bed4:	80fb      	strh	r3, [r7, #6]
 800bed6:	4603      	mov	r3, r0
 800bed8:	80bb      	strh	r3, [r7, #4]
 800beda:	460b      	mov	r3, r1
 800bedc:	807b      	strh	r3, [r7, #2]
 800bede:	4613      	mov	r3, r2
 800bee0:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 800bee2:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800bee6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800beea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800beee:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800bef2:	8b3b      	ldrh	r3, [r7, #24]
 800bef4:	9300      	str	r3, [sp, #0]
 800bef6:	4623      	mov	r3, r4
 800bef8:	f000 f846 	bl	800bf88 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 800befc:	f9b7 4000 	ldrsh.w	r4, [r7]
 800bf00:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800bf04:	f9b7 1000 	ldrsh.w	r1, [r7]
 800bf08:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800bf0c:	8b3b      	ldrh	r3, [r7, #24]
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	4623      	mov	r3, r4
 800bf12:	f000 f839 	bl	800bf88 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 800bf16:	f9b7 4000 	ldrsh.w	r4, [r7]
 800bf1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bf1e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800bf22:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800bf26:	8b3b      	ldrh	r3, [r7, #24]
 800bf28:	9300      	str	r3, [sp, #0]
 800bf2a:	4623      	mov	r3, r4
 800bf2c:	f000 f82c 	bl	800bf88 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 800bf30:	f9b7 4000 	ldrsh.w	r4, [r7]
 800bf34:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800bf38:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800bf3c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800bf40:	8b3b      	ldrh	r3, [r7, #24]
 800bf42:	9300      	str	r3, [sp, #0]
 800bf44:	4623      	mov	r3, r4
 800bf46:	f000 f81f 	bl	800bf88 <UG_DrawLine>
}
 800bf4a:	bf00      	nop
 800bf4c:	370c      	adds	r7, #12
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd90      	pop	{r4, r7, pc}
	...

0800bf54 <UG_DrawPixel>:
   UG_DrawArc(x1+r, y2-r, r, 0x30, c);
   UG_DrawArc(x2-r, y2-r, r, 0xC0, c);
}

void UG_DrawPixel( UG_S16 x0, UG_S16 y0, UG_COLOR c )
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	80fb      	strh	r3, [r7, #6]
 800bf5e:	460b      	mov	r3, r1
 800bf60:	80bb      	strh	r3, [r7, #4]
 800bf62:	4613      	mov	r3, r2
 800bf64:	807b      	strh	r3, [r7, #2]
   gui->device->pset(x0,y0,c);
 800bf66:	4b07      	ldr	r3, [pc, #28]	@ (800bf84 <UG_DrawPixel+0x30>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	887a      	ldrh	r2, [r7, #2]
 800bf70:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800bf74:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800bf78:	4798      	blx	r3
}
 800bf7a:	bf00      	nop
 800bf7c:	3708      	adds	r7, #8
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	20001278 	.word	0x20001278

0800bf88 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800bf88:	b5b0      	push	{r4, r5, r7, lr}
 800bf8a:	b08a      	sub	sp, #40	@ 0x28
 800bf8c:	af02      	add	r7, sp, #8
 800bf8e:	4604      	mov	r4, r0
 800bf90:	4608      	mov	r0, r1
 800bf92:	4611      	mov	r1, r2
 800bf94:	461a      	mov	r2, r3
 800bf96:	4623      	mov	r3, r4
 800bf98:	80fb      	strh	r3, [r7, #6]
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	80bb      	strh	r3, [r7, #4]
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	807b      	strh	r3, [r7, #2]
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 800bfa6:	4b67      	ldr	r3, [pc, #412]	@ (800c144 <UG_DrawLine+0x1bc>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800bfae:	f003 0302 	and.w	r3, r3, #2
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d013      	beq.n	800bfde <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800bfb6:	4b63      	ldr	r3, [pc, #396]	@ (800c144 <UG_DrawLine+0x1bc>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfbc:	461d      	mov	r5, r3
 800bfbe:	f9b7 4000 	ldrsh.w	r4, [r7]
 800bfc2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800bfc6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800bfca:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800bfce:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800bfd0:	9300      	str	r3, [sp, #0]
 800bfd2:	4623      	mov	r3, r4
 800bfd4:	47a8      	blx	r5
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f000 80ae 	beq.w	800c13a <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 800bfde:	887a      	ldrh	r2, [r7, #2]
 800bfe0:	88fb      	ldrh	r3, [r7, #6]
 800bfe2:	1ad3      	subs	r3, r2, r3
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 800bfe8:	883a      	ldrh	r2, [r7, #0]
 800bfea:	88bb      	ldrh	r3, [r7, #4]
 800bfec:	1ad3      	subs	r3, r2, r3
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 800bff2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	bfb8      	it	lt
 800bffa:	425b      	neglt	r3, r3
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 800c000:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c004:	2b00      	cmp	r3, #0
 800c006:	bfb8      	it	lt
 800c008:	425b      	neglt	r3, r3
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 800c00e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c012:	2b00      	cmp	r3, #0
 800c014:	dd01      	ble.n	800c01a <UG_DrawLine+0x92>
 800c016:	2301      	movs	r3, #1
 800c018:	e001      	b.n	800c01e <UG_DrawLine+0x96>
 800c01a:	f04f 33ff 	mov.w	r3, #4294967295
 800c01e:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 800c020:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c024:	2b00      	cmp	r3, #0
 800c026:	dd01      	ble.n	800c02c <UG_DrawLine+0xa4>
 800c028:	2301      	movs	r3, #1
 800c02a:	e001      	b.n	800c030 <UG_DrawLine+0xa8>
 800c02c:	f04f 33ff 	mov.w	r3, #4294967295
 800c030:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 800c032:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c036:	105b      	asrs	r3, r3, #1
 800c038:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 800c03a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c03e:	105b      	asrs	r3, r3, #1
 800c040:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 800c042:	88fb      	ldrh	r3, [r7, #6]
 800c044:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 800c046:	88bb      	ldrh	r3, [r7, #4]
 800c048:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 800c04a:	4b3e      	ldr	r3, [pc, #248]	@ (800c144 <UG_DrawLine+0x1bc>)
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800c054:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800c058:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800c05c:	4798      	blx	r3

   if( dxabs >= dyabs )
 800c05e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800c062:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c066:	429a      	cmp	r2, r3
 800c068:	db33      	blt.n	800c0d2 <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 800c06a:	2300      	movs	r3, #0
 800c06c:	83fb      	strh	r3, [r7, #30]
 800c06e:	e029      	b.n	800c0c4 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 800c070:	8b7a      	ldrh	r2, [r7, #26]
 800c072:	89fb      	ldrh	r3, [r7, #14]
 800c074:	4413      	add	r3, r2
 800c076:	b29b      	uxth	r3, r3
 800c078:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 800c07a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800c07e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c082:	429a      	cmp	r2, r3
 800c084:	db09      	blt.n	800c09a <UG_DrawLine+0x112>
         {
            y -= dxabs;
 800c086:	8b7a      	ldrh	r2, [r7, #26]
 800c088:	8a3b      	ldrh	r3, [r7, #16]
 800c08a:	1ad3      	subs	r3, r2, r3
 800c08c:	b29b      	uxth	r3, r3
 800c08e:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 800c090:	8afa      	ldrh	r2, [r7, #22]
 800c092:	897b      	ldrh	r3, [r7, #10]
 800c094:	4413      	add	r3, r2
 800c096:	b29b      	uxth	r3, r3
 800c098:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 800c09a:	8b3a      	ldrh	r2, [r7, #24]
 800c09c:	89bb      	ldrh	r3, [r7, #12]
 800c09e:	4413      	add	r3, r2
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 800c0a4:	4b27      	ldr	r3, [pc, #156]	@ (800c144 <UG_DrawLine+0x1bc>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800c0ae:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800c0b2:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800c0b6:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 800c0b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	3301      	adds	r3, #1
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	83fb      	strh	r3, [r7, #30]
 800c0c4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800c0c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	dbcf      	blt.n	800c070 <UG_DrawLine+0xe8>
 800c0d0:	e034      	b.n	800c13c <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	83fb      	strh	r3, [r7, #30]
 800c0d6:	e029      	b.n	800c12c <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 800c0d8:	8bba      	ldrh	r2, [r7, #28]
 800c0da:	8a3b      	ldrh	r3, [r7, #16]
 800c0dc:	4413      	add	r3, r2
 800c0de:	b29b      	uxth	r3, r3
 800c0e0:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 800c0e2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800c0e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	db09      	blt.n	800c102 <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 800c0ee:	8bba      	ldrh	r2, [r7, #28]
 800c0f0:	89fb      	ldrh	r3, [r7, #14]
 800c0f2:	1ad3      	subs	r3, r2, r3
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 800c0f8:	8b3a      	ldrh	r2, [r7, #24]
 800c0fa:	89bb      	ldrh	r3, [r7, #12]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 800c102:	8afa      	ldrh	r2, [r7, #22]
 800c104:	897b      	ldrh	r3, [r7, #10]
 800c106:	4413      	add	r3, r2
 800c108:	b29b      	uxth	r3, r3
 800c10a:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 800c10c:	4b0d      	ldr	r3, [pc, #52]	@ (800c144 <UG_DrawLine+0x1bc>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800c116:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800c11a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800c11e:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 800c120:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c124:	b29b      	uxth	r3, r3
 800c126:	3301      	adds	r3, #1
 800c128:	b29b      	uxth	r3, r3
 800c12a:	83fb      	strh	r3, [r7, #30]
 800c12c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800c130:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c134:	429a      	cmp	r2, r3
 800c136:	dbcf      	blt.n	800c0d8 <UG_DrawLine+0x150>
 800c138:	e000      	b.n	800c13c <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800c13a:	bf00      	nop
      }
   }  
}
 800c13c:	3720      	adds	r7, #32
 800c13e:	46bd      	mov	sp, r7
 800c140:	bdb0      	pop	{r4, r5, r7, pc}
 800c142:	bf00      	nop
 800c144:	20001278 	.word	0x20001278

0800c148 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 800c148:	b590      	push	{r4, r7, lr}
 800c14a:	b087      	sub	sp, #28
 800c14c:	af02      	add	r7, sp, #8
 800c14e:	4603      	mov	r3, r0
 800c150:	603a      	str	r2, [r7, #0]
 800c152:	80fb      	strh	r3, [r7, #6]
 800c154:	460b      	mov	r3, r1
 800c156:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 800c158:	88fb      	ldrh	r3, [r7, #6]
 800c15a:	81fb      	strh	r3, [r7, #14]
   yp=y;
 800c15c:	88bb      	ldrh	r3, [r7, #4]
 800c15e:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 800c160:	4b44      	ldr	r3, [pc, #272]	@ (800c274 <UG_PutString+0x12c>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c166:	4618      	mov	r0, r3
 800c168:	f000 fa96 	bl	800c698 <_UG_FontSelect>
   while ( *str != 0 )
 800c16c:	e064      	b.n	800c238 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800c16e:	4b41      	ldr	r3, [pc, #260]	@ (800c274 <UG_PutString+0x12c>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c176:	2b00      	cmp	r3, #0
 800c178:	d106      	bne.n	800c188 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 800c17a:	463b      	mov	r3, r7
 800c17c:	4618      	mov	r0, r3
 800c17e:	f000 f8c7 	bl	800c310 <_UG_DecodeUTF8>
 800c182:	4603      	mov	r3, r0
 800c184:	817b      	strh	r3, [r7, #10]
 800c186:	e004      	b.n	800c192 <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	1c5a      	adds	r2, r3, #1
 800c18c:	603a      	str	r2, [r7, #0]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 800c192:	897b      	ldrh	r3, [r7, #10]
 800c194:	2b0a      	cmp	r3, #10
 800c196:	d105      	bne.n	800c1a4 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 800c198:	4b36      	ldr	r3, [pc, #216]	@ (800c274 <UG_PutString+0x12c>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	881b      	ldrh	r3, [r3, #0]
 800c1a0:	81fb      	strh	r3, [r7, #14]
         continue;
 800c1a2:	e049      	b.n	800c238 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 800c1a4:	897b      	ldrh	r3, [r7, #10]
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f000 f929 	bl	800c400 <_UG_GetCharData>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 800c1b2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ba:	d03c      	beq.n	800c236 <UG_PutString+0xee>
      if ( xp + cw > gui->device->x_dim - 1 )
 800c1bc:	4b2d      	ldr	r3, [pc, #180]	@ (800c274 <UG_PutString+0x12c>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c1cc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	4299      	cmp	r1, r3
 800c1d4:	dc11      	bgt.n	800c1fa <UG_PutString+0xb2>
      {
         xp = x;
 800c1d6:	88fb      	ldrh	r3, [r7, #6]
 800c1d8:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 800c1da:	4b26      	ldr	r3, [pc, #152]	@ (800c274 <UG_PutString+0x12c>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c1e2:	b21b      	sxth	r3, r3
 800c1e4:	4a23      	ldr	r2, [pc, #140]	@ (800c274 <UG_PutString+0x12c>)
 800c1e6:	6812      	ldr	r2, [r2, #0]
 800c1e8:	f992 204a 	ldrsb.w	r2, [r2, #74]	@ 0x4a
 800c1ec:	4413      	add	r3, r2
 800c1ee:	b21b      	sxth	r3, r3
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	89bb      	ldrh	r3, [r7, #12]
 800c1f4:	4413      	add	r3, r2
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 800c1fa:	4b1e      	ldr	r3, [pc, #120]	@ (800c274 <UG_PutString+0x12c>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f8b3 404c 	ldrh.w	r4, [r3, #76]	@ 0x4c
 800c202:	4b1c      	ldr	r3, [pc, #112]	@ (800c274 <UG_PutString+0x12c>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800c20a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800c20e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800c212:	8978      	ldrh	r0, [r7, #10]
 800c214:	9300      	str	r3, [sp, #0]
 800c216:	4623      	mov	r3, r4
 800c218:	f000 fac0 	bl	800c79c <_UG_PutChar>

      xp += cw + gui->char_h_space;
 800c21c:	4b15      	ldr	r3, [pc, #84]	@ (800c274 <UG_PutString+0x12c>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 800c224:	b29a      	uxth	r2, r3
 800c226:	893b      	ldrh	r3, [r7, #8]
 800c228:	4413      	add	r3, r2
 800c22a:	b29a      	uxth	r2, r3
 800c22c:	89fb      	ldrh	r3, [r7, #14]
 800c22e:	4413      	add	r3, r2
 800c230:	b29b      	uxth	r3, r3
 800c232:	81fb      	strh	r3, [r7, #14]
 800c234:	e000      	b.n	800c238 <UG_PutString+0xf0>
      if(cw==-1) continue;
 800c236:	bf00      	nop
   while ( *str != 0 )
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d196      	bne.n	800c16e <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 800c240:	4b0c      	ldr	r3, [pc, #48]	@ (800c274 <UG_PutString+0x12c>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800c248:	f003 0302 	and.w	r3, r3, #2
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00c      	beq.n	800c26a <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 800c250:	4b08      	ldr	r3, [pc, #32]	@ (800c274 <UG_PutString+0x12c>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c256:	461c      	mov	r4, r3
 800c258:	f04f 33ff 	mov.w	r3, #4294967295
 800c25c:	f04f 32ff 	mov.w	r2, #4294967295
 800c260:	f04f 31ff 	mov.w	r1, #4294967295
 800c264:	f04f 30ff 	mov.w	r0, #4294967295
 800c268:	47a0      	blx	r4
}
 800c26a:	bf00      	nop
 800c26c:	3714      	adds	r7, #20
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd90      	pop	{r4, r7, pc}
 800c272:	bf00      	nop
 800c274:	20001278 	.word	0x20001278

0800c278 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	4603      	mov	r3, r0
 800c280:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 800c282:	4b05      	ldr	r3, [pc, #20]	@ (800c298 <UG_SetForecolor+0x20>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	88fa      	ldrh	r2, [r7, #6]
 800c288:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
}
 800c28c:	bf00      	nop
 800c28e:	370c      	adds	r7, #12
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr
 800c298:	20001278 	.word	0x20001278

0800c29c <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 800c2a6:	4b05      	ldr	r3, [pc, #20]	@ (800c2bc <UG_SetBackcolor+0x20>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	88fa      	ldrh	r2, [r7, #6]
 800c2ac:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 800c2b0:	bf00      	nop
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr
 800c2bc:	20001278 	.word	0x20001278

0800c2c0 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b083      	sub	sp, #12
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 800c2ca:	4b06      	ldr	r3, [pc, #24]	@ (800c2e4 <UG_FontSetHSpace+0x24>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	88fa      	ldrh	r2, [r7, #6]
 800c2d0:	b252      	sxtb	r2, r2
 800c2d2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
}
 800c2d6:	bf00      	nop
 800c2d8:	370c      	adds	r7, #12
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop
 800c2e4:	20001278 	.word	0x20001278

0800c2e8 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 800c2f2:	4b06      	ldr	r3, [pc, #24]	@ (800c30c <UG_FontSetVSpace+0x24>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	88fa      	ldrh	r2, [r7, #6]
 800c2f8:	b252      	sxtb	r2, r2
 800c2fa:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800c2fe:	bf00      	nop
 800c300:	370c      	adds	r7, #12
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr
 800c30a:	bf00      	nop
 800c30c:	20001278 	.word	0x20001278

0800c310 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 800c310:	b480      	push	{r7}
 800c312:	b085      	sub	sp, #20
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]

  char c=**str;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 800c320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c324:	2b00      	cmp	r3, #0
 800c326:	db07      	blt.n	800c338 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	1c5a      	adds	r2, r3, #1
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	601a      	str	r2, [r3, #0]
    return c;
 800c332:	7bfb      	ldrb	r3, [r7, #15]
 800c334:	b29b      	uxth	r3, r3
 800c336:	e05c      	b.n	800c3f2 <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 800c338:	2300      	movs	r3, #0
 800c33a:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 800c33c:	2300      	movs	r3, #0
 800c33e:	81bb      	strh	r3, [r7, #12]

  while(**str)
 800c340:	e04f      	b.n	800c3e2 <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	1c5a      	adds	r2, r3, #1
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 800c354:	7bbb      	ldrb	r3, [r7, #14]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d130      	bne.n	800c3bc <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 800c35a:	7bfb      	ldrb	r3, [r7, #15]
 800c35c:	2bdf      	cmp	r3, #223	@ 0xdf
 800c35e:	d806      	bhi.n	800c36e <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 800c360:	2301      	movs	r3, #1
 800c362:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 800c364:	7bfb      	ldrb	r3, [r7, #15]
 800c366:	f003 031f 	and.w	r3, r3, #31
 800c36a:	73fb      	strb	r3, [r7, #15]
 800c36c:	e023      	b.n	800c3b6 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 800c36e:	7bfb      	ldrb	r3, [r7, #15]
 800c370:	2bef      	cmp	r3, #239	@ 0xef
 800c372:	d806      	bhi.n	800c382 <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 800c374:	2302      	movs	r3, #2
 800c376:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 800c378:	7bfb      	ldrb	r3, [r7, #15]
 800c37a:	f003 030f 	and.w	r3, r3, #15
 800c37e:	73fb      	strb	r3, [r7, #15]
 800c380:	e019      	b.n	800c3b6 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 800c382:	7bfb      	ldrb	r3, [r7, #15]
 800c384:	2bf7      	cmp	r3, #247	@ 0xf7
 800c386:	d806      	bhi.n	800c396 <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 800c388:	2303      	movs	r3, #3
 800c38a:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 800c38c:	7bfb      	ldrb	r3, [r7, #15]
 800c38e:	f003 0307 	and.w	r3, r3, #7
 800c392:	73fb      	strb	r3, [r7, #15]
 800c394:	e00f      	b.n	800c3b6 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 800c396:	7bfb      	ldrb	r3, [r7, #15]
 800c398:	2bfb      	cmp	r3, #251	@ 0xfb
 800c39a:	d806      	bhi.n	800c3aa <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 800c39c:	2304      	movs	r3, #4
 800c39e:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 800c3a0:	7bfb      	ldrb	r3, [r7, #15]
 800c3a2:	f003 0303 	and.w	r3, r3, #3
 800c3a6:	73fb      	strb	r3, [r7, #15]
 800c3a8:	e005      	b.n	800c3b6 <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 800c3aa:	2305      	movs	r3, #5
 800c3ac:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 800c3ae:	7bfb      	ldrb	r3, [r7, #15]
 800c3b0:	f003 0301 	and.w	r3, r3, #1
 800c3b4:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 800c3b6:	7bfb      	ldrb	r3, [r7, #15]
 800c3b8:	81bb      	strh	r3, [r7, #12]
 800c3ba:	e012      	b.n	800c3e2 <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 800c3bc:	89bb      	ldrh	r3, [r7, #12]
 800c3be:	019b      	lsls	r3, r3, #6
 800c3c0:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 800c3c2:	7bfb      	ldrb	r3, [r7, #15]
 800c3c4:	b21b      	sxth	r3, r3
 800c3c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c3ca:	b21a      	sxth	r2, r3
 800c3cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	b21b      	sxth	r3, r3
 800c3d4:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 800c3d6:	7bbb      	ldrb	r3, [r7, #14]
 800c3d8:	3b01      	subs	r3, #1
 800c3da:	73bb      	strb	r3, [r7, #14]
 800c3dc:	7bbb      	ldrb	r3, [r7, #14]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d005      	beq.n	800c3ee <_UG_DecodeUTF8+0xde>
  while(**str)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d1aa      	bne.n	800c342 <_UG_DecodeUTF8+0x32>
 800c3ec:	e000      	b.n	800c3f0 <_UG_DecodeUTF8+0xe0>
        break;
 800c3ee:	bf00      	nop
    }
  }
  return encoding;
 800c3f0:	89bb      	ldrh	r3, [r7, #12]
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3714      	adds	r7, #20
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr
	...

0800c400 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 800c400:	b580      	push	{r7, lr}
 800c402:	b086      	sub	sp, #24
 800c404:	af00      	add	r7, sp, #0
 800c406:	4603      	mov	r3, r0
 800c408:	6039      	str	r1, [r7, #0]
 800c40a:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 800c40c:	2300      	movs	r3, #0
 800c40e:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 800c410:	2300      	movs	r3, #0
 800c412:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 800c414:	2300      	movs	r3, #0
 800c416:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 800c418:	2300      	movs	r3, #0
 800c41a:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 800c41c:	2300      	movs	r3, #0
 800c41e:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 800c420:	4b98      	ldr	r3, [pc, #608]	@ (800c684 <_UG_GetCharData+0x284>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c426:	4b98      	ldr	r3, [pc, #608]	@ (800c688 <_UG_GetCharData+0x288>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d10f      	bne.n	800c44e <_UG_GetCharData+0x4e>
 800c42e:	4b97      	ldr	r3, [pc, #604]	@ (800c68c <_UG_GetCharData+0x28c>)
 800c430:	881b      	ldrh	r3, [r3, #0]
 800c432:	88fa      	ldrh	r2, [r7, #6]
 800c434:	429a      	cmp	r2, r3
 800c436:	d10a      	bne.n	800c44e <_UG_GetCharData+0x4e>
    if(p){
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d003      	beq.n	800c446 <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 800c43e:	4b94      	ldr	r3, [pc, #592]	@ (800c690 <_UG_GetCharData+0x290>)
 800c440:	681a      	ldr	r2, [r3, #0]
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 800c446:	4b93      	ldr	r3, [pc, #588]	@ (800c694 <_UG_GetCharData+0x294>)
 800c448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c44c:	e116      	b.n	800c67c <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 800c44e:	4b8d      	ldr	r3, [pc, #564]	@ (800c684 <_UG_GetCharData+0x284>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c456:	2b00      	cmp	r3, #0
 800c458:	f000 80cc 	beq.w	800c5f4 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 800c45c:	88fb      	ldrh	r3, [r7, #6]
 800c45e:	2bfc      	cmp	r3, #252	@ 0xfc
 800c460:	f300 80c8 	bgt.w	800c5f4 <_UG_GetCharData+0x1f4>
 800c464:	2bd6      	cmp	r3, #214	@ 0xd6
 800c466:	da09      	bge.n	800c47c <_UG_GetCharData+0x7c>
 800c468:	2bc4      	cmp	r3, #196	@ 0xc4
 800c46a:	d06c      	beq.n	800c546 <_UG_GetCharData+0x146>
 800c46c:	2bc4      	cmp	r3, #196	@ 0xc4
 800c46e:	f300 80c1 	bgt.w	800c5f4 <_UG_GetCharData+0x1f4>
 800c472:	2bb0      	cmp	r3, #176	@ 0xb0
 800c474:	d06d      	beq.n	800c552 <_UG_GetCharData+0x152>
 800c476:	2bb5      	cmp	r3, #181	@ 0xb5
 800c478:	d068      	beq.n	800c54c <_UG_GetCharData+0x14c>
 800c47a:	e06e      	b.n	800c55a <_UG_GetCharData+0x15a>
 800c47c:	3bd6      	subs	r3, #214	@ 0xd6
 800c47e:	2b26      	cmp	r3, #38	@ 0x26
 800c480:	f200 80b8 	bhi.w	800c5f4 <_UG_GetCharData+0x1f4>
 800c484:	a201      	add	r2, pc, #4	@ (adr r2, 800c48c <_UG_GetCharData+0x8c>)
 800c486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c48a:	bf00      	nop
 800c48c:	0800c52f 	.word	0x0800c52f
 800c490:	0800c5f5 	.word	0x0800c5f5
 800c494:	0800c5f5 	.word	0x0800c5f5
 800c498:	0800c5f5 	.word	0x0800c5f5
 800c49c:	0800c5f5 	.word	0x0800c5f5
 800c4a0:	0800c5f5 	.word	0x0800c5f5
 800c4a4:	0800c53b 	.word	0x0800c53b
 800c4a8:	0800c5f5 	.word	0x0800c5f5
 800c4ac:	0800c5f5 	.word	0x0800c5f5
 800c4b0:	0800c5f5 	.word	0x0800c5f5
 800c4b4:	0800c5f5 	.word	0x0800c5f5
 800c4b8:	0800c5f5 	.word	0x0800c5f5
 800c4bc:	0800c5f5 	.word	0x0800c5f5
 800c4c0:	0800c5f5 	.word	0x0800c5f5
 800c4c4:	0800c541 	.word	0x0800c541
 800c4c8:	0800c5f5 	.word	0x0800c5f5
 800c4cc:	0800c5f5 	.word	0x0800c5f5
 800c4d0:	0800c5f5 	.word	0x0800c5f5
 800c4d4:	0800c5f5 	.word	0x0800c5f5
 800c4d8:	0800c5f5 	.word	0x0800c5f5
 800c4dc:	0800c5f5 	.word	0x0800c5f5
 800c4e0:	0800c5f5 	.word	0x0800c5f5
 800c4e4:	0800c5f5 	.word	0x0800c5f5
 800c4e8:	0800c5f5 	.word	0x0800c5f5
 800c4ec:	0800c5f5 	.word	0x0800c5f5
 800c4f0:	0800c5f5 	.word	0x0800c5f5
 800c4f4:	0800c5f5 	.word	0x0800c5f5
 800c4f8:	0800c5f5 	.word	0x0800c5f5
 800c4fc:	0800c5f5 	.word	0x0800c5f5
 800c500:	0800c5f5 	.word	0x0800c5f5
 800c504:	0800c5f5 	.word	0x0800c5f5
 800c508:	0800c5f5 	.word	0x0800c5f5
 800c50c:	0800c529 	.word	0x0800c529
 800c510:	0800c5f5 	.word	0x0800c5f5
 800c514:	0800c5f5 	.word	0x0800c5f5
 800c518:	0800c5f5 	.word	0x0800c5f5
 800c51c:	0800c5f5 	.word	0x0800c5f5
 800c520:	0800c5f5 	.word	0x0800c5f5
 800c524:	0800c535 	.word	0x0800c535
    {
       case 0xF6: encoding = 0x94; break; // ö
 800c528:	2394      	movs	r3, #148	@ 0x94
 800c52a:	80fb      	strh	r3, [r7, #6]
 800c52c:	e015      	b.n	800c55a <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 800c52e:	2399      	movs	r3, #153	@ 0x99
 800c530:	80fb      	strh	r3, [r7, #6]
 800c532:	e012      	b.n	800c55a <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 800c534:	2381      	movs	r3, #129	@ 0x81
 800c536:	80fb      	strh	r3, [r7, #6]
 800c538:	e00f      	b.n	800c55a <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 800c53a:	239a      	movs	r3, #154	@ 0x9a
 800c53c:	80fb      	strh	r3, [r7, #6]
 800c53e:	e00c      	b.n	800c55a <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 800c540:	2384      	movs	r3, #132	@ 0x84
 800c542:	80fb      	strh	r3, [r7, #6]
 800c544:	e009      	b.n	800c55a <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 800c546:	238e      	movs	r3, #142	@ 0x8e
 800c548:	80fb      	strh	r3, [r7, #6]
 800c54a:	e006      	b.n	800c55a <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 800c54c:	23e6      	movs	r3, #230	@ 0xe6
 800c54e:	80fb      	strh	r3, [r7, #6]
 800c550:	e003      	b.n	800c55a <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 800c552:	23f8      	movs	r3, #248	@ 0xf8
 800c554:	80fb      	strh	r3, [r7, #6]
 800c556:	bf00      	nop
 800c558:	e04c      	b.n	800c5f4 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 800c55a:	e04b      	b.n	800c5f4 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 800c55c:	4b49      	ldr	r3, [pc, #292]	@ (800c684 <_UG_GetCharData+0x284>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c562:	8a7a      	ldrh	r2, [r7, #18]
 800c564:	0052      	lsls	r2, r2, #1
 800c566:	4413      	add	r3, r2
 800c568:	4618      	mov	r0, r3
 800c56a:	f7ff fb52 	bl	800bc12 <ptr_8to16>
 800c56e:	4603      	mov	r3, r0
 800c570:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 800c572:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c576:	2b00      	cmp	r3, #0
 800c578:	da06      	bge.n	800c588 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 800c57a:	89fb      	ldrh	r3, [r7, #14]
 800c57c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800c580:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 800c582:	2301      	movs	r3, #1
 800c584:	747b      	strb	r3, [r7, #17]
 800c586:	e032      	b.n	800c5ee <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 800c588:	7c7b      	ldrb	r3, [r7, #17]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d021      	beq.n	800c5d2 <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 800c58e:	88fa      	ldrh	r2, [r7, #6]
 800c590:	8afb      	ldrh	r3, [r7, #22]
 800c592:	429a      	cmp	r2, r3
 800c594:	d30d      	bcc.n	800c5b2 <_UG_GetCharData+0x1b2>
 800c596:	88fa      	ldrh	r2, [r7, #6]
 800c598:	89fb      	ldrh	r3, [r7, #14]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d809      	bhi.n	800c5b2 <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 800c59e:	88fa      	ldrh	r2, [r7, #6]
 800c5a0:	8afb      	ldrh	r3, [r7, #22]
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	8abb      	ldrh	r3, [r7, #20]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	82bb      	strh	r3, [r7, #20]
        found=1;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	743b      	strb	r3, [r7, #16]
        break;
 800c5b0:	e02a      	b.n	800c608 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 800c5b2:	88fa      	ldrh	r2, [r7, #6]
 800c5b4:	8afb      	ldrh	r3, [r7, #22]
 800c5b6:	429a      	cmp	r2, r3
 800c5b8:	d323      	bcc.n	800c602 <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 800c5ba:	89fa      	ldrh	r2, [r7, #14]
 800c5bc:	8afb      	ldrh	r3, [r7, #22]
 800c5be:	1ad3      	subs	r3, r2, r3
 800c5c0:	b29a      	uxth	r2, r3
 800c5c2:	8abb      	ldrh	r3, [r7, #20]
 800c5c4:	4413      	add	r3, r2
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	82bb      	strh	r3, [r7, #20]
      range=0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	747b      	strb	r3, [r7, #17]
 800c5d0:	e00d      	b.n	800c5ee <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 800c5d2:	88fa      	ldrh	r2, [r7, #6]
 800c5d4:	89fb      	ldrh	r3, [r7, #14]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d102      	bne.n	800c5e0 <_UG_GetCharData+0x1e0>
      {
        found=1;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	743b      	strb	r3, [r7, #16]
        break;
 800c5de:	e013      	b.n	800c608 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 800c5e0:	88fa      	ldrh	r2, [r7, #6]
 800c5e2:	89fb      	ldrh	r3, [r7, #14]
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d30e      	bcc.n	800c606 <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 800c5e8:	8abb      	ldrh	r3, [r7, #20]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 800c5ee:	8a7b      	ldrh	r3, [r7, #18]
 800c5f0:	3301      	adds	r3, #1
 800c5f2:	827b      	strh	r3, [r7, #18]
 800c5f4:	4b23      	ldr	r3, [pc, #140]	@ (800c684 <_UG_GetCharData+0x284>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800c5fa:	8a7a      	ldrh	r2, [r7, #18]
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d3ad      	bcc.n	800c55c <_UG_GetCharData+0x15c>
 800c600:	e002      	b.n	800c608 <_UG_GetCharData+0x208>
        break;
 800c602:	bf00      	nop
 800c604:	e000      	b.n	800c608 <_UG_GetCharData+0x208>
        break;
 800c606:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 800c608:	7c3b      	ldrb	r3, [r7, #16]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d034      	beq.n	800c678 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 800c60e:	4b1d      	ldr	r3, [pc, #116]	@ (800c684 <_UG_GetCharData+0x284>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c614:	4a1c      	ldr	r2, [pc, #112]	@ (800c688 <_UG_GetCharData+0x288>)
 800c616:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 800c618:	4a1c      	ldr	r2, [pc, #112]	@ (800c68c <_UG_GetCharData+0x28c>)
 800c61a:	88fb      	ldrh	r3, [r7, #6]
 800c61c:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 800c61e:	4b19      	ldr	r3, [pc, #100]	@ (800c684 <_UG_GetCharData+0x284>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c624:	8aba      	ldrh	r2, [r7, #20]
 800c626:	4917      	ldr	r1, [pc, #92]	@ (800c684 <_UG_GetCharData+0x284>)
 800c628:	6809      	ldr	r1, [r1, #0]
 800c62a:	8e09      	ldrh	r1, [r1, #48]	@ 0x30
 800c62c:	fb01 f202 	mul.w	r2, r1, r2
 800c630:	4413      	add	r3, r2
 800c632:	4a17      	ldr	r2, [pc, #92]	@ (800c690 <_UG_GetCharData+0x290>)
 800c634:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 800c636:	4b13      	ldr	r3, [pc, #76]	@ (800c684 <_UG_GetCharData+0x284>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d009      	beq.n	800c654 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 800c640:	4b10      	ldr	r3, [pc, #64]	@ (800c684 <_UG_GetCharData+0x284>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c646:	8abb      	ldrh	r3, [r7, #20]
 800c648:	4413      	add	r3, r2
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	b21a      	sxth	r2, r3
 800c64e:	4b11      	ldr	r3, [pc, #68]	@ (800c694 <_UG_GetCharData+0x294>)
 800c650:	801a      	strh	r2, [r3, #0]
 800c652:	e006      	b.n	800c662 <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 800c654:	4b0b      	ldr	r3, [pc, #44]	@ (800c684 <_UG_GetCharData+0x284>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c65c:	b21a      	sxth	r2, r3
 800c65e:	4b0d      	ldr	r3, [pc, #52]	@ (800c694 <_UG_GetCharData+0x294>)
 800c660:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d003      	beq.n	800c670 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 800c668:	4b09      	ldr	r3, [pc, #36]	@ (800c690 <_UG_GetCharData+0x290>)
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 800c670:	4b08      	ldr	r3, [pc, #32]	@ (800c694 <_UG_GetCharData+0x294>)
 800c672:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c676:	e001      	b.n	800c67c <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 800c678:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3718      	adds	r7, #24
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	20001278 	.word	0x20001278
 800c688:	2000127c 	.word	0x2000127c
 800c68c:	20001280 	.word	0x20001280
 800c690:	20001284 	.word	0x20001284
 800c694:	20001288 	.word	0x20001288

0800c698 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 800c698:	b590      	push	{r4, r7, lr}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 800c6a0:	4b3d      	ldr	r3, [pc, #244]	@ (800c798 <_UG_FontSelect+0x100>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d070      	beq.n	800c78e <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 800c6ac:	4b3a      	ldr	r3, [pc, #232]	@ (800c798 <_UG_FontSelect+0x100>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	645a      	str	r2, [r3, #68]	@ 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	781a      	ldrb	r2, [r3, #0]
 800c6b8:	4b37      	ldr	r3, [pc, #220]	@ (800c798 <_UG_FontSelect+0x100>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c6c0:	b2d2      	uxtb	r2, r2
 800c6c2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	1c5a      	adds	r2, r3, #1
 800c6ca:	607a      	str	r2, [r7, #4]
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	b25b      	sxtb	r3, r3
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	da01      	bge.n	800c6d8 <_UG_FontSelect+0x40>
 800c6d4:	2201      	movs	r2, #1
 800c6d6:	e000      	b.n	800c6da <_UG_FontSelect+0x42>
 800c6d8:	2200      	movs	r2, #0
 800c6da:	4b2f      	ldr	r3, [pc, #188]	@ (800c798 <_UG_FontSelect+0x100>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	b2d2      	uxtb	r2, r2
 800c6e0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	1c5a      	adds	r2, r3, #1
 800c6e8:	607a      	str	r2, [r7, #4]
 800c6ea:	4a2b      	ldr	r2, [pc, #172]	@ (800c798 <_UG_FontSelect+0x100>)
 800c6ec:	6812      	ldr	r2, [r2, #0]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	1c5a      	adds	r2, r3, #1
 800c6f8:	607a      	str	r2, [r7, #4]
 800c6fa:	4a27      	ldr	r2, [pc, #156]	@ (800c798 <_UG_FontSelect+0x100>)
 800c6fc:	6812      	ldr	r2, [r2, #0]
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	f882 302f 	strb.w	r3, [r2, #47]	@ 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 800c704:	4b24      	ldr	r3, [pc, #144]	@ (800c798 <_UG_FontSelect+0x100>)
 800c706:	681c      	ldr	r4, [r3, #0]
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f7ff fa82 	bl	800bc12 <ptr_8to16>
 800c70e:	4603      	mov	r3, r0
 800c710:	8663      	strh	r3, [r4, #50]	@ 0x32
  font+=2;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	3302      	adds	r3, #2
 800c716:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 800c718:	4b1f      	ldr	r3, [pc, #124]	@ (800c798 <_UG_FontSelect+0x100>)
 800c71a:	681c      	ldr	r4, [r3, #0]
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f7ff fa78 	bl	800bc12 <ptr_8to16>
 800c722:	4603      	mov	r3, r0
 800c724:	86a3      	strh	r3, [r4, #52]	@ 0x34
  font+=2;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	3302      	adds	r3, #2
 800c72a:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 800c72c:	4b1a      	ldr	r3, [pc, #104]	@ (800c798 <_UG_FontSelect+0x100>)
 800c72e:	681c      	ldr	r4, [r3, #0]
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f7ff fa6e 	bl	800bc12 <ptr_8to16>
 800c736:	4603      	mov	r3, r0
 800c738:	8623      	strh	r3, [r4, #48]	@ 0x30
  font+=2;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	3302      	adds	r3, #2
 800c73e:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	1c5a      	adds	r2, r3, #1
 800c744:	607a      	str	r2, [r7, #4]
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d00b      	beq.n	800c764 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 800c74c:	4b12      	ldr	r3, [pc, #72]	@ (800c798 <_UG_FontSelect+0x100>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	639a      	str	r2, [r3, #56]	@ 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 800c754:	4b10      	ldr	r3, [pc, #64]	@ (800c798 <_UG_FontSelect+0x100>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c75a:	461a      	mov	r2, r3
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	4413      	add	r3, r2
 800c760:	607b      	str	r3, [r7, #4]
 800c762:	e003      	b.n	800c76c <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 800c764:	4b0c      	ldr	r3, [pc, #48]	@ (800c798 <_UG_FontSelect+0x100>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	2200      	movs	r2, #0
 800c76a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 800c76c:	4b0a      	ldr	r3, [pc, #40]	@ (800c798 <_UG_FontSelect+0x100>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	63da      	str	r2, [r3, #60]	@ 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 800c774:	4b08      	ldr	r3, [pc, #32]	@ (800c798 <_UG_FontSelect+0x100>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800c77a:	005b      	lsls	r3, r3, #1
 800c77c:	461a      	mov	r2, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	4413      	add	r3, r2
 800c782:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 800c784:	4b04      	ldr	r3, [pc, #16]	@ (800c798 <_UG_FontSelect+0x100>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	641a      	str	r2, [r3, #64]	@ 0x40
 800c78c:	e000      	b.n	800c790 <_UG_FontSelect+0xf8>
    return;
 800c78e:	bf00      	nop
}
 800c790:	370c      	adds	r7, #12
 800c792:	46bd      	mov	sp, r7
 800c794:	bd90      	pop	{r4, r7, pc}
 800c796:	bf00      	nop
 800c798:	20001278 	.word	0x20001278

0800c79c <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 800c79c:	b5b0      	push	{r4, r5, r7, lr}
 800c79e:	b08c      	sub	sp, #48	@ 0x30
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	4608      	mov	r0, r1
 800c7a6:	4611      	mov	r1, r2
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	4623      	mov	r3, r4
 800c7ac:	80fb      	strh	r3, [r7, #6]
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	80bb      	strh	r3, [r7, #4]
 800c7b2:	460b      	mov	r3, r1
 800c7b4:	807b      	strh	r3, [r7, #2]
 800c7b6:	4613      	mov	r3, r2
 800c7b8:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c7be:	2300      	movs	r3, #0
 800c7c0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 800c7ca:	4b8b      	ldr	r3, [pc, #556]	@ (800c9f8 <_UG_PutChar+0x25c>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c7d2:	75fb      	strb	r3, [r7, #23]
 800c7d4:	4b88      	ldr	r3, [pc, #544]	@ (800c9f8 <_UG_PutChar+0x25c>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800c7dc:	f003 0302 	and.w	r3, r3, #2
 800c7e0:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 800c7e6:	f107 0208 	add.w	r2, r7, #8
 800c7ea:	88fb      	ldrh	r3, [r7, #6]
 800c7ec:	4611      	mov	r1, r2
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7ff fe06 	bl	800c400 <_UG_GetCharData>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 800c7f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c800:	d102      	bne.n	800c808 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 800c802:	f04f 33ff 	mov.w	r3, #4294967295
 800c806:	e224      	b.n	800cc52 <_UG_PutChar+0x4b6>

   bn =  gui->currentFont.char_width;
 800c808:	4b7b      	ldr	r3, [pc, #492]	@ (800c9f8 <_UG_PutChar+0x25c>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c810:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if ( !bn ){
 800c812:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c814:	2b00      	cmp	r3, #0
 800c816:	d101      	bne.n	800c81c <_UG_PutChar+0x80>
     return 0;
 800c818:	2300      	movs	r3, #0
 800c81a:	e21a      	b.n	800cc52 <_UG_PutChar+0x4b6>
   }
   bn >>= 3;
 800c81c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c81e:	08db      	lsrs	r3, r3, #3
 800c820:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 800c822:	4b75      	ldr	r3, [pc, #468]	@ (800c9f8 <_UG_PutChar+0x25c>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800c82a:	f003 0307 	and.w	r3, r3, #7
 800c82e:	b2db      	uxtb	r3, r3
 800c830:	2b00      	cmp	r3, #0
 800c832:	d002      	beq.n	800c83a <_UG_PutChar+0x9e>
 800c834:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c836:	3301      	adds	r3, #1
 800c838:	84bb      	strh	r3, [r7, #36]	@ 0x24

   /* Is hardware acceleration available? */
   if (driver)
 800c83a:	7dbb      	ldrb	r3, [r7, #22]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d01c      	beq.n	800c87a <_UG_PutChar+0xde>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 800c840:	4b6d      	ldr	r3, [pc, #436]	@ (800c9f8 <_UG_PutChar+0x25c>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c846:	461c      	mov	r4, r3
 800c848:	88ba      	ldrh	r2, [r7, #4]
 800c84a:	8abb      	ldrh	r3, [r7, #20]
 800c84c:	4413      	add	r3, r2
 800c84e:	b29b      	uxth	r3, r3
 800c850:	3b01      	subs	r3, #1
 800c852:	b29b      	uxth	r3, r3
 800c854:	b21a      	sxth	r2, r3
 800c856:	4b68      	ldr	r3, [pc, #416]	@ (800c9f8 <_UG_PutChar+0x25c>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c85e:	4619      	mov	r1, r3
 800c860:	887b      	ldrh	r3, [r7, #2]
 800c862:	440b      	add	r3, r1
 800c864:	b29b      	uxth	r3, r3
 800c866:	3b01      	subs	r3, #1
 800c868:	b29b      	uxth	r3, r3
 800c86a:	b21b      	sxth	r3, r3
 800c86c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800c870:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800c874:	47a0      	blx	r4
 800c876:	4603      	mov	r3, r0
 800c878:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 800c87a:	4b5f      	ldr	r3, [pc, #380]	@ (800c9f8 <_UG_PutChar+0x25c>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c882:	2b00      	cmp	r3, #0
 800c884:	f040 8171 	bne.w	800cb6a <_UG_PutChar+0x3ce>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 800c888:	2300      	movs	r3, #0
 800c88a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c88c:	e0eb      	b.n	800ca66 <_UG_PutChar+0x2ca>
     {
       c=0;
 800c88e:	2300      	movs	r3, #0
 800c890:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 800c892:	2300      	movs	r3, #0
 800c894:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800c896:	e0de      	b.n	800ca56 <_UG_PutChar+0x2ba>
       {
         b = *data++;
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	1c5a      	adds	r2, r3, #1
 800c89c:	60ba      	str	r2, [r7, #8]
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c8a6:	e0c9      	b.n	800ca3c <_UG_PutChar+0x2a0>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 800c8a8:	7f7b      	ldrb	r3, [r7, #29]
 800c8aa:	f003 0301 	and.w	r3, r3, #1
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d033      	beq.n	800c91a <_UG_PutChar+0x17e>
           {
             if(driver)
 800c8b2:	7dbb      	ldrb	r3, [r7, #22]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d01f      	beq.n	800c8f8 <_UG_PutChar+0x15c>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 800c8b8:	8c3b      	ldrh	r3, [r7, #32]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d00a      	beq.n	800c8d4 <_UG_PutChar+0x138>
 800c8be:	7dfb      	ldrb	r3, [r7, #23]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d107      	bne.n	800c8d4 <_UG_PutChar+0x138>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 800c8c4:	8c3a      	ldrh	r2, [r7, #32]
 800c8c6:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800c8ca:	69bb      	ldr	r3, [r7, #24]
 800c8cc:	4610      	mov	r0, r2
 800c8ce:	4798      	blx	r3
                 bpixels=0;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 800c8d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d10a      	bne.n	800c8f0 <_UG_PutChar+0x154>
 800c8da:	7dfb      	ldrb	r3, [r7, #23]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d007      	beq.n	800c8f0 <_UG_PutChar+0x154>
               {
                 x0=x+c;
 800c8e0:	88ba      	ldrh	r2, [r7, #4]
 800c8e2:	8bfb      	ldrh	r3, [r7, #30]
 800c8e4:	4413      	add	r3, r2
 800c8e6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                 y0=y+j;
 800c8e8:	887a      	ldrh	r2, [r7, #2]
 800c8ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c8ec:	4413      	add	r3, r2
 800c8ee:	85bb      	strh	r3, [r7, #44]	@ 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 800c8f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c8f6:	e095      	b.n	800ca24 <_UG_PutChar+0x288>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 800c8f8:	4b3f      	ldr	r3, [pc, #252]	@ (800c9f8 <_UG_PutChar+0x25c>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	88b9      	ldrh	r1, [r7, #4]
 800c902:	8bfa      	ldrh	r2, [r7, #30]
 800c904:	440a      	add	r2, r1
 800c906:	b292      	uxth	r2, r2
 800c908:	b210      	sxth	r0, r2
 800c90a:	8879      	ldrh	r1, [r7, #2]
 800c90c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c90e:	440a      	add	r2, r1
 800c910:	b292      	uxth	r2, r2
 800c912:	b211      	sxth	r1, r2
 800c914:	883a      	ldrh	r2, [r7, #0]
 800c916:	4798      	blx	r3
 800c918:	e084      	b.n	800ca24 <_UG_PutChar+0x288>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 800c91a:	7dbb      	ldrb	r3, [r7, #22]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d06d      	beq.n	800c9fc <_UG_PutChar+0x260>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 800c920:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c922:	2b00      	cmp	r3, #0
 800c924:	d064      	beq.n	800c9f0 <_UG_PutChar+0x254>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 800c926:	7dfb      	ldrb	r3, [r7, #23]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d15e      	bne.n	800c9ea <_UG_PutChar+0x24e>
                 {
                   push_pixels(fpixels,fc);
 800c92c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c92e:	8839      	ldrh	r1, [r7, #0]
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	4610      	mov	r0, r2
 800c934:	4798      	blx	r3
                   fpixels=0;
 800c936:	2300      	movs	r3, #0
 800c938:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c93a:	e059      	b.n	800c9f0 <_UG_PutChar+0x254>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 800c93c:	88ba      	ldrh	r2, [r7, #4]
 800c93e:	8abb      	ldrh	r3, [r7, #20]
 800c940:	4413      	add	r3, r2
 800c942:	b29a      	uxth	r2, r3
 800c944:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c946:	1ad3      	subs	r3, r2, r3
 800c948:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 800c94a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c94c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800c950:	429a      	cmp	r2, r3
 800c952:	d003      	beq.n	800c95c <_UG_PutChar+0x1c0>
 800c954:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c956:	89fb      	ldrh	r3, [r7, #14]
 800c958:	429a      	cmp	r2, r3
 800c95a:	d224      	bcs.n	800c9a6 <_UG_PutChar+0x20a>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 800c95c:	4b26      	ldr	r3, [pc, #152]	@ (800c9f8 <_UG_PutChar+0x25c>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c962:	461d      	mov	r5, r3
 800c964:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800c968:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 800c96c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c96e:	89fb      	ldrh	r3, [r7, #14]
 800c970:	4413      	add	r3, r2
 800c972:	b29b      	uxth	r3, r3
 800c974:	3b01      	subs	r3, #1
 800c976:	b29b      	uxth	r3, r3
 800c978:	b21c      	sxth	r4, r3
 800c97a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c97c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c980:	fb92 f3f3 	sdiv	r3, r2, r3
 800c984:	b29a      	uxth	r2, r3
 800c986:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c988:	4413      	add	r3, r2
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	b21b      	sxth	r3, r3
 800c98e:	4622      	mov	r2, r4
 800c990:	47a8      	blx	r5
 800c992:	4603      	mov	r3, r0
 800c994:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 800c996:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c998:	8839      	ldrh	r1, [r7, #0]
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	4610      	mov	r0, r2
 800c99e:	4798      	blx	r3
                       fpixels=0;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c9a4:	e021      	b.n	800c9ea <_UG_PutChar+0x24e>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 800c9a6:	4b14      	ldr	r3, [pc, #80]	@ (800c9f8 <_UG_PutChar+0x25c>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c9ac:	461c      	mov	r4, r3
 800c9ae:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800c9b2:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 800c9b6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c9b8:	89fb      	ldrh	r3, [r7, #14]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	3b01      	subs	r3, #1
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	b21a      	sxth	r2, r3
 800c9c4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800c9c8:	47a0      	blx	r4
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 800c9ce:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c9d0:	8839      	ldrh	r1, [r7, #0]
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	4610      	mov	r0, r2
 800c9d6:	4798      	blx	r3
                       fpixels -= width;
 800c9d8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c9da:	89fb      	ldrh	r3, [r7, #14]
 800c9dc:	1ad3      	subs	r3, r2, r3
 800c9de:	847b      	strh	r3, [r7, #34]	@ 0x22
                       x0=x;
 800c9e0:	88bb      	ldrh	r3, [r7, #4]
 800c9e2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                       y0++;
 800c9e4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c9e6:	3301      	adds	r3, #1
 800c9e8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                   while(fpixels)
 800c9ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d1a5      	bne.n	800c93c <_UG_PutChar+0x1a0>
                     }
                   }
                 }
               }
               bpixels++;
 800c9f0:	8c3b      	ldrh	r3, [r7, #32]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	843b      	strh	r3, [r7, #32]
 800c9f6:	e015      	b.n	800ca24 <_UG_PutChar+0x288>
 800c9f8:	20001278 	.word	0x20001278
             }
             else if(!trans)                           // Not accelerated output
 800c9fc:	7dfb      	ldrb	r3, [r7, #23]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d110      	bne.n	800ca24 <_UG_PutChar+0x288>
             {
               gui->device->pset(x+c,y+j,bc);
 800ca02:	4b96      	ldr	r3, [pc, #600]	@ (800cc5c <_UG_PutChar+0x4c0>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	88b9      	ldrh	r1, [r7, #4]
 800ca0c:	8bfa      	ldrh	r2, [r7, #30]
 800ca0e:	440a      	add	r2, r1
 800ca10:	b292      	uxth	r2, r2
 800ca12:	b210      	sxth	r0, r2
 800ca14:	8879      	ldrh	r1, [r7, #2]
 800ca16:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ca18:	440a      	add	r2, r1
 800ca1a:	b292      	uxth	r2, r2
 800ca1c:	b211      	sxth	r1, r2
 800ca1e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800ca22:	4798      	blx	r3
             }
           }
           b >>= 1;
 800ca24:	7f7b      	ldrb	r3, [r7, #29]
 800ca26:	085b      	lsrs	r3, r3, #1
 800ca28:	777b      	strb	r3, [r7, #29]
           c++;
 800ca2a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	3301      	adds	r3, #1
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 800ca36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ca38:	3301      	adds	r3, #1
 800ca3a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800ca3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ca3e:	2b07      	cmp	r3, #7
 800ca40:	d806      	bhi.n	800ca50 <_UG_PutChar+0x2b4>
 800ca42:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800ca46:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	f6ff af2c 	blt.w	800c8a8 <_UG_PutChar+0x10c>
       for( i=0;i<bn;i++ )
 800ca50:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ca52:	3301      	adds	r3, #1
 800ca54:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800ca56:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800ca58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	f4ff af1c 	bcc.w	800c898 <_UG_PutChar+0xfc>
     for( j=0;j< gui->currentFont.char_height;j++ )
 800ca60:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ca62:	3301      	adds	r3, #1
 800ca64:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ca66:	4b7d      	ldr	r3, [pc, #500]	@ (800cc5c <_UG_PutChar+0x4c0>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ca6e:	461a      	mov	r2, r3
 800ca70:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ca72:	4293      	cmp	r3, r2
 800ca74:	f4ff af0b 	bcc.w	800c88e <_UG_PutChar+0xf2>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 800ca78:	7dbb      	ldrb	r3, [r7, #22]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	f000 80e7 	beq.w	800cc4e <_UG_PutChar+0x4b2>
       if(bpixels && !trans)
 800ca80:	8c3b      	ldrh	r3, [r7, #32]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d009      	beq.n	800ca9a <_UG_PutChar+0x2fe>
 800ca86:	7dfb      	ldrb	r3, [r7, #23]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d106      	bne.n	800ca9a <_UG_PutChar+0x2fe>
       {
         push_pixels(bpixels,bc);
 800ca8c:	8c3a      	ldrh	r2, [r7, #32]
 800ca8e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800ca92:	69bb      	ldr	r3, [r7, #24]
 800ca94:	4610      	mov	r0, r2
 800ca96:	4798      	blx	r3
 800ca98:	e0d9      	b.n	800cc4e <_UG_PutChar+0x4b2>
       }
       else if(fpixels)
 800ca9a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	f000 80d6 	beq.w	800cc4e <_UG_PutChar+0x4b2>
       {
         if(!trans)
 800caa2:	7dfb      	ldrb	r3, [r7, #23]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d15c      	bne.n	800cb62 <_UG_PutChar+0x3c6>
         {
           push_pixels(fpixels,fc);
 800caa8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800caaa:	8839      	ldrh	r1, [r7, #0]
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	4610      	mov	r0, r2
 800cab0:	4798      	blx	r3
 800cab2:	e0cc      	b.n	800cc4e <_UG_PutChar+0x4b2>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 800cab4:	88ba      	ldrh	r2, [r7, #4]
 800cab6:	8abb      	ldrh	r3, [r7, #20]
 800cab8:	4413      	add	r3, r2
 800caba:	b29a      	uxth	r2, r3
 800cabc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cabe:	1ad3      	subs	r3, r2, r3
 800cac0:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 800cac2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cac4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800cac8:	429a      	cmp	r2, r3
 800caca:	d003      	beq.n	800cad4 <_UG_PutChar+0x338>
 800cacc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800cace:	8a3b      	ldrh	r3, [r7, #16]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d224      	bcs.n	800cb1e <_UG_PutChar+0x382>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 800cad4:	4b61      	ldr	r3, [pc, #388]	@ (800cc5c <_UG_PutChar+0x4c0>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cada:	461d      	mov	r5, r3
 800cadc:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800cae0:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 800cae4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cae6:	8a3b      	ldrh	r3, [r7, #16]
 800cae8:	4413      	add	r3, r2
 800caea:	b29b      	uxth	r3, r3
 800caec:	3b01      	subs	r3, #1
 800caee:	b29b      	uxth	r3, r3
 800caf0:	b21c      	sxth	r4, r3
 800caf2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800caf4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800caf8:	fb92 f3f3 	sdiv	r3, r2, r3
 800cafc:	b29a      	uxth	r2, r3
 800cafe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cb00:	4413      	add	r3, r2
 800cb02:	b29b      	uxth	r3, r3
 800cb04:	b21b      	sxth	r3, r3
 800cb06:	4622      	mov	r2, r4
 800cb08:	47a8      	blx	r5
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 800cb0e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800cb10:	8839      	ldrh	r1, [r7, #0]
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	4610      	mov	r0, r2
 800cb16:	4798      	blx	r3
               fpixels=0;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cb1c:	e021      	b.n	800cb62 <_UG_PutChar+0x3c6>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 800cb1e:	4b4f      	ldr	r3, [pc, #316]	@ (800cc5c <_UG_PutChar+0x4c0>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb24:	461c      	mov	r4, r3
 800cb26:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800cb2a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 800cb2e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800cb30:	8a3b      	ldrh	r3, [r7, #16]
 800cb32:	4413      	add	r3, r2
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	3b01      	subs	r3, #1
 800cb38:	b29b      	uxth	r3, r3
 800cb3a:	b21a      	sxth	r2, r3
 800cb3c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800cb40:	47a0      	blx	r4
 800cb42:	4603      	mov	r3, r0
 800cb44:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 800cb46:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800cb48:	8839      	ldrh	r1, [r7, #0]
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	4610      	mov	r0, r2
 800cb4e:	4798      	blx	r3
               fpixels -= width;
 800cb50:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800cb52:	8a3b      	ldrh	r3, [r7, #16]
 800cb54:	1ad3      	subs	r3, r2, r3
 800cb56:	847b      	strh	r3, [r7, #34]	@ 0x22
               x0=x;
 800cb58:	88bb      	ldrh	r3, [r7, #4]
 800cb5a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
               y0++;
 800cb5c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cb5e:	3301      	adds	r3, #1
 800cb60:	85bb      	strh	r3, [r7, #44]	@ 0x2c
           while(fpixels)
 800cb62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d1a5      	bne.n	800cab4 <_UG_PutChar+0x318>
 800cb68:	e071      	b.n	800cc4e <_UG_PutChar+0x4b2>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 800cb6a:	4b3c      	ldr	r3, [pc, #240]	@ (800cc5c <_UG_PutChar+0x4c0>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cb72:	2b01      	cmp	r3, #1
 800cb74:	d16b      	bne.n	800cc4e <_UG_PutChar+0x4b2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 800cb76:	2300      	movs	r3, #0
 800cb78:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cb7a:	e060      	b.n	800cc3e <_UG_PutChar+0x4a2>
     {
       for( i=0;i<actual_char_width;i++ )
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800cb80:	e04a      	b.n	800cc18 <_UG_PutChar+0x47c>
       {
         b = *data++;
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	1c5a      	adds	r2, r3, #1
 800cb86:	60ba      	str	r2, [r7, #8]
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 800cb8c:	883b      	ldrh	r3, [r7, #0]
 800cb8e:	b2db      	uxtb	r3, r3
 800cb90:	7f7a      	ldrb	r2, [r7, #29]
 800cb92:	fb03 f202 	mul.w	r2, r3, r2
 800cb96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800cb9a:	b2db      	uxtb	r3, r3
 800cb9c:	7f79      	ldrb	r1, [r7, #29]
 800cb9e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800cba2:	fb01 f303 	mul.w	r3, r1, r3
 800cba6:	4413      	add	r3, r2
 800cba8:	121b      	asrs	r3, r3, #8
 800cbaa:	b21b      	sxth	r3, r3
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 800cbb0:	883b      	ldrh	r3, [r7, #0]
 800cbb2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cbb6:	7f79      	ldrb	r1, [r7, #29]
 800cbb8:	fb03 f101 	mul.w	r1, r3, r1
 800cbbc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800cbc0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cbc4:	7f78      	ldrb	r0, [r7, #29]
 800cbc6:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 800cbca:	fb00 f303 	mul.w	r3, r0, r3
 800cbce:	440b      	add	r3, r1
 800cbd0:	121b      	asrs	r3, r3, #8
 800cbd2:	b21b      	sxth	r3, r3
 800cbd4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cbd8:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	b21b      	sxth	r3, r3
 800cbde:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 800cbe0:	7dbb      	ldrb	r3, [r7, #22]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d005      	beq.n	800cbf2 <_UG_PutChar+0x456>
         {
           push_pixels(1,color);                                                          // Accelerated output
 800cbe6:	8a7a      	ldrh	r2, [r7, #18]
 800cbe8:	69bb      	ldr	r3, [r7, #24]
 800cbea:	4611      	mov	r1, r2
 800cbec:	2001      	movs	r0, #1
 800cbee:	4798      	blx	r3
 800cbf0:	e00f      	b.n	800cc12 <_UG_PutChar+0x476>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 800cbf2:	4b1a      	ldr	r3, [pc, #104]	@ (800cc5c <_UG_PutChar+0x4c0>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	88b9      	ldrh	r1, [r7, #4]
 800cbfc:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800cbfe:	440a      	add	r2, r1
 800cc00:	b292      	uxth	r2, r2
 800cc02:	b210      	sxth	r0, r2
 800cc04:	8879      	ldrh	r1, [r7, #2]
 800cc06:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800cc08:	440a      	add	r2, r1
 800cc0a:	b292      	uxth	r2, r2
 800cc0c:	b211      	sxth	r1, r2
 800cc0e:	8a7a      	ldrh	r2, [r7, #18]
 800cc10:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 800cc12:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cc14:	3301      	adds	r3, #1
 800cc16:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800cc18:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800cc1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	dbaf      	blt.n	800cb82 <_UG_PutChar+0x3e6>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	4a0d      	ldr	r2, [pc, #52]	@ (800cc5c <_UG_PutChar+0x4c0>)
 800cc26:	6812      	ldr	r2, [r2, #0]
 800cc28:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 800cc2c:	4611      	mov	r1, r2
 800cc2e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800cc32:	1a8a      	subs	r2, r1, r2
 800cc34:	4413      	add	r3, r2
 800cc36:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 800cc38:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cc3e:	4b07      	ldr	r3, [pc, #28]	@ (800cc5c <_UG_PutChar+0x4c0>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cc46:	461a      	mov	r2, r3
 800cc48:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d396      	bcc.n	800cb7c <_UG_PutChar+0x3e0>
     }
   }
   #endif
   return (actual_char_width);
 800cc4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3730      	adds	r7, #48	@ 0x30
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bdb0      	pop	{r4, r5, r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	20001278 	.word	0x20001278

0800cc60 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 800cc60:	b480      	push	{r7}
 800cc62:	b089      	sub	sp, #36	@ 0x24
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 800cc68:	4b57      	ldr	r3, [pc, #348]	@ (800cdc8 <_UG_ProcessTouchData+0x168>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	88db      	ldrh	r3, [r3, #6]
 800cc6e:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 800cc70:	4b55      	ldr	r3, [pc, #340]	@ (800cdc8 <_UG_ProcessTouchData+0x168>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	891b      	ldrh	r3, [r3, #8]
 800cc76:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 800cc78:	4b53      	ldr	r3, [pc, #332]	@ (800cdc8 <_UG_ProcessTouchData+0x168>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	791b      	ldrb	r3, [r3, #4]
 800cc7e:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 800cc86:	2300      	movs	r3, #0
 800cc88:	83fb      	strh	r3, [r7, #30]
 800cc8a:	e090      	b.n	800cdae <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	685a      	ldr	r2, [r3, #4]
 800cc90:	8bfb      	ldrh	r3, [r7, #30]
 800cc92:	015b      	lsls	r3, r3, #5
 800cc94:	4413      	add	r3, r2
 800cc96:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	785b      	ldrb	r3, [r3, #1]
 800cca2:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 800cca4:	7bfb      	ldrb	r3, [r7, #15]
 800cca6:	f003 0301 	and.w	r3, r3, #1
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d179      	bne.n	800cda2 <_UG_ProcessTouchData+0x142>
 800ccae:	7bfb      	ldrb	r3, [r7, #15]
 800ccb0:	f003 0302 	and.w	r3, r3, #2
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d074      	beq.n	800cda2 <_UG_ProcessTouchData+0x142>
 800ccb8:	7bfb      	ldrb	r3, [r7, #15]
 800ccba:	f003 0308 	and.w	r3, r3, #8
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d06f      	beq.n	800cda2 <_UG_ProcessTouchData+0x142>
 800ccc2:	7bfb      	ldrb	r3, [r7, #15]
 800ccc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d16a      	bne.n	800cda2 <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 800cccc:	7dfb      	ldrb	r3, [r7, #23]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d047      	beq.n	800cd62 <_UG_ProcessTouchData+0x102>
 800ccd2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ccd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccda:	d042      	beq.n	800cd62 <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 800ccdc:	7f7b      	ldrb	r3, [r7, #29]
 800ccde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d107      	bne.n	800ccf6 <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 800cce6:	7f7b      	ldrb	r3, [r7, #29]
 800cce8:	f043 0305 	orr.w	r3, r3, #5
 800ccec:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 800ccee:	7f7b      	ldrb	r3, [r7, #29]
 800ccf0:	f023 0318 	bic.w	r3, r3, #24
 800ccf4:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 800ccf6:	7f7b      	ldrb	r3, [r7, #29]
 800ccf8:	f023 0320 	bic.w	r3, r3, #32
 800ccfc:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cd04:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	db25      	blt.n	800cd58 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800cd12:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	dc1e      	bgt.n	800cd58 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800cd20:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	db17      	blt.n	800cd58 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800cd2e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	dc10      	bgt.n	800cd58 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 800cd36:	7f7b      	ldrb	r3, [r7, #29]
 800cd38:	f043 0320 	orr.w	r3, r3, #32
 800cd3c:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 800cd3e:	7f7b      	ldrb	r3, [r7, #29]
 800cd40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d107      	bne.n	800cd58 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 800cd48:	7f7b      	ldrb	r3, [r7, #29]
 800cd4a:	f023 0304 	bic.w	r3, r3, #4
 800cd4e:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 800cd50:	7f7b      	ldrb	r3, [r7, #29]
 800cd52:	f043 0302 	orr.w	r3, r3, #2
 800cd56:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 800cd58:	7f7b      	ldrb	r3, [r7, #29]
 800cd5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd5e:	777b      	strb	r3, [r7, #29]
 800cd60:	e01f      	b.n	800cda2 <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 800cd62:	7f7b      	ldrb	r3, [r7, #29]
 800cd64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d01a      	beq.n	800cda2 <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 800cd6c:	7f7b      	ldrb	r3, [r7, #29]
 800cd6e:	f003 0320 	and.w	r3, r3, #32
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d004      	beq.n	800cd80 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 800cd76:	7f7b      	ldrb	r3, [r7, #29]
 800cd78:	f043 0308 	orr.w	r3, r3, #8
 800cd7c:	777b      	strb	r3, [r7, #29]
 800cd7e:	e003      	b.n	800cd88 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 800cd80:	7f7b      	ldrb	r3, [r7, #29]
 800cd82:	f043 0310 	orr.w	r3, r3, #16
 800cd86:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 800cd88:	7f7b      	ldrb	r3, [r7, #29]
 800cd8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d003      	beq.n	800cd9a <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 800cd92:	7f7b      	ldrb	r3, [r7, #29]
 800cd94:	f043 0301 	orr.w	r3, r3, #1
 800cd98:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 800cd9a:	7f7b      	ldrb	r3, [r7, #29]
 800cd9c:	f023 0346 	bic.w	r3, r3, #70	@ 0x46
 800cda0:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	7f7a      	ldrb	r2, [r7, #29]
 800cda6:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 800cda8:	8bfb      	ldrh	r3, [r7, #30]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	83fb      	strh	r3, [r7, #30]
 800cdae:	8bfa      	ldrh	r2, [r7, #30]
 800cdb0:	8abb      	ldrh	r3, [r7, #20]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	f4ff af6a 	bcc.w	800cc8c <_UG_ProcessTouchData+0x2c>
   }
}
 800cdb8:	bf00      	nop
 800cdba:	bf00      	nop
 800cdbc:	3724      	adds	r7, #36	@ 0x24
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc4:	4770      	bx	lr
 800cdc6:	bf00      	nop
 800cdc8:	20001278 	.word	0x20001278

0800cdcc <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 800cdda:	2300      	movs	r3, #0
 800cddc:	82fb      	strh	r3, [r7, #22]
 800cdde:	e035      	b.n	800ce4c <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	685a      	ldr	r2, [r3, #4]
 800cde4:	8afb      	ldrh	r3, [r7, #22]
 800cde6:	015b      	lsls	r3, r3, #5
 800cde8:	4413      	add	r3, r2
 800cdea:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	785b      	ldrb	r3, [r3, #1]
 800cdf6:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 800cdf8:	7bfb      	ldrb	r3, [r7, #15]
 800cdfa:	f003 0301 	and.w	r3, r3, #1
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d121      	bne.n	800ce46 <_UG_UpdateObjects+0x7a>
 800ce02:	7bfb      	ldrb	r3, [r7, #15]
 800ce04:	f003 0302 	and.w	r3, r3, #2
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d01c      	beq.n	800ce46 <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 800ce0c:	7bfb      	ldrb	r3, [r7, #15]
 800ce0e:	f003 0320 	and.w	r3, r3, #32
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d004      	beq.n	800ce20 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	6939      	ldr	r1, [r7, #16]
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 800ce20:	7bfb      	ldrb	r3, [r7, #15]
 800ce22:	f003 0308 	and.w	r3, r3, #8
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d00d      	beq.n	800ce46 <_UG_UpdateObjects+0x7a>
 800ce2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	da09      	bge.n	800ce46 <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 800ce32:	7bbb      	ldrb	r3, [r7, #14]
 800ce34:	f003 0341 	and.w	r3, r3, #65	@ 0x41
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d004      	beq.n	800ce46 <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	6939      	ldr	r1, [r7, #16]
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 800ce46:	8afb      	ldrh	r3, [r7, #22]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	82fb      	strh	r3, [r7, #22]
 800ce4c:	8afa      	ldrh	r2, [r7, #22]
 800ce4e:	8abb      	ldrh	r3, [r7, #20]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d3c5      	bcc.n	800cde0 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 800ce54:	bf00      	nop
 800ce56:	bf00      	nop
 800ce58:	3718      	adds	r7, #24
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
	...

0800ce60 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b086      	sub	sp, #24
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 800ce68:	4b22      	ldr	r3, [pc, #136]	@ (800cef4 <_UG_HandleEvents+0x94>)
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 800ce6e:	4b21      	ldr	r3, [pc, #132]	@ (800cef4 <_UG_HandleEvents+0x94>)
 800ce70:	2202      	movs	r2, #2
 800ce72:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	82fb      	strh	r3, [r7, #22]
 800ce7e:	e02f      	b.n	800cee0 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	685a      	ldr	r2, [r3, #4]
 800ce84:	8afb      	ldrh	r3, [r7, #22]
 800ce86:	015b      	lsls	r3, r3, #5
 800ce88:	4413      	add	r3, r2
 800ce8a:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 800ce8c:	693b      	ldr	r3, [r7, #16]
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 800ce92:	7bfb      	ldrb	r3, [r7, #15]
 800ce94:	f003 0301 	and.w	r3, r3, #1
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d11e      	bne.n	800ceda <_UG_HandleEvents+0x7a>
 800ce9c:	7bfb      	ldrb	r3, [r7, #15]
 800ce9e:	f003 0302 	and.w	r3, r3, #2
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d019      	beq.n	800ceda <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	7e9b      	ldrb	r3, [r3, #26]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d015      	beq.n	800ceda <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 800ceae:	4a11      	ldr	r2, [pc, #68]	@ (800cef4 <_UG_HandleEvents+0x94>)
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	7e1a      	ldrb	r2, [r3, #24]
 800ceb8:	4b0e      	ldr	r3, [pc, #56]	@ (800cef4 <_UG_HandleEvents+0x94>)
 800ceba:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	7e5a      	ldrb	r2, [r3, #25]
 800cec0:	4b0c      	ldr	r3, [pc, #48]	@ (800cef4 <_UG_HandleEvents+0x94>)
 800cec2:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	7e9a      	ldrb	r2, [r3, #26]
 800cec8:	4b0a      	ldr	r3, [pc, #40]	@ (800cef4 <_UG_HandleEvents+0x94>)
 800ceca:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ced0:	4808      	ldr	r0, [pc, #32]	@ (800cef4 <_UG_HandleEvents+0x94>)
 800ced2:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	2200      	movs	r2, #0
 800ced8:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 800ceda:	8afb      	ldrh	r3, [r7, #22]
 800cedc:	3301      	adds	r3, #1
 800cede:	82fb      	strh	r3, [r7, #22]
 800cee0:	8afa      	ldrh	r2, [r7, #22]
 800cee2:	8abb      	ldrh	r3, [r7, #20]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d3cb      	bcc.n	800ce80 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 800cee8:	bf00      	nop
 800ceea:	bf00      	nop
 800ceec:	3718      	adds	r7, #24
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	2000128c 	.word	0x2000128c

0800cef8 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 800cef8:	b590      	push	{r4, r7, lr}
 800cefa:	b08f      	sub	sp, #60	@ 0x3c
 800cefc:	af02      	add	r7, sp, #8
 800cefe:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	f000 812c 	beq.w	800d162 <_UG_PutText+0x26a>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	f000 8127 	beq.w	800d162 <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	89db      	ldrh	r3, [r3, #14]
 800cf18:	847b      	strh	r3, [r7, #34]	@ 0x22
   UG_S16 ys=txt->a.ys;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	895b      	ldrh	r3, [r3, #10]
 800cf1e:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	3302      	adds	r3, #2
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 800cf2a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800cf2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf32:	1ad2      	subs	r2, r2, r3
 800cf34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	f2c0 8114 	blt.w	800d166 <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	891b      	ldrh	r3, [r3, #8]
 800cf42:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	899b      	ldrh	r3, [r3, #12]
 800cf48:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	7d1b      	ldrb	r3, [r3, #20]
 800cf4e:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	8adb      	ldrh	r3, [r3, #22]
 800cf54:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	8b1b      	ldrh	r3, [r3, #24]
 800cf5a:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	60fb      	str	r3, [r7, #12]
   char* c = str;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7ff fb94 	bl	800c698 <_UG_FontSelect>

   rc=1;
 800cf70:	2301      	movs	r3, #1
 800cf72:	85bb      	strh	r3, [r7, #44]	@ 0x2c
   c=str;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800cf78:	4b80      	ldr	r3, [pc, #512]	@ (800d17c <_UG_PutText+0x284>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d107      	bne.n	800cf94 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 800cf84:	f107 0308 	add.w	r3, r7, #8
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f7ff f9c1 	bl	800c310 <_UG_DecodeUTF8>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800cf92:	e004      	b.n	800cf9e <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	1c5a      	adds	r2, r3, #1
 800cf98:	60ba      	str	r2, [r7, #8]
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 800cf9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d006      	beq.n	800cfb2 <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 800cfa4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cfa6:	2b0a      	cmp	r3, #10
 800cfa8:	d1e6      	bne.n	800cf78 <_UG_PutText+0x80>
 800cfaa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cfac:	3301      	adds	r3, #1
 800cfae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800cfb0:	e7e2      	b.n	800cf78 <_UG_PutText+0x80>
     if(!chr) break;
 800cfb2:	bf00      	nop
   }

   yp = 0;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	84fb      	strh	r3, [r7, #38]	@ 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 800cfb8:	7e7b      	ldrb	r3, [r7, #25]
 800cfba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d01f      	beq.n	800d002 <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 800cfc2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800cfc4:	8c3b      	ldrh	r3, [r7, #32]
 800cfc6:	1ad3      	subs	r3, r2, r3
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	3301      	adds	r3, #1
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_height*rc;
 800cfd0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800cfd2:	8bfb      	ldrh	r3, [r7, #30]
 800cfd4:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 800cfd6:	fb11 f303 	smulbb	r3, r1, r3
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	1ad3      	subs	r3, r2, r3
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_v_space*(rc-1);
 800cfe2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800cfe4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cfe6:	3b01      	subs	r3, #1
 800cfe8:	b299      	uxth	r1, r3
 800cfea:	8abb      	ldrh	r3, [r7, #20]
 800cfec:	fb11 f303 	smulbb	r3, r1, r3
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	1ad3      	subs	r3, r2, r3
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if ( yp < 0 ){
 800cff8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	f2c0 80b4 	blt.w	800d16a <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 800d002:	7e7b      	ldrb	r3, [r7, #25]
 800d004:	f003 0310 	and.w	r3, r3, #16
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d003      	beq.n	800d014 <_UG_PutText+0x11c>
 800d00c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800d010:	105b      	asrs	r3, r3, #1
 800d012:	84fb      	strh	r3, [r7, #38]	@ 0x26
   yp += ys;
 800d014:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d016:	8c3b      	ldrh	r3, [r7, #32]
 800d018:	4413      	add	r3, r2
 800d01a:	b29b      	uxth	r3, r3
 800d01c:	84fb      	strh	r3, [r7, #38]	@ 0x26

   while( 1 )
   {
      sl=0;
 800d01e:	2300      	movs	r3, #0
 800d020:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      c=str;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	60bb      	str	r3, [r7, #8]
      wl = 0;
 800d026:	2300      	movs	r3, #0
 800d028:	857b      	strh	r3, [r7, #42]	@ 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800d02a:	4b54      	ldr	r3, [pc, #336]	@ (800d17c <_UG_PutText+0x284>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d032:	2b00      	cmp	r3, #0
 800d034:	d107      	bne.n	800d046 <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 800d036:	f107 0308 	add.w	r3, r7, #8
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7ff f968 	bl	800c310 <_UG_DecodeUTF8>
 800d040:	4603      	mov	r3, r0
 800d042:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d044:	e004      	b.n	800d050 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	1c5a      	adds	r2, r3, #1
 800d04a:	60ba      	str	r2, [r7, #8]
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 800d050:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d052:	2b00      	cmp	r3, #0
 800d054:	d01b      	beq.n	800d08e <_UG_PutText+0x196>
 800d056:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d058:	2b0a      	cmp	r3, #10
 800d05a:	d018      	beq.n	800d08e <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 800d05c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d05e:	2100      	movs	r1, #0
 800d060:	4618      	mov	r0, r3
 800d062:	f7ff f9cd 	bl	800c400 <_UG_GetCharData>
 800d066:	4603      	mov	r3, r0
 800d068:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 800d06a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d072:	d00a      	beq.n	800d08a <_UG_PutText+0x192>
         sl++;
 800d074:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d076:	3301      	adds	r3, #1
 800d078:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         wl += w + char_h_space;
 800d07a:	8a7a      	ldrh	r2, [r7, #18]
 800d07c:	8afb      	ldrh	r3, [r7, #22]
 800d07e:	4413      	add	r3, r2
 800d080:	b29a      	uxth	r2, r3
 800d082:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d084:	4413      	add	r3, r2
 800d086:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800d088:	e7cf      	b.n	800d02a <_UG_PutText+0x132>
         if (w == -1){continue;}
 800d08a:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800d08c:	e7cd      	b.n	800d02a <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 800d08e:	8afb      	ldrh	r3, [r7, #22]
 800d090:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	857b      	strh	r3, [r7, #42]	@ 0x2a

      xp = xe - xs + 1;
 800d096:	8b7a      	ldrh	r2, [r7, #26]
 800d098:	8bbb      	ldrh	r3, [r7, #28]
 800d09a:	1ad3      	subs	r3, r2, r3
 800d09c:	b29b      	uxth	r3, r3
 800d09e:	3301      	adds	r3, #1
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp -= wl;
 800d0a4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d0a6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d0a8:	1ad3      	subs	r3, r2, r3
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	853b      	strh	r3, [r7, #40]	@ 0x28
      if ( xp < 0 ) break;
 800d0ae:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	db5b      	blt.n	800d16e <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 800d0b6:	7e7b      	ldrb	r3, [r7, #25]
 800d0b8:	f003 0301 	and.w	r3, r3, #1
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d002      	beq.n	800d0c6 <_UG_PutText+0x1ce>
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d0c4:	e008      	b.n	800d0d8 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 800d0c6:	7e7b      	ldrb	r3, [r7, #25]
 800d0c8:	f003 0302 	and.w	r3, r3, #2
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d003      	beq.n	800d0d8 <_UG_PutText+0x1e0>
 800d0d0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800d0d4:	105b      	asrs	r3, r3, #1
 800d0d6:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp += xs;
 800d0d8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d0da:	8bbb      	ldrh	r3, [r7, #28]
 800d0dc:	4413      	add	r3, r2
 800d0de:	b29b      	uxth	r3, r3
 800d0e0:	853b      	strh	r3, [r7, #40]	@ 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800d0e2:	4b26      	ldr	r3, [pc, #152]	@ (800d17c <_UG_PutText+0x284>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d107      	bne.n	800d0fe <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 800d0ee:	f107 030c 	add.w	r3, r7, #12
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7ff f90c 	bl	800c310 <_UG_DecodeUTF8>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d0fc:	e004      	b.n	800d108 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	1c5a      	adds	r2, r3, #1
 800d102:	60fa      	str	r2, [r7, #12]
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	84bb      	strh	r3, [r7, #36]	@ 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 800d108:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d031      	beq.n	800d172 <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 800d10e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d110:	2b0a      	cmp	r3, #10
 800d112:	d01c      	beq.n	800d14e <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	8a1c      	ldrh	r4, [r3, #16]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	8a5b      	ldrh	r3, [r3, #18]
 800d11c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800d120:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	@ 0x28
 800d124:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 800d126:	9300      	str	r3, [sp, #0]
 800d128:	4623      	mov	r3, r4
 800d12a:	f7ff fb37 	bl	800c79c <_UG_PutChar>
 800d12e:	4603      	mov	r3, r0
 800d130:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 800d132:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d13a:	d0d2      	beq.n	800d0e2 <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 800d13c:	8a7a      	ldrh	r2, [r7, #18]
 800d13e:	8afb      	ldrh	r3, [r7, #22]
 800d140:	4413      	add	r3, r2
 800d142:	b29a      	uxth	r2, r3
 800d144:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d146:	4413      	add	r3, r2
 800d148:	b29b      	uxth	r3, r3
 800d14a:	853b      	strh	r3, [r7, #40]	@ 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800d14c:	e7c9      	b.n	800d0e2 <_UG_PutText+0x1ea>
           break;
 800d14e:	bf00      	nop
      }
      yp += char_height + char_v_space;
 800d150:	8bfa      	ldrh	r2, [r7, #30]
 800d152:	8abb      	ldrh	r3, [r7, #20]
 800d154:	4413      	add	r3, r2
 800d156:	b29a      	uxth	r2, r3
 800d158:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d15a:	4413      	add	r3, r2
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      sl=0;
 800d160:	e75d      	b.n	800d01e <_UG_PutText+0x126>
     return;
 800d162:	bf00      	nop
 800d164:	e006      	b.n	800d174 <_UG_PutText+0x27c>
     return;
 800d166:	bf00      	nop
 800d168:	e004      	b.n	800d174 <_UG_PutText+0x27c>
        return;
 800d16a:	bf00      	nop
 800d16c:	e002      	b.n	800d174 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 800d16e:	bf00      	nop
 800d170:	e000      	b.n	800d174 <_UG_PutText+0x27c>
           return;
 800d172:	bf00      	nop
   }
}
 800d174:	3734      	adds	r7, #52	@ 0x34
 800d176:	46bd      	mov	sp, r7
 800d178:	bd90      	pop	{r4, r7, pc}
 800d17a:	bf00      	nop
 800d17c:	20001278 	.word	0x20001278

0800d180 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 800d180:	b5b0      	push	{r4, r5, r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af02      	add	r7, sp, #8
 800d186:	4604      	mov	r4, r0
 800d188:	4608      	mov	r0, r1
 800d18a:	4611      	mov	r1, r2
 800d18c:	461a      	mov	r2, r3
 800d18e:	4623      	mov	r3, r4
 800d190:	80fb      	strh	r3, [r7, #6]
 800d192:	4603      	mov	r3, r0
 800d194:	80bb      	strh	r3, [r7, #4]
 800d196:	460b      	mov	r3, r1
 800d198:	807b      	strh	r3, [r7, #2]
 800d19a:	4613      	mov	r3, r2
 800d19c:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 800d19e:	887b      	ldrh	r3, [r7, #2]
 800d1a0:	3b01      	subs	r3, #1
 800d1a2:	b29b      	uxth	r3, r3
 800d1a4:	b21c      	sxth	r4, r3
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	1c9a      	adds	r2, r3, #2
 800d1aa:	61ba      	str	r2, [r7, #24]
 800d1ac:	881b      	ldrh	r3, [r3, #0]
 800d1ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d1b2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d1b6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800d1ba:	9300      	str	r3, [sp, #0]
 800d1bc:	4613      	mov	r3, r2
 800d1be:	4622      	mov	r2, r4
 800d1c0:	f7fe fee2 	bl	800bf88 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 800d1c4:	88bb      	ldrh	r3, [r7, #4]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	b29b      	uxth	r3, r3
 800d1ca:	b219      	sxth	r1, r3
 800d1cc:	883b      	ldrh	r3, [r7, #0]
 800d1ce:	3b01      	subs	r3, #1
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	b21c      	sxth	r4, r3
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	1c9a      	adds	r2, r3, #2
 800d1d8:	61ba      	str	r2, [r7, #24]
 800d1da:	881b      	ldrh	r3, [r3, #0]
 800d1dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d1e0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800d1e4:	9300      	str	r3, [sp, #0]
 800d1e6:	4623      	mov	r3, r4
 800d1e8:	f7fe fece 	bl	800bf88 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	1c9a      	adds	r2, r3, #2
 800d1f0:	61ba      	str	r2, [r7, #24]
 800d1f2:	881b      	ldrh	r3, [r3, #0]
 800d1f4:	f9b7 4000 	ldrsh.w	r4, [r7]
 800d1f8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d1fc:	f9b7 1000 	ldrsh.w	r1, [r7]
 800d200:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800d204:	9300      	str	r3, [sp, #0]
 800d206:	4623      	mov	r3, r4
 800d208:	f7fe febe 	bl	800bf88 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 800d20c:	883b      	ldrh	r3, [r7, #0]
 800d20e:	3b01      	subs	r3, #1
 800d210:	b29b      	uxth	r3, r3
 800d212:	b21c      	sxth	r4, r3
 800d214:	69bb      	ldr	r3, [r7, #24]
 800d216:	1c9a      	adds	r2, r3, #2
 800d218:	61ba      	str	r2, [r7, #24]
 800d21a:	881b      	ldrh	r3, [r3, #0]
 800d21c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d220:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d224:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800d228:	9300      	str	r3, [sp, #0]
 800d22a:	4623      	mov	r3, r4
 800d22c:	f7fe feac 	bl	800bf88 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 800d230:	88fb      	ldrh	r3, [r7, #6]
 800d232:	3301      	adds	r3, #1
 800d234:	b29b      	uxth	r3, r3
 800d236:	b218      	sxth	r0, r3
 800d238:	88bb      	ldrh	r3, [r7, #4]
 800d23a:	3301      	adds	r3, #1
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	b219      	sxth	r1, r3
 800d240:	887b      	ldrh	r3, [r7, #2]
 800d242:	3b02      	subs	r3, #2
 800d244:	b29b      	uxth	r3, r3
 800d246:	b21c      	sxth	r4, r3
 800d248:	88bb      	ldrh	r3, [r7, #4]
 800d24a:	3301      	adds	r3, #1
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	b21d      	sxth	r5, r3
 800d250:	69bb      	ldr	r3, [r7, #24]
 800d252:	1c9a      	adds	r2, r3, #2
 800d254:	61ba      	str	r2, [r7, #24]
 800d256:	881b      	ldrh	r3, [r3, #0]
 800d258:	9300      	str	r3, [sp, #0]
 800d25a:	462b      	mov	r3, r5
 800d25c:	4622      	mov	r2, r4
 800d25e:	f7fe fe93 	bl	800bf88 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 800d262:	88fb      	ldrh	r3, [r7, #6]
 800d264:	3301      	adds	r3, #1
 800d266:	b29b      	uxth	r3, r3
 800d268:	b218      	sxth	r0, r3
 800d26a:	88bb      	ldrh	r3, [r7, #4]
 800d26c:	3302      	adds	r3, #2
 800d26e:	b29b      	uxth	r3, r3
 800d270:	b219      	sxth	r1, r3
 800d272:	88fb      	ldrh	r3, [r7, #6]
 800d274:	3301      	adds	r3, #1
 800d276:	b29b      	uxth	r3, r3
 800d278:	b21c      	sxth	r4, r3
 800d27a:	883b      	ldrh	r3, [r7, #0]
 800d27c:	3b02      	subs	r3, #2
 800d27e:	b29b      	uxth	r3, r3
 800d280:	b21d      	sxth	r5, r3
 800d282:	69bb      	ldr	r3, [r7, #24]
 800d284:	1c9a      	adds	r2, r3, #2
 800d286:	61ba      	str	r2, [r7, #24]
 800d288:	881b      	ldrh	r3, [r3, #0]
 800d28a:	9300      	str	r3, [sp, #0]
 800d28c:	462b      	mov	r3, r5
 800d28e:	4622      	mov	r2, r4
 800d290:	f7fe fe7a 	bl	800bf88 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 800d294:	88fb      	ldrh	r3, [r7, #6]
 800d296:	3301      	adds	r3, #1
 800d298:	b29b      	uxth	r3, r3
 800d29a:	b218      	sxth	r0, r3
 800d29c:	883b      	ldrh	r3, [r7, #0]
 800d29e:	3b01      	subs	r3, #1
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	b219      	sxth	r1, r3
 800d2a4:	887b      	ldrh	r3, [r7, #2]
 800d2a6:	3b01      	subs	r3, #1
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	b21c      	sxth	r4, r3
 800d2ac:	883b      	ldrh	r3, [r7, #0]
 800d2ae:	3b01      	subs	r3, #1
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	b21d      	sxth	r5, r3
 800d2b4:	69bb      	ldr	r3, [r7, #24]
 800d2b6:	1c9a      	adds	r2, r3, #2
 800d2b8:	61ba      	str	r2, [r7, #24]
 800d2ba:	881b      	ldrh	r3, [r3, #0]
 800d2bc:	9300      	str	r3, [sp, #0]
 800d2be:	462b      	mov	r3, r5
 800d2c0:	4622      	mov	r2, r4
 800d2c2:	f7fe fe61 	bl	800bf88 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 800d2c6:	887b      	ldrh	r3, [r7, #2]
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	b218      	sxth	r0, r3
 800d2ce:	88bb      	ldrh	r3, [r7, #4]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	b219      	sxth	r1, r3
 800d2d6:	887b      	ldrh	r3, [r7, #2]
 800d2d8:	3b01      	subs	r3, #1
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	b21c      	sxth	r4, r3
 800d2de:	883b      	ldrh	r3, [r7, #0]
 800d2e0:	3b02      	subs	r3, #2
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	b21d      	sxth	r5, r3
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	1c9a      	adds	r2, r3, #2
 800d2ea:	61ba      	str	r2, [r7, #24]
 800d2ec:	881b      	ldrh	r3, [r3, #0]
 800d2ee:	9300      	str	r3, [sp, #0]
 800d2f0:	462b      	mov	r3, r5
 800d2f2:	4622      	mov	r2, r4
 800d2f4:	f7fe fe48 	bl	800bf88 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 800d2f8:	88fb      	ldrh	r3, [r7, #6]
 800d2fa:	3302      	adds	r3, #2
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	b218      	sxth	r0, r3
 800d300:	88bb      	ldrh	r3, [r7, #4]
 800d302:	3302      	adds	r3, #2
 800d304:	b29b      	uxth	r3, r3
 800d306:	b219      	sxth	r1, r3
 800d308:	887b      	ldrh	r3, [r7, #2]
 800d30a:	3b03      	subs	r3, #3
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	b21c      	sxth	r4, r3
 800d310:	88bb      	ldrh	r3, [r7, #4]
 800d312:	3302      	adds	r3, #2
 800d314:	b29b      	uxth	r3, r3
 800d316:	b21d      	sxth	r5, r3
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	1c9a      	adds	r2, r3, #2
 800d31c:	61ba      	str	r2, [r7, #24]
 800d31e:	881b      	ldrh	r3, [r3, #0]
 800d320:	9300      	str	r3, [sp, #0]
 800d322:	462b      	mov	r3, r5
 800d324:	4622      	mov	r2, r4
 800d326:	f7fe fe2f 	bl	800bf88 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 800d32a:	88fb      	ldrh	r3, [r7, #6]
 800d32c:	3302      	adds	r3, #2
 800d32e:	b29b      	uxth	r3, r3
 800d330:	b218      	sxth	r0, r3
 800d332:	88bb      	ldrh	r3, [r7, #4]
 800d334:	3303      	adds	r3, #3
 800d336:	b29b      	uxth	r3, r3
 800d338:	b219      	sxth	r1, r3
 800d33a:	88fb      	ldrh	r3, [r7, #6]
 800d33c:	3302      	adds	r3, #2
 800d33e:	b29b      	uxth	r3, r3
 800d340:	b21c      	sxth	r4, r3
 800d342:	883b      	ldrh	r3, [r7, #0]
 800d344:	3b03      	subs	r3, #3
 800d346:	b29b      	uxth	r3, r3
 800d348:	b21d      	sxth	r5, r3
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	1c9a      	adds	r2, r3, #2
 800d34e:	61ba      	str	r2, [r7, #24]
 800d350:	881b      	ldrh	r3, [r3, #0]
 800d352:	9300      	str	r3, [sp, #0]
 800d354:	462b      	mov	r3, r5
 800d356:	4622      	mov	r2, r4
 800d358:	f7fe fe16 	bl	800bf88 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 800d35c:	88fb      	ldrh	r3, [r7, #6]
 800d35e:	3302      	adds	r3, #2
 800d360:	b29b      	uxth	r3, r3
 800d362:	b218      	sxth	r0, r3
 800d364:	883b      	ldrh	r3, [r7, #0]
 800d366:	3b02      	subs	r3, #2
 800d368:	b29b      	uxth	r3, r3
 800d36a:	b219      	sxth	r1, r3
 800d36c:	887b      	ldrh	r3, [r7, #2]
 800d36e:	3b02      	subs	r3, #2
 800d370:	b29b      	uxth	r3, r3
 800d372:	b21c      	sxth	r4, r3
 800d374:	883b      	ldrh	r3, [r7, #0]
 800d376:	3b02      	subs	r3, #2
 800d378:	b29b      	uxth	r3, r3
 800d37a:	b21d      	sxth	r5, r3
 800d37c:	69bb      	ldr	r3, [r7, #24]
 800d37e:	1c9a      	adds	r2, r3, #2
 800d380:	61ba      	str	r2, [r7, #24]
 800d382:	881b      	ldrh	r3, [r3, #0]
 800d384:	9300      	str	r3, [sp, #0]
 800d386:	462b      	mov	r3, r5
 800d388:	4622      	mov	r2, r4
 800d38a:	f7fe fdfd 	bl	800bf88 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 800d38e:	887b      	ldrh	r3, [r7, #2]
 800d390:	3b02      	subs	r3, #2
 800d392:	b29b      	uxth	r3, r3
 800d394:	b218      	sxth	r0, r3
 800d396:	88bb      	ldrh	r3, [r7, #4]
 800d398:	3302      	adds	r3, #2
 800d39a:	b29b      	uxth	r3, r3
 800d39c:	b219      	sxth	r1, r3
 800d39e:	887b      	ldrh	r3, [r7, #2]
 800d3a0:	3b02      	subs	r3, #2
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	b21a      	sxth	r2, r3
 800d3a6:	883b      	ldrh	r3, [r7, #0]
 800d3a8:	3b03      	subs	r3, #3
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	b21c      	sxth	r4, r3
 800d3ae:	69bb      	ldr	r3, [r7, #24]
 800d3b0:	881b      	ldrh	r3, [r3, #0]
 800d3b2:	9300      	str	r3, [sp, #0]
 800d3b4:	4623      	mov	r3, r4
 800d3b6:	f7fe fde7 	bl	800bf88 <UG_DrawLine>
}
 800d3ba:	bf00      	nop
 800d3bc:	3708      	adds	r7, #8
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d3c4 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	6039      	str	r1, [r7, #0]
 800d3ce:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 800d3d0:	79fb      	ldrb	r3, [r7, #7]
 800d3d2:	2b03      	cmp	r3, #3
 800d3d4:	d810      	bhi.n	800d3f8 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 800d3d6:	4b0b      	ldr	r3, [pc, #44]	@ (800d404 <UG_DriverRegister+0x40>)
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	79fb      	ldrb	r3, [r7, #7]
 800d3dc:	330a      	adds	r3, #10
 800d3de:	00db      	lsls	r3, r3, #3
 800d3e0:	4413      	add	r3, r2
 800d3e2:	683a      	ldr	r2, [r7, #0]
 800d3e4:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 800d3e6:	4b07      	ldr	r3, [pc, #28]	@ (800d404 <UG_DriverRegister+0x40>)
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	79fb      	ldrb	r3, [r7, #7]
 800d3ec:	330a      	adds	r3, #10
 800d3ee:	00db      	lsls	r3, r3, #3
 800d3f0:	4413      	add	r3, r2
 800d3f2:	2203      	movs	r2, #3
 800d3f4:	721a      	strb	r2, [r3, #8]
 800d3f6:	e000      	b.n	800d3fa <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 800d3f8:	bf00      	nop
}
 800d3fa:	370c      	adds	r7, #12
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr
 800d404:	20001278 	.word	0x20001278

0800d408 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 800d40e:	4b5e      	ldr	r3, [pc, #376]	@ (800d588 <UG_Update+0x180>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800d416:	f003 0301 	and.w	r3, r3, #1
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d00a      	beq.n	800d434 <UG_Update+0x2c>
 800d41e:	4b5a      	ldr	r3, [pc, #360]	@ (800d588 <UG_Update+0x180>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f893 2052 	ldrb.w	r2, [r3, #82]	@ 0x52
 800d426:	4b58      	ldr	r3, [pc, #352]	@ (800d588 <UG_Update+0x180>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f022 0201 	bic.w	r2, r2, #1
 800d42e:	b2d2      	uxtb	r2, r2
 800d430:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 800d434:	4b54      	ldr	r3, [pc, #336]	@ (800d588 <UG_Update+0x180>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	68da      	ldr	r2, [r3, #12]
 800d43a:	4b53      	ldr	r3, [pc, #332]	@ (800d588 <UG_Update+0x180>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	691b      	ldr	r3, [r3, #16]
 800d440:	429a      	cmp	r2, r3
 800d442:	d071      	beq.n	800d528 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 800d444:	4b50      	ldr	r3, [pc, #320]	@ (800d588 <UG_Update+0x180>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d06c      	beq.n	800d528 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 800d44e:	4b4e      	ldr	r3, [pc, #312]	@ (800d588 <UG_Update+0x180>)
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	4b4d      	ldr	r3, [pc, #308]	@ (800d588 <UG_Update+0x180>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	6912      	ldr	r2, [r2, #16]
 800d458:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 800d45a:	4b4b      	ldr	r3, [pc, #300]	@ (800d588 <UG_Update+0x180>)
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	4b4a      	ldr	r3, [pc, #296]	@ (800d588 <UG_Update+0x180>)
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	68d2      	ldr	r2, [r2, #12]
 800d464:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 800d466:	4b48      	ldr	r3, [pc, #288]	@ (800d588 <UG_Update+0x180>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	695b      	ldr	r3, [r3, #20]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d045      	beq.n	800d4fc <UG_Update+0xf4>
 800d470:	4b45      	ldr	r3, [pc, #276]	@ (800d588 <UG_Update+0x180>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	695b      	ldr	r3, [r3, #20]
 800d476:	7d9b      	ldrb	r3, [r3, #22]
 800d478:	f003 0302 	and.w	r3, r3, #2
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d03d      	beq.n	800d4fc <UG_Update+0xf4>
 800d480:	4b41      	ldr	r3, [pc, #260]	@ (800d588 <UG_Update+0x180>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	695b      	ldr	r3, [r3, #20]
 800d486:	7a1b      	ldrb	r3, [r3, #8]
 800d488:	f003 0308 	and.w	r3, r3, #8
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d035      	beq.n	800d4fc <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 800d490:	4b3d      	ldr	r3, [pc, #244]	@ (800d588 <UG_Update+0x180>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	695b      	ldr	r3, [r3, #20]
 800d496:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800d49a:	4b3b      	ldr	r3, [pc, #236]	@ (800d588 <UG_Update+0x180>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	691b      	ldr	r3, [r3, #16]
 800d4a0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d123      	bne.n	800d4f0 <UG_Update+0xe8>
 800d4a8:	4b37      	ldr	r3, [pc, #220]	@ (800d588 <UG_Update+0x180>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	695b      	ldr	r3, [r3, #20]
 800d4ae:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800d4b2:	4b35      	ldr	r3, [pc, #212]	@ (800d588 <UG_Update+0x180>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	691b      	ldr	r3, [r3, #16]
 800d4b8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d117      	bne.n	800d4f0 <UG_Update+0xe8>
 800d4c0:	4b31      	ldr	r3, [pc, #196]	@ (800d588 <UG_Update+0x180>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	695b      	ldr	r3, [r3, #20]
 800d4c6:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800d4ca:	4b2f      	ldr	r3, [pc, #188]	@ (800d588 <UG_Update+0x180>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	691b      	ldr	r3, [r3, #16]
 800d4d0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d10b      	bne.n	800d4f0 <UG_Update+0xe8>
 800d4d8:	4b2b      	ldr	r3, [pc, #172]	@ (800d588 <UG_Update+0x180>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	695b      	ldr	r3, [r3, #20]
 800d4de:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800d4e2:	4b29      	ldr	r3, [pc, #164]	@ (800d588 <UG_Update+0x180>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	691b      	ldr	r3, [r3, #16]
 800d4e8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d005      	beq.n	800d4fc <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 800d4f0:	4b25      	ldr	r3, [pc, #148]	@ (800d588 <UG_Update+0x180>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	695b      	ldr	r3, [r3, #20]
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f000 f96a 	bl	800d7d0 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 800d4fc:	4b22      	ldr	r3, [pc, #136]	@ (800d588 <UG_Update+0x180>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	691b      	ldr	r3, [r3, #16]
 800d502:	7a1a      	ldrb	r2, [r3, #8]
 800d504:	4b20      	ldr	r3, [pc, #128]	@ (800d588 <UG_Update+0x180>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	691b      	ldr	r3, [r3, #16]
 800d50a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d50e:	b2d2      	uxtb	r2, r2
 800d510:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 800d512:	4b1d      	ldr	r3, [pc, #116]	@ (800d588 <UG_Update+0x180>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	691b      	ldr	r3, [r3, #16]
 800d518:	7a1a      	ldrb	r2, [r3, #8]
 800d51a:	4b1b      	ldr	r3, [pc, #108]	@ (800d588 <UG_Update+0x180>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	691b      	ldr	r3, [r3, #16]
 800d520:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
 800d524:	b2d2      	uxtb	r2, r2
 800d526:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 800d528:	4b17      	ldr	r3, [pc, #92]	@ (800d588 <UG_Update+0x180>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	691b      	ldr	r3, [r3, #16]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d01b      	beq.n	800d56a <UG_Update+0x162>
   {
      wnd = gui->active_window;
 800d532:	4b15      	ldr	r3, [pc, #84]	@ (800d588 <UG_Update+0x180>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	691b      	ldr	r3, [r3, #16]
 800d538:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	7a1b      	ldrb	r3, [r3, #8]
 800d53e:	f003 0320 	and.w	r3, r3, #32
 800d542:	2b00      	cmp	r3, #0
 800d544:	d002      	beq.n	800d54c <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	f000 f9ea 	bl	800d920 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	7a1b      	ldrb	r3, [r3, #8]
 800d550:	f003 0308 	and.w	r3, r3, #8
 800d554:	2b00      	cmp	r3, #0
 800d556:	d008      	beq.n	800d56a <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f7ff fb81 	bl	800cc60 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f7ff fc34 	bl	800cdcc <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 800d564:	6878      	ldr	r0, [r7, #4]
 800d566:	f7ff fc7b 	bl	800ce60 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 800d56a:	4b07      	ldr	r3, [pc, #28]	@ (800d588 <UG_Update+0x180>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	689b      	ldr	r3, [r3, #8]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d004      	beq.n	800d580 <UG_Update+0x178>
     gui->device->flush();
 800d576:	4b04      	ldr	r3, [pc, #16]	@ (800d588 <UG_Update+0x180>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	689b      	ldr	r3, [r3, #8]
 800d57e:	4798      	blx	r3
   }
}
 800d580:	bf00      	nop
 800d582:	3708      	adds	r7, #8
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	20001278 	.word	0x20001278

0800d58c <UG_DrawBMP>:
   while ( (UG_U8)gui->state & UG_STATUS_WAIT_FOR_UPDATE ){};
   #endif    
}

void UG_DrawBMP( UG_S16 xp, UG_S16 yp, UG_BMP* bmp )
{
 800d58c:	b5b0      	push	{r4, r5, r7, lr}
 800d58e:	b08a      	sub	sp, #40	@ 0x28
 800d590:	af00      	add	r7, sp, #0
 800d592:	4603      	mov	r3, r0
 800d594:	603a      	str	r2, [r7, #0]
 800d596:	80fb      	strh	r3, [r7, #6]
 800d598:	460b      	mov	r3, r1
 800d59a:	80bb      	strh	r3, [r7, #4]
   UG_COLOR c;
   UG_S16 x,y;

   if ( bmp->p == NULL ) return;
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	f000 810e 	beq.w	800d7c2 <UG_DrawBMP+0x236>

   if ( bmp->bpp == BMP_BPP_1){
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	7a1b      	ldrb	r3, [r3, #8]
 800d5aa:	2b01      	cmp	r3, #1
 800d5ac:	d166      	bne.n	800d67c <UG_DrawBMP+0xf0>
     UG_U8 xx,yy,b;
     const UG_U8* p = (UG_U8*)bmp->p;         // This is untested !
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	613b      	str	r3, [r7, #16]
      for(y=0;y<bmp->height;y++)
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d5b8:	e059      	b.n	800d66e <UG_DrawBMP+0xe2>
      {
         for(x=0;x<bmp->width;x++)
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d5be:	e04a      	b.n	800d656 <UG_DrawBMP+0xca>
         {
            yy = y / 8 ;
 800d5c0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	da00      	bge.n	800d5ca <UG_DrawBMP+0x3e>
 800d5c8:	3307      	adds	r3, #7
 800d5ca:	10db      	asrs	r3, r3, #3
 800d5cc:	b21b      	sxth	r3, r3
 800d5ce:	73fb      	strb	r3, [r7, #15]
            xx = y % 8;
 800d5d0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d5d4:	425a      	negs	r2, r3
 800d5d6:	f003 0307 	and.w	r3, r3, #7
 800d5da:	f002 0207 	and.w	r2, r2, #7
 800d5de:	bf58      	it	pl
 800d5e0:	4253      	negpl	r3, r2
 800d5e2:	b21b      	sxth	r3, r3
 800d5e4:	73bb      	strb	r3, [r7, #14]
            b = p[x + yy * bmp->width];
 800d5e6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800d5ea:	7bfb      	ldrb	r3, [r7, #15]
 800d5ec:	6839      	ldr	r1, [r7, #0]
 800d5ee:	8889      	ldrh	r1, [r1, #4]
 800d5f0:	fb01 f303 	mul.w	r3, r1, r3
 800d5f4:	4413      	add	r3, r2
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	4413      	add	r3, r2
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	737b      	strb	r3, [r7, #13]
            xx = 1 << xx;
 800d600:	7bbb      	ldrb	r3, [r7, #14]
 800d602:	2201      	movs	r2, #1
 800d604:	fa02 f303 	lsl.w	r3, r2, r3
 800d608:	73bb      	strb	r3, [r7, #14]
            xx = xx & b;
 800d60a:	7bba      	ldrb	r2, [r7, #14]
 800d60c:	7b7b      	ldrb	r3, [r7, #13]
 800d60e:	4013      	ands	r3, r2
 800d610:	73bb      	strb	r3, [r7, #14]
            if(xx) c = gui->fore_color;
 800d612:	7bbb      	ldrb	r3, [r7, #14]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d005      	beq.n	800d624 <UG_DrawBMP+0x98>
 800d618:	4b6c      	ldr	r3, [pc, #432]	@ (800d7cc <UG_DrawBMP+0x240>)
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	@ 0x4c
 800d620:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d622:	e004      	b.n	800d62e <UG_DrawBMP+0xa2>
            else c = gui->back_color;
 800d624:	4b69      	ldr	r3, [pc, #420]	@ (800d7cc <UG_DrawBMP+0x240>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 800d62c:	84fb      	strh	r3, [r7, #38]	@ 0x26
            UG_DrawPixel( x + xp , y + yp , c );
 800d62e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d630:	88fb      	ldrh	r3, [r7, #6]
 800d632:	4413      	add	r3, r2
 800d634:	b29b      	uxth	r3, r3
 800d636:	b218      	sxth	r0, r3
 800d638:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d63a:	88bb      	ldrh	r3, [r7, #4]
 800d63c:	4413      	add	r3, r2
 800d63e:	b29b      	uxth	r3, r3
 800d640:	b21b      	sxth	r3, r3
 800d642:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d644:	4619      	mov	r1, r3
 800d646:	f7fe fc85 	bl	800bf54 <UG_DrawPixel>
         for(x=0;x<bmp->width;x++)
 800d64a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d64e:	b29b      	uxth	r3, r3
 800d650:	3301      	adds	r3, #1
 800d652:	b29b      	uxth	r3, r3
 800d654:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d656:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d65a:	683a      	ldr	r2, [r7, #0]
 800d65c:	8892      	ldrh	r2, [r2, #4]
 800d65e:	4293      	cmp	r3, r2
 800d660:	dbae      	blt.n	800d5c0 <UG_DrawBMP+0x34>
      for(y=0;y<bmp->height;y++)
 800d662:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d666:	b29b      	uxth	r3, r3
 800d668:	3301      	adds	r3, #1
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d66e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d672:	683a      	ldr	r2, [r7, #0]
 800d674:	88d2      	ldrh	r2, [r2, #6]
 800d676:	4293      	cmp	r3, r2
 800d678:	db9f      	blt.n	800d5ba <UG_DrawBMP+0x2e>
         }
      }
     return;
 800d67a:	e0a3      	b.n	800d7c4 <UG_DrawBMP+0x238>
   }
   #if defined UGUI_USE_COLOR_RGB888 || defined UGUI_USE_COLOR_RGB565
   else if ( bmp->bpp == BMP_BPP_16){
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	7a1b      	ldrb	r3, [r3, #8]
 800d680:	2b10      	cmp	r3, #16
 800d682:	f040 809f 	bne.w	800d7c4 <UG_DrawBMP+0x238>

     /* Is hardware acceleration available? */

      if ( gui->driver[DRIVER_DRAW_BMP].state & DRIVER_ENABLED)
 800d686:	4b51      	ldr	r3, [pc, #324]	@ (800d7cc <UG_DrawBMP+0x240>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
 800d68e:	f003 0302 	and.w	r3, r3, #2
 800d692:	2b00      	cmp	r3, #0
 800d694:	d00b      	beq.n	800d6ae <UG_DrawBMP+0x122>
      {
        ((void(*)(UG_S16, UG_S16, UG_BMP* bmp))gui->driver[DRIVER_DRAW_BMP].driver)(xp,yp, bmp);
 800d696:	4b4d      	ldr	r3, [pc, #308]	@ (800d7cc <UG_DrawBMP+0x240>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d69c:	461c      	mov	r4, r3
 800d69e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d6a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d6a6:	683a      	ldr	r2, [r7, #0]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	47a0      	blx	r4
        return;
 800d6ac:	e08a      	b.n	800d7c4 <UG_DrawBMP+0x238>
      }
      else if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED)
 800d6ae:	4b47      	ldr	r3, [pc, #284]	@ (800d7cc <UG_DrawBMP+0x240>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800d6b6:	f003 0302 	and.w	r3, r3, #2
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d04b      	beq.n	800d756 <UG_DrawBMP+0x1ca>
      {
         void(*push_pixels)(UG_U16, UG_COLOR) = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(xp,yp,xp+bmp->width-1,yp+bmp->height-1);
 800d6be:	4b43      	ldr	r3, [pc, #268]	@ (800d7cc <UG_DrawBMP+0x240>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d6c4:	461d      	mov	r5, r3
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	889a      	ldrh	r2, [r3, #4]
 800d6ca:	88fb      	ldrh	r3, [r7, #6]
 800d6cc:	4413      	add	r3, r2
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	3b01      	subs	r3, #1
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	b21c      	sxth	r4, r3
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	88da      	ldrh	r2, [r3, #6]
 800d6da:	88bb      	ldrh	r3, [r7, #4]
 800d6dc:	4413      	add	r3, r2
 800d6de:	b29b      	uxth	r3, r3
 800d6e0:	3b01      	subs	r3, #1
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	b21b      	sxth	r3, r3
 800d6e6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800d6ea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800d6ee:	4622      	mov	r2, r4
 800d6f0:	47a8      	blx	r5
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	617b      	str	r3, [r7, #20]
         UG_U16 *p = (UG_U16*)bmp->p;
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	61fb      	str	r3, [r7, #28]
         for(y=0;y<bmp->height;y++)
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d700:	e022      	b.n	800d748 <UG_DrawBMP+0x1bc>
         {
           for(x=0;x<bmp->width;x++)
 800d702:	2300      	movs	r3, #0
 800d704:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d706:	e00d      	b.n	800d724 <UG_DrawBMP+0x198>
           {
             #ifdef UGUI_USE_COLOR_RGB888
             push_pixels(1, _UG_ConvertRGB565ToRGB888(*p++)); /* Convert RGB565 to RGB888 */
             #elif defined UGUI_USE_COLOR_RGB565
             push_pixels(1, *p++);
 800d708:	69fb      	ldr	r3, [r7, #28]
 800d70a:	1c9a      	adds	r2, r3, #2
 800d70c:	61fa      	str	r2, [r7, #28]
 800d70e:	881a      	ldrh	r2, [r3, #0]
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	4611      	mov	r1, r2
 800d714:	2001      	movs	r0, #1
 800d716:	4798      	blx	r3
           for(x=0;x<bmp->width;x++)
 800d718:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	3301      	adds	r3, #1
 800d720:	b29b      	uxth	r3, r3
 800d722:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d724:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d728:	683a      	ldr	r2, [r7, #0]
 800d72a:	8892      	ldrh	r2, [r2, #4]
 800d72c:	4293      	cmp	r3, r2
 800d72e:	dbeb      	blt.n	800d708 <UG_DrawBMP+0x17c>
             #endif
           }
           yp++;
 800d730:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d734:	b29b      	uxth	r3, r3
 800d736:	3301      	adds	r3, #1
 800d738:	b29b      	uxth	r3, r3
 800d73a:	80bb      	strh	r3, [r7, #4]
         for(y=0;y<bmp->height;y++)
 800d73c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d740:	b29b      	uxth	r3, r3
 800d742:	3301      	adds	r3, #1
 800d744:	b29b      	uxth	r3, r3
 800d746:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d748:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d74c:	683a      	ldr	r2, [r7, #0]
 800d74e:	88d2      	ldrh	r2, [r2, #6]
 800d750:	4293      	cmp	r3, r2
 800d752:	dbd6      	blt.n	800d702 <UG_DrawBMP+0x176>
         }
         return;
 800d754:	e036      	b.n	800d7c4 <UG_DrawBMP+0x238>
      }

     UG_U16 *p = (UG_U16*)bmp->p;
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	61bb      	str	r3, [r7, #24]
     for(y=0;y<bmp->height;y++)
 800d75c:	2300      	movs	r3, #0
 800d75e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d760:	e028      	b.n	800d7b4 <UG_DrawBMP+0x228>
     {
        for(x=0;x<bmp->width;x++)
 800d762:	2300      	movs	r3, #0
 800d764:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d766:	e013      	b.n	800d790 <UG_DrawBMP+0x204>
        {
          #ifdef UGUI_USE_COLOR_RGB888
           UG_DrawPixel( xp+x , yp , _UG_ConvertRGB565ToRGB888(*p++) ); /* Convert RGB565 to RGB888 */
          #elif defined UGUI_USE_COLOR_RGB565
           UG_DrawPixel( xp+x , yp , *p++ );
 800d768:	88fa      	ldrh	r2, [r7, #6]
 800d76a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d76c:	4413      	add	r3, r2
 800d76e:	b29b      	uxth	r3, r3
 800d770:	b218      	sxth	r0, r3
 800d772:	69bb      	ldr	r3, [r7, #24]
 800d774:	1c9a      	adds	r2, r3, #2
 800d776:	61ba      	str	r2, [r7, #24]
 800d778:	881a      	ldrh	r2, [r3, #0]
 800d77a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d77e:	4619      	mov	r1, r3
 800d780:	f7fe fbe8 	bl	800bf54 <UG_DrawPixel>
        for(x=0;x<bmp->width;x++)
 800d784:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d788:	b29b      	uxth	r3, r3
 800d78a:	3301      	adds	r3, #1
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d790:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800d794:	683a      	ldr	r2, [r7, #0]
 800d796:	8892      	ldrh	r2, [r2, #4]
 800d798:	4293      	cmp	r3, r2
 800d79a:	dbe5      	blt.n	800d768 <UG_DrawBMP+0x1dc>
          #endif
        }
        yp++;
 800d79c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	80bb      	strh	r3, [r7, #4]
     for(y=0;y<bmp->height;y++)
 800d7a8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d7b4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800d7b8:	683a      	ldr	r2, [r7, #0]
 800d7ba:	88d2      	ldrh	r2, [r2, #6]
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	dbd0      	blt.n	800d762 <UG_DrawBMP+0x1d6>
 800d7c0:	e000      	b.n	800d7c4 <UG_DrawBMP+0x238>
   if ( bmp->p == NULL ) return;
 800d7c2:	bf00      	nop
     }
   }
   #endif
}
 800d7c4:	3728      	adds	r7, #40	@ 0x28
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bdb0      	pop	{r4, r5, r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	20001278 	.word	0x20001278

0800d7d0 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 800d7d0:	b590      	push	{r4, r7, lr}
 800d7d2:	b08f      	sub	sp, #60	@ 0x3c
 800d7d4:	af02      	add	r7, sp, #8
 800d7d6:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	f000 8098 	beq.w	800d910 <_UG_WindowDrawTitle+0x140>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	7a1b      	ldrb	r3, [r3, #8]
 800d7e4:	f003 0302 	and.w	r3, r3, #2
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	f000 8091 	beq.w	800d910 <_UG_WindowDrawTitle+0x140>
   {
      xs = wnd->xs;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	89db      	ldrh	r3, [r3, #14]
 800d7f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      ys = wnd->ys;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	8a1b      	ldrh	r3, [r3, #16]
 800d7f8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      xe = wnd->xe;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	8a5b      	ldrh	r3, [r3, #18]
 800d7fe:	857b      	strh	r3, [r7, #42]	@ 0x2a
      ye = wnd->ye;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	8a9b      	ldrh	r3, [r3, #20]
 800d804:	853b      	strh	r3, [r7, #40]	@ 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	7d9b      	ldrb	r3, [r3, #22]
 800d80a:	f003 0301 	and.w	r3, r3, #1
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d00f      	beq.n	800d832 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 800d812:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d814:	3303      	adds	r3, #3
 800d816:	b29b      	uxth	r3, r3
 800d818:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         ys+=3;
 800d81a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d81c:	3303      	adds	r3, #3
 800d81e:	b29b      	uxth	r3, r3
 800d820:	85bb      	strh	r3, [r7, #44]	@ 0x2c
         xe-=3;
 800d822:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d824:	3b03      	subs	r3, #3
 800d826:	b29b      	uxth	r3, r3
 800d828:	857b      	strh	r3, [r7, #42]	@ 0x2a
         ye-=3;
 800d82a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d82c:	3b03      	subs	r3, #3
 800d82e:	b29b      	uxth	r3, r3
 800d830:	853b      	strh	r3, [r7, #40]	@ 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 800d832:	4b3a      	ldr	r3, [pc, #232]	@ (800d91c <_UG_WindowDrawTitle+0x14c>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	691b      	ldr	r3, [r3, #16]
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d106      	bne.n	800d84c <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d842:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d848:	83bb      	strh	r3, [r7, #28]
 800d84a:	e005      	b.n	800d858 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d850:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d856:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d85e:	461a      	mov	r2, r3
 800d860:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d862:	4413      	add	r3, r2
 800d864:	b29b      	uxth	r3, r3
 800d866:	3b01      	subs	r3, #1
 800d868:	b29b      	uxth	r3, r3
 800d86a:	b21c      	sxth	r4, r3
 800d86c:	8bfb      	ldrh	r3, [r7, #30]
 800d86e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800d872:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 800d876:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800d87a:	9300      	str	r3, [sp, #0]
 800d87c:	4623      	mov	r3, r4
 800d87e:	f7fe faaf 	bl	800bde0 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	699b      	ldr	r3, [r3, #24]
 800d886:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	69db      	ldr	r3, [r3, #28]
 800d88c:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 800d88e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d890:	3303      	adds	r3, #3
 800d892:	b29b      	uxth	r3, r3
 800d894:	b21b      	sxth	r3, r3
 800d896:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 800d898:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d89a:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 800d89c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d89e:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d8aa:	4413      	add	r3, r2
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	3b01      	subs	r3, #1
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	b21b      	sxth	r3, r3
 800d8b4:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800d8bc:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800d8c6:	847b      	strh	r3, [r7, #34]	@ 0x22
      txt.v_space = wnd->title.v_space;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 800d8ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
      _UG_PutText( &txt );
 800d8d0:	f107 030c 	add.w	r3, r7, #12
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7ff fb0f 	bl	800cef8 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d8e4:	4413      	add	r3, r2
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	b219      	sxth	r1, r3
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d8f4:	4413      	add	r3, r2
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	b21b      	sxth	r3, r3
 800d8fa:	f649 5413 	movw	r4, #40211	@ 0x9d13
 800d8fe:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800d902:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800d906:	9400      	str	r4, [sp, #0]
 800d908:	f7fe fb3e 	bl	800bf88 <UG_DrawLine>
      return UG_RESULT_OK;
 800d90c:	2300      	movs	r3, #0
 800d90e:	e001      	b.n	800d914 <_UG_WindowDrawTitle+0x144>
   }
   return UG_RESULT_FAIL;
 800d910:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d914:	4618      	mov	r0, r3
 800d916:	3734      	adds	r7, #52	@ 0x34
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd90      	pop	{r4, r7, pc}
 800d91c:	20001278 	.word	0x20001278

0800d920 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 800d920:	b590      	push	{r4, r7, lr}
 800d922:	b089      	sub	sp, #36	@ 0x24
 800d924:	af02      	add	r7, sp, #8
 800d926:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	89db      	ldrh	r3, [r3, #14]
 800d92c:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	8a1b      	ldrh	r3, [r3, #16]
 800d932:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	8a5b      	ldrh	r3, [r3, #18]
 800d938:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	8a9b      	ldrh	r3, [r3, #20]
 800d93e:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	7a1b      	ldrb	r3, [r3, #8]
 800d944:	f023 0320 	bic.w	r3, r3, #32
 800d948:	b2da      	uxtb	r2, r3
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	7a1b      	ldrb	r3, [r3, #8]
 800d952:	f003 0308 	and.w	r3, r3, #8
 800d956:	2b00      	cmp	r3, #0
 800d958:	f000 8084 	beq.w	800da64 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	7d9b      	ldrb	r3, [r3, #22]
 800d960:	f003 0301 	and.w	r3, r3, #1
 800d964:	2b00      	cmp	r3, #0
 800d966:	d021      	beq.n	800d9ac <_UG_WindowUpdate+0x8c>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	7a1b      	ldrb	r3, [r3, #8]
 800d96c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d970:	2b00      	cmp	r3, #0
 800d972:	d11b      	bne.n	800d9ac <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 800d974:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d978:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800d97c:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800d980:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 800d984:	4c43      	ldr	r4, [pc, #268]	@ (800da94 <_UG_WindowUpdate+0x174>)
 800d986:	9400      	str	r4, [sp, #0]
 800d988:	f7ff fbfa 	bl	800d180 <_UG_DrawObjectFrame>
         xs+=3;
 800d98c:	8abb      	ldrh	r3, [r7, #20]
 800d98e:	3303      	adds	r3, #3
 800d990:	b29b      	uxth	r3, r3
 800d992:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 800d994:	8a7b      	ldrh	r3, [r7, #18]
 800d996:	3303      	adds	r3, #3
 800d998:	b29b      	uxth	r3, r3
 800d99a:	827b      	strh	r3, [r7, #18]
         xe-=3;
 800d99c:	8a3b      	ldrh	r3, [r7, #16]
 800d99e:	3b03      	subs	r3, #3
 800d9a0:	b29b      	uxth	r3, r3
 800d9a2:	823b      	strh	r3, [r7, #16]
         ye-=3;
 800d9a4:	89fb      	ldrh	r3, [r7, #14]
 800d9a6:	3b03      	subs	r3, #3
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	7d9b      	ldrb	r3, [r3, #22]
 800d9b0:	f003 0302 	and.w	r3, r3, #2
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d01a      	beq.n	800d9ee <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f7ff ff09 	bl	800d7d0 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	8a7b      	ldrh	r3, [r7, #18]
 800d9c8:	4413      	add	r3, r2
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	7a1b      	ldrb	r3, [r3, #8]
 800d9d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d007      	beq.n	800d9ee <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	7a1b      	ldrb	r3, [r3, #8]
 800d9e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d9e6:	b2da      	uxtb	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	721a      	strb	r2, [r3, #8]
            return;
 800d9ec:	e04e      	b.n	800da8c <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	899b      	ldrh	r3, [r3, #12]
 800d9f2:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800d9f6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800d9fa:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800d9fe:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 800da02:	9300      	str	r3, [sp, #0]
 800da04:	4623      	mov	r3, r4
 800da06:	f7fe f9eb 	bl	800bde0 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 800da10:	2300      	movs	r3, #0
 800da12:	82fb      	strh	r3, [r7, #22]
 800da14:	e021      	b.n	800da5a <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	685a      	ldr	r2, [r3, #4]
 800da1a:	8afb      	ldrh	r3, [r7, #22]
 800da1c:	015b      	lsls	r3, r3, #5
 800da1e:	4413      	add	r3, r2
 800da20:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	f003 0301 	and.w	r3, r3, #1
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d112      	bne.n	800da54 <_UG_WindowUpdate+0x134>
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	f003 0302 	and.w	r3, r3, #2
 800da36:	2b00      	cmp	r3, #0
 800da38:	d00c      	beq.n	800da54 <_UG_WindowUpdate+0x134>
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	f003 0308 	and.w	r3, r3, #8
 800da42:	2b00      	cmp	r3, #0
 800da44:	d006      	beq.n	800da54 <_UG_WindowUpdate+0x134>
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800da4e:	b2da      	uxtb	r2, r3
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 800da54:	8afb      	ldrh	r3, [r7, #22]
 800da56:	3301      	adds	r3, #1
 800da58:	82fb      	strh	r3, [r7, #22]
 800da5a:	8afa      	ldrh	r2, [r7, #22]
 800da5c:	89bb      	ldrh	r3, [r7, #12]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d3d9      	bcc.n	800da16 <_UG_WindowUpdate+0xf6>
 800da62:	e013      	b.n	800da8c <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 800da7c:	4b06      	ldr	r3, [pc, #24]	@ (800da98 <_UG_WindowUpdate+0x178>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da84:	9300      	str	r3, [sp, #0]
 800da86:	4623      	mov	r3, r4
 800da88:	f7fe f9aa 	bl	800bde0 <UG_FillFrame>
   }
}
 800da8c:	371c      	adds	r7, #28
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd90      	pop	{r4, r7, pc}
 800da92:	bf00      	nop
 800da94:	08015080 	.word	0x08015080
 800da98:	20001278 	.word	0x20001278

0800da9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	460b      	mov	r3, r1
 800daa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800daa8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800daac:	f002 fc88 	bl	80103c0 <USBD_static_malloc>
 800dab0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d109      	bne.n	800dacc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	32b0      	adds	r2, #176	@ 0xb0
 800dac2:	2100      	movs	r1, #0
 800dac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800dac8:	2302      	movs	r3, #2
 800daca:	e0d4      	b.n	800dc76 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800dacc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800dad0:	2100      	movs	r1, #0
 800dad2:	68f8      	ldr	r0, [r7, #12]
 800dad4:	f003 fb28 	bl	8011128 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	32b0      	adds	r2, #176	@ 0xb0
 800dae2:	68f9      	ldr	r1, [r7, #12]
 800dae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	32b0      	adds	r2, #176	@ 0xb0
 800daf2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	7c1b      	ldrb	r3, [r3, #16]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d138      	bne.n	800db76 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800db04:	4b5e      	ldr	r3, [pc, #376]	@ (800dc80 <USBD_CDC_Init+0x1e4>)
 800db06:	7819      	ldrb	r1, [r3, #0]
 800db08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db0c:	2202      	movs	r2, #2
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f002 fb33 	bl	801017a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800db14:	4b5a      	ldr	r3, [pc, #360]	@ (800dc80 <USBD_CDC_Init+0x1e4>)
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	f003 020f 	and.w	r2, r3, #15
 800db1c:	6879      	ldr	r1, [r7, #4]
 800db1e:	4613      	mov	r3, r2
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	4413      	add	r3, r2
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	440b      	add	r3, r1
 800db28:	3324      	adds	r3, #36	@ 0x24
 800db2a:	2201      	movs	r2, #1
 800db2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800db2e:	4b55      	ldr	r3, [pc, #340]	@ (800dc84 <USBD_CDC_Init+0x1e8>)
 800db30:	7819      	ldrb	r1, [r3, #0]
 800db32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db36:	2202      	movs	r2, #2
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f002 fb1e 	bl	801017a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800db3e:	4b51      	ldr	r3, [pc, #324]	@ (800dc84 <USBD_CDC_Init+0x1e8>)
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	f003 020f 	and.w	r2, r3, #15
 800db46:	6879      	ldr	r1, [r7, #4]
 800db48:	4613      	mov	r3, r2
 800db4a:	009b      	lsls	r3, r3, #2
 800db4c:	4413      	add	r3, r2
 800db4e:	009b      	lsls	r3, r3, #2
 800db50:	440b      	add	r3, r1
 800db52:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800db56:	2201      	movs	r2, #1
 800db58:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800db5a:	4b4b      	ldr	r3, [pc, #300]	@ (800dc88 <USBD_CDC_Init+0x1ec>)
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	f003 020f 	and.w	r2, r3, #15
 800db62:	6879      	ldr	r1, [r7, #4]
 800db64:	4613      	mov	r3, r2
 800db66:	009b      	lsls	r3, r3, #2
 800db68:	4413      	add	r3, r2
 800db6a:	009b      	lsls	r3, r3, #2
 800db6c:	440b      	add	r3, r1
 800db6e:	3326      	adds	r3, #38	@ 0x26
 800db70:	2210      	movs	r2, #16
 800db72:	801a      	strh	r2, [r3, #0]
 800db74:	e035      	b.n	800dbe2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800db76:	4b42      	ldr	r3, [pc, #264]	@ (800dc80 <USBD_CDC_Init+0x1e4>)
 800db78:	7819      	ldrb	r1, [r3, #0]
 800db7a:	2340      	movs	r3, #64	@ 0x40
 800db7c:	2202      	movs	r2, #2
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f002 fafb 	bl	801017a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800db84:	4b3e      	ldr	r3, [pc, #248]	@ (800dc80 <USBD_CDC_Init+0x1e4>)
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	f003 020f 	and.w	r2, r3, #15
 800db8c:	6879      	ldr	r1, [r7, #4]
 800db8e:	4613      	mov	r3, r2
 800db90:	009b      	lsls	r3, r3, #2
 800db92:	4413      	add	r3, r2
 800db94:	009b      	lsls	r3, r3, #2
 800db96:	440b      	add	r3, r1
 800db98:	3324      	adds	r3, #36	@ 0x24
 800db9a:	2201      	movs	r2, #1
 800db9c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800db9e:	4b39      	ldr	r3, [pc, #228]	@ (800dc84 <USBD_CDC_Init+0x1e8>)
 800dba0:	7819      	ldrb	r1, [r3, #0]
 800dba2:	2340      	movs	r3, #64	@ 0x40
 800dba4:	2202      	movs	r2, #2
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f002 fae7 	bl	801017a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dbac:	4b35      	ldr	r3, [pc, #212]	@ (800dc84 <USBD_CDC_Init+0x1e8>)
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	f003 020f 	and.w	r2, r3, #15
 800dbb4:	6879      	ldr	r1, [r7, #4]
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	4413      	add	r3, r2
 800dbbc:	009b      	lsls	r3, r3, #2
 800dbbe:	440b      	add	r3, r1
 800dbc0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dbc8:	4b2f      	ldr	r3, [pc, #188]	@ (800dc88 <USBD_CDC_Init+0x1ec>)
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	f003 020f 	and.w	r2, r3, #15
 800dbd0:	6879      	ldr	r1, [r7, #4]
 800dbd2:	4613      	mov	r3, r2
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	4413      	add	r3, r2
 800dbd8:	009b      	lsls	r3, r3, #2
 800dbda:	440b      	add	r3, r1
 800dbdc:	3326      	adds	r3, #38	@ 0x26
 800dbde:	2210      	movs	r2, #16
 800dbe0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dbe2:	4b29      	ldr	r3, [pc, #164]	@ (800dc88 <USBD_CDC_Init+0x1ec>)
 800dbe4:	7819      	ldrb	r1, [r3, #0]
 800dbe6:	2308      	movs	r3, #8
 800dbe8:	2203      	movs	r2, #3
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f002 fac5 	bl	801017a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800dbf0:	4b25      	ldr	r3, [pc, #148]	@ (800dc88 <USBD_CDC_Init+0x1ec>)
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	f003 020f 	and.w	r2, r3, #15
 800dbf8:	6879      	ldr	r1, [r7, #4]
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	4413      	add	r3, r2
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	440b      	add	r3, r1
 800dc04:	3324      	adds	r3, #36	@ 0x24
 800dc06:	2201      	movs	r2, #1
 800dc08:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dc18:	687a      	ldr	r2, [r7, #4]
 800dc1a:	33b0      	adds	r3, #176	@ 0xb0
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	4413      	add	r3, r2
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	2200      	movs	r2, #0
 800dc32:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d101      	bne.n	800dc44 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800dc40:	2302      	movs	r3, #2
 800dc42:	e018      	b.n	800dc76 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	7c1b      	ldrb	r3, [r3, #16]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d10a      	bne.n	800dc62 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dc4c:	4b0d      	ldr	r3, [pc, #52]	@ (800dc84 <USBD_CDC_Init+0x1e8>)
 800dc4e:	7819      	ldrb	r1, [r3, #0]
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dc56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f002 fb7c 	bl	8010358 <USBD_LL_PrepareReceive>
 800dc60:	e008      	b.n	800dc74 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dc62:	4b08      	ldr	r3, [pc, #32]	@ (800dc84 <USBD_CDC_Init+0x1e8>)
 800dc64:	7819      	ldrb	r1, [r3, #0]
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dc6c:	2340      	movs	r3, #64	@ 0x40
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f002 fb72 	bl	8010358 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dc74:	2300      	movs	r3, #0
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3710      	adds	r7, #16
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	200000ef 	.word	0x200000ef
 800dc84:	200000f0 	.word	0x200000f0
 800dc88:	200000f1 	.word	0x200000f1

0800dc8c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b082      	sub	sp, #8
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	460b      	mov	r3, r1
 800dc96:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800dc98:	4b3a      	ldr	r3, [pc, #232]	@ (800dd84 <USBD_CDC_DeInit+0xf8>)
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f002 fa91 	bl	80101c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800dca4:	4b37      	ldr	r3, [pc, #220]	@ (800dd84 <USBD_CDC_DeInit+0xf8>)
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	f003 020f 	and.w	r2, r3, #15
 800dcac:	6879      	ldr	r1, [r7, #4]
 800dcae:	4613      	mov	r3, r2
 800dcb0:	009b      	lsls	r3, r3, #2
 800dcb2:	4413      	add	r3, r2
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	440b      	add	r3, r1
 800dcb8:	3324      	adds	r3, #36	@ 0x24
 800dcba:	2200      	movs	r2, #0
 800dcbc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800dcbe:	4b32      	ldr	r3, [pc, #200]	@ (800dd88 <USBD_CDC_DeInit+0xfc>)
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f002 fa7e 	bl	80101c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800dcca:	4b2f      	ldr	r3, [pc, #188]	@ (800dd88 <USBD_CDC_DeInit+0xfc>)
 800dccc:	781b      	ldrb	r3, [r3, #0]
 800dcce:	f003 020f 	and.w	r2, r3, #15
 800dcd2:	6879      	ldr	r1, [r7, #4]
 800dcd4:	4613      	mov	r3, r2
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	4413      	add	r3, r2
 800dcda:	009b      	lsls	r3, r3, #2
 800dcdc:	440b      	add	r3, r1
 800dcde:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dce2:	2200      	movs	r2, #0
 800dce4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800dce6:	4b29      	ldr	r3, [pc, #164]	@ (800dd8c <USBD_CDC_DeInit+0x100>)
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	4619      	mov	r1, r3
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f002 fa6a 	bl	80101c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800dcf2:	4b26      	ldr	r3, [pc, #152]	@ (800dd8c <USBD_CDC_DeInit+0x100>)
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	f003 020f 	and.w	r2, r3, #15
 800dcfa:	6879      	ldr	r1, [r7, #4]
 800dcfc:	4613      	mov	r3, r2
 800dcfe:	009b      	lsls	r3, r3, #2
 800dd00:	4413      	add	r3, r2
 800dd02:	009b      	lsls	r3, r3, #2
 800dd04:	440b      	add	r3, r1
 800dd06:	3324      	adds	r3, #36	@ 0x24
 800dd08:	2200      	movs	r2, #0
 800dd0a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800dd0c:	4b1f      	ldr	r3, [pc, #124]	@ (800dd8c <USBD_CDC_DeInit+0x100>)
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	f003 020f 	and.w	r2, r3, #15
 800dd14:	6879      	ldr	r1, [r7, #4]
 800dd16:	4613      	mov	r3, r2
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	4413      	add	r3, r2
 800dd1c:	009b      	lsls	r3, r3, #2
 800dd1e:	440b      	add	r3, r1
 800dd20:	3326      	adds	r3, #38	@ 0x26
 800dd22:	2200      	movs	r2, #0
 800dd24:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	32b0      	adds	r2, #176	@ 0xb0
 800dd30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d01f      	beq.n	800dd78 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd3e:	687a      	ldr	r2, [r7, #4]
 800dd40:	33b0      	adds	r3, #176	@ 0xb0
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	4413      	add	r3, r2
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	32b0      	adds	r2, #176	@ 0xb0
 800dd56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f002 fb3e 	bl	80103dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	32b0      	adds	r2, #176	@ 0xb0
 800dd6a:	2100      	movs	r1, #0
 800dd6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2200      	movs	r2, #0
 800dd74:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800dd78:	2300      	movs	r3, #0
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3708      	adds	r7, #8
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	200000ef 	.word	0x200000ef
 800dd88:	200000f0 	.word	0x200000f0
 800dd8c:	200000f1 	.word	0x200000f1

0800dd90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b086      	sub	sp, #24
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	32b0      	adds	r2, #176	@ 0xb0
 800dda4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dda8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d101      	bne.n	800ddc0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ddbc:	2303      	movs	r3, #3
 800ddbe:	e0bf      	b.n	800df40 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d050      	beq.n	800de6e <USBD_CDC_Setup+0xde>
 800ddcc:	2b20      	cmp	r3, #32
 800ddce:	f040 80af 	bne.w	800df30 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	88db      	ldrh	r3, [r3, #6]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d03a      	beq.n	800de50 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	b25b      	sxtb	r3, r3
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	da1b      	bge.n	800de1c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ddea:	687a      	ldr	r2, [r7, #4]
 800ddec:	33b0      	adds	r3, #176	@ 0xb0
 800ddee:	009b      	lsls	r3, r3, #2
 800ddf0:	4413      	add	r3, r2
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	689b      	ldr	r3, [r3, #8]
 800ddf6:	683a      	ldr	r2, [r7, #0]
 800ddf8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ddfa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ddfc:	683a      	ldr	r2, [r7, #0]
 800ddfe:	88d2      	ldrh	r2, [r2, #6]
 800de00:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	88db      	ldrh	r3, [r3, #6]
 800de06:	2b07      	cmp	r3, #7
 800de08:	bf28      	it	cs
 800de0a:	2307      	movcs	r3, #7
 800de0c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	89fa      	ldrh	r2, [r7, #14]
 800de12:	4619      	mov	r1, r3
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f001 fd87 	bl	800f928 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800de1a:	e090      	b.n	800df3e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	785a      	ldrb	r2, [r3, #1]
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	88db      	ldrh	r3, [r3, #6]
 800de2a:	2b3f      	cmp	r3, #63	@ 0x3f
 800de2c:	d803      	bhi.n	800de36 <USBD_CDC_Setup+0xa6>
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	88db      	ldrh	r3, [r3, #6]
 800de32:	b2da      	uxtb	r2, r3
 800de34:	e000      	b.n	800de38 <USBD_CDC_Setup+0xa8>
 800de36:	2240      	movs	r2, #64	@ 0x40
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800de3e:	6939      	ldr	r1, [r7, #16]
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800de46:	461a      	mov	r2, r3
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f001 fd99 	bl	800f980 <USBD_CtlPrepareRx>
      break;
 800de4e:	e076      	b.n	800df3e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800de56:	687a      	ldr	r2, [r7, #4]
 800de58:	33b0      	adds	r3, #176	@ 0xb0
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	4413      	add	r3, r2
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	689b      	ldr	r3, [r3, #8]
 800de62:	683a      	ldr	r2, [r7, #0]
 800de64:	7850      	ldrb	r0, [r2, #1]
 800de66:	2200      	movs	r2, #0
 800de68:	6839      	ldr	r1, [r7, #0]
 800de6a:	4798      	blx	r3
      break;
 800de6c:	e067      	b.n	800df3e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	785b      	ldrb	r3, [r3, #1]
 800de72:	2b0b      	cmp	r3, #11
 800de74:	d851      	bhi.n	800df1a <USBD_CDC_Setup+0x18a>
 800de76:	a201      	add	r2, pc, #4	@ (adr r2, 800de7c <USBD_CDC_Setup+0xec>)
 800de78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de7c:	0800dead 	.word	0x0800dead
 800de80:	0800df29 	.word	0x0800df29
 800de84:	0800df1b 	.word	0x0800df1b
 800de88:	0800df1b 	.word	0x0800df1b
 800de8c:	0800df1b 	.word	0x0800df1b
 800de90:	0800df1b 	.word	0x0800df1b
 800de94:	0800df1b 	.word	0x0800df1b
 800de98:	0800df1b 	.word	0x0800df1b
 800de9c:	0800df1b 	.word	0x0800df1b
 800dea0:	0800df1b 	.word	0x0800df1b
 800dea4:	0800ded7 	.word	0x0800ded7
 800dea8:	0800df01 	.word	0x0800df01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	2b03      	cmp	r3, #3
 800deb6:	d107      	bne.n	800dec8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800deb8:	f107 030a 	add.w	r3, r7, #10
 800debc:	2202      	movs	r2, #2
 800debe:	4619      	mov	r1, r3
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f001 fd31 	bl	800f928 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dec6:	e032      	b.n	800df2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800dec8:	6839      	ldr	r1, [r7, #0]
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f001 fcbb 	bl	800f846 <USBD_CtlError>
            ret = USBD_FAIL;
 800ded0:	2303      	movs	r3, #3
 800ded2:	75fb      	strb	r3, [r7, #23]
          break;
 800ded4:	e02b      	b.n	800df2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	2b03      	cmp	r3, #3
 800dee0:	d107      	bne.n	800def2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800dee2:	f107 030d 	add.w	r3, r7, #13
 800dee6:	2201      	movs	r2, #1
 800dee8:	4619      	mov	r1, r3
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f001 fd1c 	bl	800f928 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800def0:	e01d      	b.n	800df2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800def2:	6839      	ldr	r1, [r7, #0]
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f001 fca6 	bl	800f846 <USBD_CtlError>
            ret = USBD_FAIL;
 800defa:	2303      	movs	r3, #3
 800defc:	75fb      	strb	r3, [r7, #23]
          break;
 800defe:	e016      	b.n	800df2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df06:	b2db      	uxtb	r3, r3
 800df08:	2b03      	cmp	r3, #3
 800df0a:	d00f      	beq.n	800df2c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800df0c:	6839      	ldr	r1, [r7, #0]
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f001 fc99 	bl	800f846 <USBD_CtlError>
            ret = USBD_FAIL;
 800df14:	2303      	movs	r3, #3
 800df16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800df18:	e008      	b.n	800df2c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800df1a:	6839      	ldr	r1, [r7, #0]
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f001 fc92 	bl	800f846 <USBD_CtlError>
          ret = USBD_FAIL;
 800df22:	2303      	movs	r3, #3
 800df24:	75fb      	strb	r3, [r7, #23]
          break;
 800df26:	e002      	b.n	800df2e <USBD_CDC_Setup+0x19e>
          break;
 800df28:	bf00      	nop
 800df2a:	e008      	b.n	800df3e <USBD_CDC_Setup+0x1ae>
          break;
 800df2c:	bf00      	nop
      }
      break;
 800df2e:	e006      	b.n	800df3e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800df30:	6839      	ldr	r1, [r7, #0]
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f001 fc87 	bl	800f846 <USBD_CtlError>
      ret = USBD_FAIL;
 800df38:	2303      	movs	r3, #3
 800df3a:	75fb      	strb	r3, [r7, #23]
      break;
 800df3c:	bf00      	nop
  }

  return (uint8_t)ret;
 800df3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800df40:	4618      	mov	r0, r3
 800df42:	3718      	adds	r7, #24
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b084      	sub	sp, #16
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	460b      	mov	r3, r1
 800df52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	32b0      	adds	r2, #176	@ 0xb0
 800df66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d101      	bne.n	800df72 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800df6e:	2303      	movs	r3, #3
 800df70:	e065      	b.n	800e03e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	32b0      	adds	r2, #176	@ 0xb0
 800df7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df80:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800df82:	78fb      	ldrb	r3, [r7, #3]
 800df84:	f003 020f 	and.w	r2, r3, #15
 800df88:	6879      	ldr	r1, [r7, #4]
 800df8a:	4613      	mov	r3, r2
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	4413      	add	r3, r2
 800df90:	009b      	lsls	r3, r3, #2
 800df92:	440b      	add	r3, r1
 800df94:	3318      	adds	r3, #24
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d02f      	beq.n	800dffc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800df9c:	78fb      	ldrb	r3, [r7, #3]
 800df9e:	f003 020f 	and.w	r2, r3, #15
 800dfa2:	6879      	ldr	r1, [r7, #4]
 800dfa4:	4613      	mov	r3, r2
 800dfa6:	009b      	lsls	r3, r3, #2
 800dfa8:	4413      	add	r3, r2
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	440b      	add	r3, r1
 800dfae:	3318      	adds	r3, #24
 800dfb0:	681a      	ldr	r2, [r3, #0]
 800dfb2:	78fb      	ldrb	r3, [r7, #3]
 800dfb4:	f003 010f 	and.w	r1, r3, #15
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	460b      	mov	r3, r1
 800dfbc:	00db      	lsls	r3, r3, #3
 800dfbe:	440b      	add	r3, r1
 800dfc0:	009b      	lsls	r3, r3, #2
 800dfc2:	4403      	add	r3, r0
 800dfc4:	331c      	adds	r3, #28
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	fbb2 f1f3 	udiv	r1, r2, r3
 800dfcc:	fb01 f303 	mul.w	r3, r1, r3
 800dfd0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d112      	bne.n	800dffc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800dfd6:	78fb      	ldrb	r3, [r7, #3]
 800dfd8:	f003 020f 	and.w	r2, r3, #15
 800dfdc:	6879      	ldr	r1, [r7, #4]
 800dfde:	4613      	mov	r3, r2
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	4413      	add	r3, r2
 800dfe4:	009b      	lsls	r3, r3, #2
 800dfe6:	440b      	add	r3, r1
 800dfe8:	3318      	adds	r3, #24
 800dfea:	2200      	movs	r2, #0
 800dfec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dfee:	78f9      	ldrb	r1, [r7, #3]
 800dff0:	2300      	movs	r3, #0
 800dff2:	2200      	movs	r2, #0
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f002 f98e 	bl	8010316 <USBD_LL_Transmit>
 800dffa:	e01f      	b.n	800e03c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	2200      	movs	r2, #0
 800e000:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e00a:	687a      	ldr	r2, [r7, #4]
 800e00c:	33b0      	adds	r3, #176	@ 0xb0
 800e00e:	009b      	lsls	r3, r3, #2
 800e010:	4413      	add	r3, r2
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	691b      	ldr	r3, [r3, #16]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d010      	beq.n	800e03c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	33b0      	adds	r3, #176	@ 0xb0
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	4413      	add	r3, r2
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	691b      	ldr	r3, [r3, #16]
 800e02c:	68ba      	ldr	r2, [r7, #8]
 800e02e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e032:	68ba      	ldr	r2, [r7, #8]
 800e034:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e038:	78fa      	ldrb	r2, [r7, #3]
 800e03a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e03c:	2300      	movs	r3, #0
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3710      	adds	r7, #16
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}

0800e046 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e046:	b580      	push	{r7, lr}
 800e048:	b084      	sub	sp, #16
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	6078      	str	r0, [r7, #4]
 800e04e:	460b      	mov	r3, r1
 800e050:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	32b0      	adds	r2, #176	@ 0xb0
 800e05c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e060:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	32b0      	adds	r2, #176	@ 0xb0
 800e06c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d101      	bne.n	800e078 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e074:	2303      	movs	r3, #3
 800e076:	e01a      	b.n	800e0ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e078:	78fb      	ldrb	r3, [r7, #3]
 800e07a:	4619      	mov	r1, r3
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f002 f98c 	bl	801039a <USBD_LL_GetRxDataSize>
 800e082:	4602      	mov	r2, r0
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	33b0      	adds	r3, #176	@ 0xb0
 800e094:	009b      	lsls	r3, r3, #2
 800e096:	4413      	add	r3, r2
 800e098:	685b      	ldr	r3, [r3, #4]
 800e09a:	68db      	ldr	r3, [r3, #12]
 800e09c:	68fa      	ldr	r2, [r7, #12]
 800e09e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e0a2:	68fa      	ldr	r2, [r7, #12]
 800e0a4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e0a8:	4611      	mov	r1, r2
 800e0aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e0ac:	2300      	movs	r3, #0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3710      	adds	r7, #16
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}

0800e0b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e0b6:	b580      	push	{r7, lr}
 800e0b8:	b084      	sub	sp, #16
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	32b0      	adds	r2, #176	@ 0xb0
 800e0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d101      	bne.n	800e0d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e0d4:	2303      	movs	r3, #3
 800e0d6:	e024      	b.n	800e122 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0de:	687a      	ldr	r2, [r7, #4]
 800e0e0:	33b0      	adds	r3, #176	@ 0xb0
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	4413      	add	r3, r2
 800e0e6:	685b      	ldr	r3, [r3, #4]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d019      	beq.n	800e120 <USBD_CDC_EP0_RxReady+0x6a>
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e0f2:	2bff      	cmp	r3, #255	@ 0xff
 800e0f4:	d014      	beq.n	800e120 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0fc:	687a      	ldr	r2, [r7, #4]
 800e0fe:	33b0      	adds	r3, #176	@ 0xb0
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	4413      	add	r3, r2
 800e104:	685b      	ldr	r3, [r3, #4]
 800e106:	689b      	ldr	r3, [r3, #8]
 800e108:	68fa      	ldr	r2, [r7, #12]
 800e10a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e10e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e110:	68fa      	ldr	r2, [r7, #12]
 800e112:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e116:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	22ff      	movs	r2, #255	@ 0xff
 800e11c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e120:	2300      	movs	r3, #0
}
 800e122:	4618      	mov	r0, r3
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}
	...

0800e12c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b086      	sub	sp, #24
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e134:	2182      	movs	r1, #130	@ 0x82
 800e136:	4818      	ldr	r0, [pc, #96]	@ (800e198 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e138:	f000 fd4f 	bl	800ebda <USBD_GetEpDesc>
 800e13c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e13e:	2101      	movs	r1, #1
 800e140:	4815      	ldr	r0, [pc, #84]	@ (800e198 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e142:	f000 fd4a 	bl	800ebda <USBD_GetEpDesc>
 800e146:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e148:	2181      	movs	r1, #129	@ 0x81
 800e14a:	4813      	ldr	r0, [pc, #76]	@ (800e198 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e14c:	f000 fd45 	bl	800ebda <USBD_GetEpDesc>
 800e150:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d002      	beq.n	800e15e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	2210      	movs	r2, #16
 800e15c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d006      	beq.n	800e172 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	2200      	movs	r2, #0
 800e168:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e16c:	711a      	strb	r2, [r3, #4]
 800e16e:	2200      	movs	r2, #0
 800e170:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d006      	beq.n	800e186 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2200      	movs	r2, #0
 800e17c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e180:	711a      	strb	r2, [r3, #4]
 800e182:	2200      	movs	r2, #0
 800e184:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2243      	movs	r2, #67	@ 0x43
 800e18a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e18c:	4b02      	ldr	r3, [pc, #8]	@ (800e198 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3718      	adds	r7, #24
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
 800e196:	bf00      	nop
 800e198:	200000ac 	.word	0x200000ac

0800e19c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b086      	sub	sp, #24
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e1a4:	2182      	movs	r1, #130	@ 0x82
 800e1a6:	4818      	ldr	r0, [pc, #96]	@ (800e208 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e1a8:	f000 fd17 	bl	800ebda <USBD_GetEpDesc>
 800e1ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e1ae:	2101      	movs	r1, #1
 800e1b0:	4815      	ldr	r0, [pc, #84]	@ (800e208 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e1b2:	f000 fd12 	bl	800ebda <USBD_GetEpDesc>
 800e1b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e1b8:	2181      	movs	r1, #129	@ 0x81
 800e1ba:	4813      	ldr	r0, [pc, #76]	@ (800e208 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e1bc:	f000 fd0d 	bl	800ebda <USBD_GetEpDesc>
 800e1c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e1c2:	697b      	ldr	r3, [r7, #20]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d002      	beq.n	800e1ce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	2210      	movs	r2, #16
 800e1cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d006      	beq.n	800e1e2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	711a      	strb	r2, [r3, #4]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	f042 0202 	orr.w	r2, r2, #2
 800e1e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d006      	beq.n	800e1f6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	711a      	strb	r2, [r3, #4]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	f042 0202 	orr.w	r2, r2, #2
 800e1f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2243      	movs	r2, #67	@ 0x43
 800e1fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e1fc:	4b02      	ldr	r3, [pc, #8]	@ (800e208 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3718      	adds	r7, #24
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	200000ac 	.word	0x200000ac

0800e20c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b086      	sub	sp, #24
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e214:	2182      	movs	r1, #130	@ 0x82
 800e216:	4818      	ldr	r0, [pc, #96]	@ (800e278 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e218:	f000 fcdf 	bl	800ebda <USBD_GetEpDesc>
 800e21c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e21e:	2101      	movs	r1, #1
 800e220:	4815      	ldr	r0, [pc, #84]	@ (800e278 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e222:	f000 fcda 	bl	800ebda <USBD_GetEpDesc>
 800e226:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e228:	2181      	movs	r1, #129	@ 0x81
 800e22a:	4813      	ldr	r0, [pc, #76]	@ (800e278 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e22c:	f000 fcd5 	bl	800ebda <USBD_GetEpDesc>
 800e230:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d002      	beq.n	800e23e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	2210      	movs	r2, #16
 800e23c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d006      	beq.n	800e252 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	2200      	movs	r2, #0
 800e248:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e24c:	711a      	strb	r2, [r3, #4]
 800e24e:	2200      	movs	r2, #0
 800e250:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d006      	beq.n	800e266 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2200      	movs	r2, #0
 800e25c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e260:	711a      	strb	r2, [r3, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2243      	movs	r2, #67	@ 0x43
 800e26a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e26c:	4b02      	ldr	r3, [pc, #8]	@ (800e278 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3718      	adds	r7, #24
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	200000ac 	.word	0x200000ac

0800e27c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b083      	sub	sp, #12
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	220a      	movs	r2, #10
 800e288:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e28a:	4b03      	ldr	r3, [pc, #12]	@ (800e298 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	370c      	adds	r7, #12
 800e290:	46bd      	mov	sp, r7
 800e292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e296:	4770      	bx	lr
 800e298:	20000068 	.word	0x20000068

0800e29c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e29c:	b480      	push	{r7}
 800e29e:	b083      	sub	sp, #12
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d101      	bne.n	800e2b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e2ac:	2303      	movs	r3, #3
 800e2ae:	e009      	b.n	800e2c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e2b6:	687a      	ldr	r2, [r7, #4]
 800e2b8:	33b0      	adds	r3, #176	@ 0xb0
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	4413      	add	r3, r2
 800e2be:	683a      	ldr	r2, [r7, #0]
 800e2c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e2c2:	2300      	movs	r3, #0
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	370c      	adds	r7, #12
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr

0800e2d0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b087      	sub	sp, #28
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	60f8      	str	r0, [r7, #12]
 800e2d8:	60b9      	str	r1, [r7, #8]
 800e2da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	32b0      	adds	r2, #176	@ 0xb0
 800e2e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2ea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d101      	bne.n	800e2f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e2f2:	2303      	movs	r3, #3
 800e2f4:	e008      	b.n	800e308 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	68ba      	ldr	r2, [r7, #8]
 800e2fa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e306:	2300      	movs	r3, #0
}
 800e308:	4618      	mov	r0, r3
 800e30a:	371c      	adds	r7, #28
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr

0800e314 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e314:	b480      	push	{r7}
 800e316:	b085      	sub	sp, #20
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	32b0      	adds	r2, #176	@ 0xb0
 800e328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e32c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d101      	bne.n	800e338 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e334:	2303      	movs	r3, #3
 800e336:	e004      	b.n	800e342 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	683a      	ldr	r2, [r7, #0]
 800e33c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e340:	2300      	movs	r3, #0
}
 800e342:	4618      	mov	r0, r3
 800e344:	3714      	adds	r7, #20
 800e346:	46bd      	mov	sp, r7
 800e348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34c:	4770      	bx	lr
	...

0800e350 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b084      	sub	sp, #16
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	32b0      	adds	r2, #176	@ 0xb0
 800e362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e366:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e368:	2301      	movs	r3, #1
 800e36a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d101      	bne.n	800e376 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e372:	2303      	movs	r3, #3
 800e374:	e025      	b.n	800e3c2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d11f      	bne.n	800e3c0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	2201      	movs	r2, #1
 800e384:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e388:	4b10      	ldr	r3, [pc, #64]	@ (800e3cc <USBD_CDC_TransmitPacket+0x7c>)
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	f003 020f 	and.w	r2, r3, #15
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	4613      	mov	r3, r2
 800e39a:	009b      	lsls	r3, r3, #2
 800e39c:	4413      	add	r3, r2
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	4403      	add	r3, r0
 800e3a2:	3318      	adds	r3, #24
 800e3a4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e3a6:	4b09      	ldr	r3, [pc, #36]	@ (800e3cc <USBD_CDC_TransmitPacket+0x7c>)
 800e3a8:	7819      	ldrb	r1, [r3, #0]
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f001 ffad 	bl	8010316 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	3710      	adds	r7, #16
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd80      	pop	{r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	200000ef 	.word	0x200000ef

0800e3d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b084      	sub	sp, #16
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	32b0      	adds	r2, #176	@ 0xb0
 800e3e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	32b0      	adds	r2, #176	@ 0xb0
 800e3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d101      	bne.n	800e3fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e3fa:	2303      	movs	r3, #3
 800e3fc:	e018      	b.n	800e430 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	7c1b      	ldrb	r3, [r3, #16]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d10a      	bne.n	800e41c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e406:	4b0c      	ldr	r3, [pc, #48]	@ (800e438 <USBD_CDC_ReceivePacket+0x68>)
 800e408:	7819      	ldrb	r1, [r3, #0]
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e410:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f001 ff9f 	bl	8010358 <USBD_LL_PrepareReceive>
 800e41a:	e008      	b.n	800e42e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e41c:	4b06      	ldr	r3, [pc, #24]	@ (800e438 <USBD_CDC_ReceivePacket+0x68>)
 800e41e:	7819      	ldrb	r1, [r3, #0]
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e426:	2340      	movs	r3, #64	@ 0x40
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f001 ff95 	bl	8010358 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e42e:	2300      	movs	r3, #0
}
 800e430:	4618      	mov	r0, r3
 800e432:	3710      	adds	r7, #16
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}
 800e438:	200000f0 	.word	0x200000f0

0800e43c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b086      	sub	sp, #24
 800e440:	af00      	add	r7, sp, #0
 800e442:	60f8      	str	r0, [r7, #12]
 800e444:	60b9      	str	r1, [r7, #8]
 800e446:	4613      	mov	r3, r2
 800e448:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d101      	bne.n	800e454 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e450:	2303      	movs	r3, #3
 800e452:	e01f      	b.n	800e494 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	2200      	movs	r2, #0
 800e458:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2200      	movs	r2, #0
 800e460:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2200      	movs	r2, #0
 800e468:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d003      	beq.n	800e47a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	68ba      	ldr	r2, [r7, #8]
 800e476:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2201      	movs	r2, #1
 800e47e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	79fa      	ldrb	r2, [r7, #7]
 800e486:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e488:	68f8      	ldr	r0, [r7, #12]
 800e48a:	f001 fe0f 	bl	80100ac <USBD_LL_Init>
 800e48e:	4603      	mov	r3, r0
 800e490:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e492:	7dfb      	ldrb	r3, [r7, #23]
}
 800e494:	4618      	mov	r0, r3
 800e496:	3718      	adds	r7, #24
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d101      	bne.n	800e4b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e4b0:	2303      	movs	r3, #3
 800e4b2:	e025      	b.n	800e500 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	683a      	ldr	r2, [r7, #0]
 800e4b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	32ae      	adds	r2, #174	@ 0xae
 800e4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00f      	beq.n	800e4f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	32ae      	adds	r2, #174	@ 0xae
 800e4da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4e0:	f107 020e 	add.w	r2, r7, #14
 800e4e4:	4610      	mov	r0, r2
 800e4e6:	4798      	blx	r3
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e4f6:	1c5a      	adds	r2, r3, #1
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e4fe:	2300      	movs	r3, #0
}
 800e500:	4618      	mov	r0, r3
 800e502:	3710      	adds	r7, #16
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f001 fe17 	bl	8010144 <USBD_LL_Start>
 800e516:	4603      	mov	r3, r0
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3708      	adds	r7, #8
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e520:	b480      	push	{r7}
 800e522:	b083      	sub	sp, #12
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e528:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	370c      	adds	r7, #12
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr

0800e536 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e536:	b580      	push	{r7, lr}
 800e538:	b084      	sub	sp, #16
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
 800e53e:	460b      	mov	r3, r1
 800e540:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e542:	2300      	movs	r3, #0
 800e544:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d009      	beq.n	800e564 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	78fa      	ldrb	r2, [r7, #3]
 800e55a:	4611      	mov	r1, r2
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	4798      	blx	r3
 800e560:	4603      	mov	r3, r0
 800e562:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e564:	7bfb      	ldrb	r3, [r7, #15]
}
 800e566:	4618      	mov	r0, r3
 800e568:	3710      	adds	r7, #16
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}

0800e56e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e56e:	b580      	push	{r7, lr}
 800e570:	b084      	sub	sp, #16
 800e572:	af00      	add	r7, sp, #0
 800e574:	6078      	str	r0, [r7, #4]
 800e576:	460b      	mov	r3, r1
 800e578:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e57a:	2300      	movs	r3, #0
 800e57c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e584:	685b      	ldr	r3, [r3, #4]
 800e586:	78fa      	ldrb	r2, [r7, #3]
 800e588:	4611      	mov	r1, r2
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	4798      	blx	r3
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d001      	beq.n	800e598 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e594:	2303      	movs	r3, #3
 800e596:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e598:	7bfb      	ldrb	r3, [r7, #15]
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3710      	adds	r7, #16
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}

0800e5a2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e5a2:	b580      	push	{r7, lr}
 800e5a4:	b084      	sub	sp, #16
 800e5a6:	af00      	add	r7, sp, #0
 800e5a8:	6078      	str	r0, [r7, #4]
 800e5aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e5b2:	6839      	ldr	r1, [r7, #0]
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f001 f90c 	bl	800f7d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2201      	movs	r2, #1
 800e5be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e5d6:	f003 031f 	and.w	r3, r3, #31
 800e5da:	2b02      	cmp	r3, #2
 800e5dc:	d01a      	beq.n	800e614 <USBD_LL_SetupStage+0x72>
 800e5de:	2b02      	cmp	r3, #2
 800e5e0:	d822      	bhi.n	800e628 <USBD_LL_SetupStage+0x86>
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d002      	beq.n	800e5ec <USBD_LL_SetupStage+0x4a>
 800e5e6:	2b01      	cmp	r3, #1
 800e5e8:	d00a      	beq.n	800e600 <USBD_LL_SetupStage+0x5e>
 800e5ea:	e01d      	b.n	800e628 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 fb63 	bl	800ecc0 <USBD_StdDevReq>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	73fb      	strb	r3, [r7, #15]
      break;
 800e5fe:	e020      	b.n	800e642 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e606:	4619      	mov	r1, r3
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f000 fbcb 	bl	800eda4 <USBD_StdItfReq>
 800e60e:	4603      	mov	r3, r0
 800e610:	73fb      	strb	r3, [r7, #15]
      break;
 800e612:	e016      	b.n	800e642 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e61a:	4619      	mov	r1, r3
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f000 fc2d 	bl	800ee7c <USBD_StdEPReq>
 800e622:	4603      	mov	r3, r0
 800e624:	73fb      	strb	r3, [r7, #15]
      break;
 800e626:	e00c      	b.n	800e642 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e62e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e632:	b2db      	uxtb	r3, r3
 800e634:	4619      	mov	r1, r3
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f001 fde4 	bl	8010204 <USBD_LL_StallEP>
 800e63c:	4603      	mov	r3, r0
 800e63e:	73fb      	strb	r3, [r7, #15]
      break;
 800e640:	bf00      	nop
  }

  return ret;
 800e642:	7bfb      	ldrb	r3, [r7, #15]
}
 800e644:	4618      	mov	r0, r3
 800e646:	3710      	adds	r7, #16
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b086      	sub	sp, #24
 800e650:	af00      	add	r7, sp, #0
 800e652:	60f8      	str	r0, [r7, #12]
 800e654:	460b      	mov	r3, r1
 800e656:	607a      	str	r2, [r7, #4]
 800e658:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e65a:	2300      	movs	r3, #0
 800e65c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e65e:	7afb      	ldrb	r3, [r7, #11]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d16e      	bne.n	800e742 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e66a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e672:	2b03      	cmp	r3, #3
 800e674:	f040 8098 	bne.w	800e7a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	689a      	ldr	r2, [r3, #8]
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	68db      	ldr	r3, [r3, #12]
 800e680:	429a      	cmp	r2, r3
 800e682:	d913      	bls.n	800e6ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	689a      	ldr	r2, [r3, #8]
 800e688:	693b      	ldr	r3, [r7, #16]
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	1ad2      	subs	r2, r2, r3
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	68da      	ldr	r2, [r3, #12]
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	689b      	ldr	r3, [r3, #8]
 800e69a:	4293      	cmp	r3, r2
 800e69c:	bf28      	it	cs
 800e69e:	4613      	movcs	r3, r2
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	6879      	ldr	r1, [r7, #4]
 800e6a4:	68f8      	ldr	r0, [r7, #12]
 800e6a6:	f001 f988 	bl	800f9ba <USBD_CtlContinueRx>
 800e6aa:	e07d      	b.n	800e7a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e6b2:	f003 031f 	and.w	r3, r3, #31
 800e6b6:	2b02      	cmp	r3, #2
 800e6b8:	d014      	beq.n	800e6e4 <USBD_LL_DataOutStage+0x98>
 800e6ba:	2b02      	cmp	r3, #2
 800e6bc:	d81d      	bhi.n	800e6fa <USBD_LL_DataOutStage+0xae>
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d002      	beq.n	800e6c8 <USBD_LL_DataOutStage+0x7c>
 800e6c2:	2b01      	cmp	r3, #1
 800e6c4:	d003      	beq.n	800e6ce <USBD_LL_DataOutStage+0x82>
 800e6c6:	e018      	b.n	800e6fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	75bb      	strb	r3, [r7, #22]
            break;
 800e6cc:	e018      	b.n	800e700 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e6d4:	b2db      	uxtb	r3, r3
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	68f8      	ldr	r0, [r7, #12]
 800e6da:	f000 fa64 	bl	800eba6 <USBD_CoreFindIF>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	75bb      	strb	r3, [r7, #22]
            break;
 800e6e2:	e00d      	b.n	800e700 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e6ea:	b2db      	uxtb	r3, r3
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	68f8      	ldr	r0, [r7, #12]
 800e6f0:	f000 fa66 	bl	800ebc0 <USBD_CoreFindEP>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	75bb      	strb	r3, [r7, #22]
            break;
 800e6f8:	e002      	b.n	800e700 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	75bb      	strb	r3, [r7, #22]
            break;
 800e6fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e700:	7dbb      	ldrb	r3, [r7, #22]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d119      	bne.n	800e73a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	2b03      	cmp	r3, #3
 800e710:	d113      	bne.n	800e73a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e712:	7dba      	ldrb	r2, [r7, #22]
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	32ae      	adds	r2, #174	@ 0xae
 800e718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e71c:	691b      	ldr	r3, [r3, #16]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d00b      	beq.n	800e73a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e722:	7dba      	ldrb	r2, [r7, #22]
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e72a:	7dba      	ldrb	r2, [r7, #22]
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	32ae      	adds	r2, #174	@ 0xae
 800e730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e734:	691b      	ldr	r3, [r3, #16]
 800e736:	68f8      	ldr	r0, [r7, #12]
 800e738:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e73a:	68f8      	ldr	r0, [r7, #12]
 800e73c:	f001 f94e 	bl	800f9dc <USBD_CtlSendStatus>
 800e740:	e032      	b.n	800e7a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e742:	7afb      	ldrb	r3, [r7, #11]
 800e744:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e748:	b2db      	uxtb	r3, r3
 800e74a:	4619      	mov	r1, r3
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	f000 fa37 	bl	800ebc0 <USBD_CoreFindEP>
 800e752:	4603      	mov	r3, r0
 800e754:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e756:	7dbb      	ldrb	r3, [r7, #22]
 800e758:	2bff      	cmp	r3, #255	@ 0xff
 800e75a:	d025      	beq.n	800e7a8 <USBD_LL_DataOutStage+0x15c>
 800e75c:	7dbb      	ldrb	r3, [r7, #22]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d122      	bne.n	800e7a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	2b03      	cmp	r3, #3
 800e76c:	d117      	bne.n	800e79e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e76e:	7dba      	ldrb	r2, [r7, #22]
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	32ae      	adds	r2, #174	@ 0xae
 800e774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e778:	699b      	ldr	r3, [r3, #24]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d00f      	beq.n	800e79e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e77e:	7dba      	ldrb	r2, [r7, #22]
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e786:	7dba      	ldrb	r2, [r7, #22]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	32ae      	adds	r2, #174	@ 0xae
 800e78c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e790:	699b      	ldr	r3, [r3, #24]
 800e792:	7afa      	ldrb	r2, [r7, #11]
 800e794:	4611      	mov	r1, r2
 800e796:	68f8      	ldr	r0, [r7, #12]
 800e798:	4798      	blx	r3
 800e79a:	4603      	mov	r3, r0
 800e79c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e79e:	7dfb      	ldrb	r3, [r7, #23]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d001      	beq.n	800e7a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e7a4:	7dfb      	ldrb	r3, [r7, #23]
 800e7a6:	e000      	b.n	800e7aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e7a8:	2300      	movs	r3, #0
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3718      	adds	r7, #24
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}

0800e7b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e7b2:	b580      	push	{r7, lr}
 800e7b4:	b086      	sub	sp, #24
 800e7b6:	af00      	add	r7, sp, #0
 800e7b8:	60f8      	str	r0, [r7, #12]
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	607a      	str	r2, [r7, #4]
 800e7be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e7c0:	7afb      	ldrb	r3, [r7, #11]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d16f      	bne.n	800e8a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	3314      	adds	r3, #20
 800e7ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e7d2:	2b02      	cmp	r3, #2
 800e7d4:	d15a      	bne.n	800e88c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e7d6:	693b      	ldr	r3, [r7, #16]
 800e7d8:	689a      	ldr	r2, [r3, #8]
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	68db      	ldr	r3, [r3, #12]
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d914      	bls.n	800e80c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	689a      	ldr	r2, [r3, #8]
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	68db      	ldr	r3, [r3, #12]
 800e7ea:	1ad2      	subs	r2, r2, r3
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	689b      	ldr	r3, [r3, #8]
 800e7f4:	461a      	mov	r2, r3
 800e7f6:	6879      	ldr	r1, [r7, #4]
 800e7f8:	68f8      	ldr	r0, [r7, #12]
 800e7fa:	f001 f8b0 	bl	800f95e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e7fe:	2300      	movs	r3, #0
 800e800:	2200      	movs	r2, #0
 800e802:	2100      	movs	r1, #0
 800e804:	68f8      	ldr	r0, [r7, #12]
 800e806:	f001 fda7 	bl	8010358 <USBD_LL_PrepareReceive>
 800e80a:	e03f      	b.n	800e88c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	68da      	ldr	r2, [r3, #12]
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	689b      	ldr	r3, [r3, #8]
 800e814:	429a      	cmp	r2, r3
 800e816:	d11c      	bne.n	800e852 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	685a      	ldr	r2, [r3, #4]
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e820:	429a      	cmp	r2, r3
 800e822:	d316      	bcc.n	800e852 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	685a      	ldr	r2, [r3, #4]
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e82e:	429a      	cmp	r2, r3
 800e830:	d20f      	bcs.n	800e852 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e832:	2200      	movs	r2, #0
 800e834:	2100      	movs	r1, #0
 800e836:	68f8      	ldr	r0, [r7, #12]
 800e838:	f001 f891 	bl	800f95e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2200      	movs	r2, #0
 800e840:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e844:	2300      	movs	r3, #0
 800e846:	2200      	movs	r2, #0
 800e848:	2100      	movs	r1, #0
 800e84a:	68f8      	ldr	r0, [r7, #12]
 800e84c:	f001 fd84 	bl	8010358 <USBD_LL_PrepareReceive>
 800e850:	e01c      	b.n	800e88c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e858:	b2db      	uxtb	r3, r3
 800e85a:	2b03      	cmp	r3, #3
 800e85c:	d10f      	bne.n	800e87e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e864:	68db      	ldr	r3, [r3, #12]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d009      	beq.n	800e87e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2200      	movs	r2, #0
 800e86e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e878:	68db      	ldr	r3, [r3, #12]
 800e87a:	68f8      	ldr	r0, [r7, #12]
 800e87c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e87e:	2180      	movs	r1, #128	@ 0x80
 800e880:	68f8      	ldr	r0, [r7, #12]
 800e882:	f001 fcbf 	bl	8010204 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e886:	68f8      	ldr	r0, [r7, #12]
 800e888:	f001 f8bb 	bl	800fa02 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e892:	2b00      	cmp	r3, #0
 800e894:	d03a      	beq.n	800e90c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e896:	68f8      	ldr	r0, [r7, #12]
 800e898:	f7ff fe42 	bl	800e520 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e8a4:	e032      	b.n	800e90c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e8a6:	7afb      	ldrb	r3, [r7, #11]
 800e8a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e8ac:	b2db      	uxtb	r3, r3
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	68f8      	ldr	r0, [r7, #12]
 800e8b2:	f000 f985 	bl	800ebc0 <USBD_CoreFindEP>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e8ba:	7dfb      	ldrb	r3, [r7, #23]
 800e8bc:	2bff      	cmp	r3, #255	@ 0xff
 800e8be:	d025      	beq.n	800e90c <USBD_LL_DataInStage+0x15a>
 800e8c0:	7dfb      	ldrb	r3, [r7, #23]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d122      	bne.n	800e90c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8cc:	b2db      	uxtb	r3, r3
 800e8ce:	2b03      	cmp	r3, #3
 800e8d0:	d11c      	bne.n	800e90c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e8d2:	7dfa      	ldrb	r2, [r7, #23]
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	32ae      	adds	r2, #174	@ 0xae
 800e8d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8dc:	695b      	ldr	r3, [r3, #20]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d014      	beq.n	800e90c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e8e2:	7dfa      	ldrb	r2, [r7, #23]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e8ea:	7dfa      	ldrb	r2, [r7, #23]
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	32ae      	adds	r2, #174	@ 0xae
 800e8f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8f4:	695b      	ldr	r3, [r3, #20]
 800e8f6:	7afa      	ldrb	r2, [r7, #11]
 800e8f8:	4611      	mov	r1, r2
 800e8fa:	68f8      	ldr	r0, [r7, #12]
 800e8fc:	4798      	blx	r3
 800e8fe:	4603      	mov	r3, r0
 800e900:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e902:	7dbb      	ldrb	r3, [r7, #22]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d001      	beq.n	800e90c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e908:	7dbb      	ldrb	r3, [r7, #22]
 800e90a:	e000      	b.n	800e90e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e90c:	2300      	movs	r3, #0
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3718      	adds	r7, #24
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}

0800e916 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e916:	b580      	push	{r7, lr}
 800e918:	b084      	sub	sp, #16
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e91e:	2300      	movs	r3, #0
 800e920:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2201      	movs	r2, #1
 800e926:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2200      	movs	r2, #0
 800e92e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	2200      	movs	r2, #0
 800e936:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2200      	movs	r2, #0
 800e93c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d014      	beq.n	800e97c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e958:	685b      	ldr	r3, [r3, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d00e      	beq.n	800e97c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e964:	685b      	ldr	r3, [r3, #4]
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	6852      	ldr	r2, [r2, #4]
 800e96a:	b2d2      	uxtb	r2, r2
 800e96c:	4611      	mov	r1, r2
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	4798      	blx	r3
 800e972:	4603      	mov	r3, r0
 800e974:	2b00      	cmp	r3, #0
 800e976:	d001      	beq.n	800e97c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e978:	2303      	movs	r3, #3
 800e97a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e97c:	2340      	movs	r3, #64	@ 0x40
 800e97e:	2200      	movs	r2, #0
 800e980:	2100      	movs	r1, #0
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f001 fbf9 	bl	801017a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2201      	movs	r2, #1
 800e98c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2240      	movs	r2, #64	@ 0x40
 800e994:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e998:	2340      	movs	r3, #64	@ 0x40
 800e99a:	2200      	movs	r2, #0
 800e99c:	2180      	movs	r1, #128	@ 0x80
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f001 fbeb 	bl	801017a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2240      	movs	r2, #64	@ 0x40
 800e9ae:	621a      	str	r2, [r3, #32]

  return ret;
 800e9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3710      	adds	r7, #16
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}

0800e9ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e9ba:	b480      	push	{r7}
 800e9bc:	b083      	sub	sp, #12
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	6078      	str	r0, [r7, #4]
 800e9c2:	460b      	mov	r3, r1
 800e9c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	78fa      	ldrb	r2, [r7, #3]
 800e9ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e9cc:	2300      	movs	r3, #0
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	370c      	adds	r7, #12
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr

0800e9da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e9da:	b480      	push	{r7}
 800e9dc:	b083      	sub	sp, #12
 800e9de:	af00      	add	r7, sp, #0
 800e9e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	2b04      	cmp	r3, #4
 800e9ec:	d006      	beq.n	800e9fc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9f4:	b2da      	uxtb	r2, r3
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2204      	movs	r2, #4
 800ea00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ea04:	2300      	movs	r3, #0
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	370c      	adds	r7, #12
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr

0800ea12 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ea12:	b480      	push	{r7}
 800ea14:	b083      	sub	sp, #12
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	2b04      	cmp	r3, #4
 800ea24:	d106      	bne.n	800ea34 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ea2c:	b2da      	uxtb	r2, r3
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ea34:	2300      	movs	r3, #0
}
 800ea36:	4618      	mov	r0, r3
 800ea38:	370c      	adds	r7, #12
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr

0800ea42 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ea42:	b580      	push	{r7, lr}
 800ea44:	b082      	sub	sp, #8
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea50:	b2db      	uxtb	r3, r3
 800ea52:	2b03      	cmp	r3, #3
 800ea54:	d110      	bne.n	800ea78 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d00b      	beq.n	800ea78 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea66:	69db      	ldr	r3, [r3, #28]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d005      	beq.n	800ea78 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea72:	69db      	ldr	r3, [r3, #28]
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ea78:	2300      	movs	r3, #0
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3708      	adds	r7, #8
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}

0800ea82 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ea82:	b580      	push	{r7, lr}
 800ea84:	b082      	sub	sp, #8
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	6078      	str	r0, [r7, #4]
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	32ae      	adds	r2, #174	@ 0xae
 800ea98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d101      	bne.n	800eaa4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800eaa0:	2303      	movs	r3, #3
 800eaa2:	e01c      	b.n	800eade <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eaaa:	b2db      	uxtb	r3, r3
 800eaac:	2b03      	cmp	r3, #3
 800eaae:	d115      	bne.n	800eadc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	32ae      	adds	r2, #174	@ 0xae
 800eaba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eabe:	6a1b      	ldr	r3, [r3, #32]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d00b      	beq.n	800eadc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	32ae      	adds	r2, #174	@ 0xae
 800eace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ead2:	6a1b      	ldr	r3, [r3, #32]
 800ead4:	78fa      	ldrb	r2, [r7, #3]
 800ead6:	4611      	mov	r1, r2
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eadc:	2300      	movs	r3, #0
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3708      	adds	r7, #8
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}

0800eae6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800eae6:	b580      	push	{r7, lr}
 800eae8:	b082      	sub	sp, #8
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
 800eaee:	460b      	mov	r3, r1
 800eaf0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	32ae      	adds	r2, #174	@ 0xae
 800eafc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d101      	bne.n	800eb08 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800eb04:	2303      	movs	r3, #3
 800eb06:	e01c      	b.n	800eb42 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	2b03      	cmp	r3, #3
 800eb12:	d115      	bne.n	800eb40 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	32ae      	adds	r2, #174	@ 0xae
 800eb1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00b      	beq.n	800eb40 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	32ae      	adds	r2, #174	@ 0xae
 800eb32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb38:	78fa      	ldrb	r2, [r7, #3]
 800eb3a:	4611      	mov	r1, r2
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eb40:	2300      	movs	r3, #0
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3708      	adds	r7, #8
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}

0800eb4a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800eb4a:	b480      	push	{r7}
 800eb4c:	b083      	sub	sp, #12
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eb52:	2300      	movs	r3, #0
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	370c      	adds	r7, #12
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr

0800eb60 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b084      	sub	sp, #16
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2201      	movs	r2, #1
 800eb70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d00e      	beq.n	800eb9c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb84:	685b      	ldr	r3, [r3, #4]
 800eb86:	687a      	ldr	r2, [r7, #4]
 800eb88:	6852      	ldr	r2, [r2, #4]
 800eb8a:	b2d2      	uxtb	r2, r2
 800eb8c:	4611      	mov	r1, r2
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	4798      	blx	r3
 800eb92:	4603      	mov	r3, r0
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d001      	beq.n	800eb9c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800eb98:	2303      	movs	r3, #3
 800eb9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800eb9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3710      	adds	r7, #16
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}

0800eba6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800eba6:	b480      	push	{r7}
 800eba8:	b083      	sub	sp, #12
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
 800ebae:	460b      	mov	r3, r1
 800ebb0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ebb2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	370c      	adds	r7, #12
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr

0800ebc0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b083      	sub	sp, #12
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
 800ebc8:	460b      	mov	r3, r1
 800ebca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ebcc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	370c      	adds	r7, #12
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd8:	4770      	bx	lr

0800ebda <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ebda:	b580      	push	{r7, lr}
 800ebdc:	b086      	sub	sp, #24
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
 800ebe2:	460b      	mov	r3, r1
 800ebe4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	885b      	ldrh	r3, [r3, #2]
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	68fa      	ldr	r2, [r7, #12]
 800ebfa:	7812      	ldrb	r2, [r2, #0]
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	d91f      	bls.n	800ec40 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ec06:	e013      	b.n	800ec30 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ec08:	f107 030a 	add.w	r3, r7, #10
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	6978      	ldr	r0, [r7, #20]
 800ec10:	f000 f81b 	bl	800ec4a <USBD_GetNextDesc>
 800ec14:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	785b      	ldrb	r3, [r3, #1]
 800ec1a:	2b05      	cmp	r3, #5
 800ec1c:	d108      	bne.n	800ec30 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	789b      	ldrb	r3, [r3, #2]
 800ec26:	78fa      	ldrb	r2, [r7, #3]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d008      	beq.n	800ec3e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	885b      	ldrh	r3, [r3, #2]
 800ec34:	b29a      	uxth	r2, r3
 800ec36:	897b      	ldrh	r3, [r7, #10]
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d8e5      	bhi.n	800ec08 <USBD_GetEpDesc+0x2e>
 800ec3c:	e000      	b.n	800ec40 <USBD_GetEpDesc+0x66>
          break;
 800ec3e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ec40:	693b      	ldr	r3, [r7, #16]
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3718      	adds	r7, #24
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}

0800ec4a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ec4a:	b480      	push	{r7}
 800ec4c:	b085      	sub	sp, #20
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	6078      	str	r0, [r7, #4]
 800ec52:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	881b      	ldrh	r3, [r3, #0]
 800ec5c:	68fa      	ldr	r2, [r7, #12]
 800ec5e:	7812      	ldrb	r2, [r2, #0]
 800ec60:	4413      	add	r3, r2
 800ec62:	b29a      	uxth	r2, r3
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	781b      	ldrb	r3, [r3, #0]
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	4413      	add	r3, r2
 800ec72:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ec74:	68fb      	ldr	r3, [r7, #12]
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3714      	adds	r7, #20
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec80:	4770      	bx	lr

0800ec82 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ec82:	b480      	push	{r7}
 800ec84:	b087      	sub	sp, #28
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	781b      	ldrb	r3, [r3, #0]
 800ec92:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	3301      	adds	r3, #1
 800ec98:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	781b      	ldrb	r3, [r3, #0]
 800ec9e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800eca0:	8a3b      	ldrh	r3, [r7, #16]
 800eca2:	021b      	lsls	r3, r3, #8
 800eca4:	b21a      	sxth	r2, r3
 800eca6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ecaa:	4313      	orrs	r3, r2
 800ecac:	b21b      	sxth	r3, r3
 800ecae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ecb0:	89fb      	ldrh	r3, [r7, #14]
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	371c      	adds	r7, #28
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbc:	4770      	bx	lr
	...

0800ecc0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b084      	sub	sp, #16
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
 800ecc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ecca:	2300      	movs	r3, #0
 800eccc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	781b      	ldrb	r3, [r3, #0]
 800ecd2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ecd6:	2b40      	cmp	r3, #64	@ 0x40
 800ecd8:	d005      	beq.n	800ece6 <USBD_StdDevReq+0x26>
 800ecda:	2b40      	cmp	r3, #64	@ 0x40
 800ecdc:	d857      	bhi.n	800ed8e <USBD_StdDevReq+0xce>
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d00f      	beq.n	800ed02 <USBD_StdDevReq+0x42>
 800ece2:	2b20      	cmp	r3, #32
 800ece4:	d153      	bne.n	800ed8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	32ae      	adds	r2, #174	@ 0xae
 800ecf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecf4:	689b      	ldr	r3, [r3, #8]
 800ecf6:	6839      	ldr	r1, [r7, #0]
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	4798      	blx	r3
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	73fb      	strb	r3, [r7, #15]
      break;
 800ed00:	e04a      	b.n	800ed98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	785b      	ldrb	r3, [r3, #1]
 800ed06:	2b09      	cmp	r3, #9
 800ed08:	d83b      	bhi.n	800ed82 <USBD_StdDevReq+0xc2>
 800ed0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ed10 <USBD_StdDevReq+0x50>)
 800ed0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed10:	0800ed65 	.word	0x0800ed65
 800ed14:	0800ed79 	.word	0x0800ed79
 800ed18:	0800ed83 	.word	0x0800ed83
 800ed1c:	0800ed6f 	.word	0x0800ed6f
 800ed20:	0800ed83 	.word	0x0800ed83
 800ed24:	0800ed43 	.word	0x0800ed43
 800ed28:	0800ed39 	.word	0x0800ed39
 800ed2c:	0800ed83 	.word	0x0800ed83
 800ed30:	0800ed5b 	.word	0x0800ed5b
 800ed34:	0800ed4d 	.word	0x0800ed4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ed38:	6839      	ldr	r1, [r7, #0]
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f000 fa3c 	bl	800f1b8 <USBD_GetDescriptor>
          break;
 800ed40:	e024      	b.n	800ed8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ed42:	6839      	ldr	r1, [r7, #0]
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f000 fba1 	bl	800f48c <USBD_SetAddress>
          break;
 800ed4a:	e01f      	b.n	800ed8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ed4c:	6839      	ldr	r1, [r7, #0]
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f000 fbe0 	bl	800f514 <USBD_SetConfig>
 800ed54:	4603      	mov	r3, r0
 800ed56:	73fb      	strb	r3, [r7, #15]
          break;
 800ed58:	e018      	b.n	800ed8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ed5a:	6839      	ldr	r1, [r7, #0]
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f000 fc83 	bl	800f668 <USBD_GetConfig>
          break;
 800ed62:	e013      	b.n	800ed8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ed64:	6839      	ldr	r1, [r7, #0]
 800ed66:	6878      	ldr	r0, [r7, #4]
 800ed68:	f000 fcb4 	bl	800f6d4 <USBD_GetStatus>
          break;
 800ed6c:	e00e      	b.n	800ed8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ed6e:	6839      	ldr	r1, [r7, #0]
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f000 fce3 	bl	800f73c <USBD_SetFeature>
          break;
 800ed76:	e009      	b.n	800ed8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ed78:	6839      	ldr	r1, [r7, #0]
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f000 fd07 	bl	800f78e <USBD_ClrFeature>
          break;
 800ed80:	e004      	b.n	800ed8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ed82:	6839      	ldr	r1, [r7, #0]
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 fd5e 	bl	800f846 <USBD_CtlError>
          break;
 800ed8a:	bf00      	nop
      }
      break;
 800ed8c:	e004      	b.n	800ed98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ed8e:	6839      	ldr	r1, [r7, #0]
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f000 fd58 	bl	800f846 <USBD_CtlError>
      break;
 800ed96:	bf00      	nop
  }

  return ret;
 800ed98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3710      	adds	r7, #16
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop

0800eda4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
 800edac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800edae:	2300      	movs	r3, #0
 800edb0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800edba:	2b40      	cmp	r3, #64	@ 0x40
 800edbc:	d005      	beq.n	800edca <USBD_StdItfReq+0x26>
 800edbe:	2b40      	cmp	r3, #64	@ 0x40
 800edc0:	d852      	bhi.n	800ee68 <USBD_StdItfReq+0xc4>
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d001      	beq.n	800edca <USBD_StdItfReq+0x26>
 800edc6:	2b20      	cmp	r3, #32
 800edc8:	d14e      	bne.n	800ee68 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edd0:	b2db      	uxtb	r3, r3
 800edd2:	3b01      	subs	r3, #1
 800edd4:	2b02      	cmp	r3, #2
 800edd6:	d840      	bhi.n	800ee5a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	889b      	ldrh	r3, [r3, #4]
 800eddc:	b2db      	uxtb	r3, r3
 800edde:	2b01      	cmp	r3, #1
 800ede0:	d836      	bhi.n	800ee50 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	889b      	ldrh	r3, [r3, #4]
 800ede6:	b2db      	uxtb	r3, r3
 800ede8:	4619      	mov	r1, r3
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f7ff fedb 	bl	800eba6 <USBD_CoreFindIF>
 800edf0:	4603      	mov	r3, r0
 800edf2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800edf4:	7bbb      	ldrb	r3, [r7, #14]
 800edf6:	2bff      	cmp	r3, #255	@ 0xff
 800edf8:	d01d      	beq.n	800ee36 <USBD_StdItfReq+0x92>
 800edfa:	7bbb      	ldrb	r3, [r7, #14]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d11a      	bne.n	800ee36 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ee00:	7bba      	ldrb	r2, [r7, #14]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	32ae      	adds	r2, #174	@ 0xae
 800ee06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee0a:	689b      	ldr	r3, [r3, #8]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d00f      	beq.n	800ee30 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ee10:	7bba      	ldrb	r2, [r7, #14]
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ee18:	7bba      	ldrb	r2, [r7, #14]
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	32ae      	adds	r2, #174	@ 0xae
 800ee1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee22:	689b      	ldr	r3, [r3, #8]
 800ee24:	6839      	ldr	r1, [r7, #0]
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	4798      	blx	r3
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ee2e:	e004      	b.n	800ee3a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ee30:	2303      	movs	r3, #3
 800ee32:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ee34:	e001      	b.n	800ee3a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ee36:	2303      	movs	r3, #3
 800ee38:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	88db      	ldrh	r3, [r3, #6]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d110      	bne.n	800ee64 <USBD_StdItfReq+0xc0>
 800ee42:	7bfb      	ldrb	r3, [r7, #15]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d10d      	bne.n	800ee64 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 fdc7 	bl	800f9dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ee4e:	e009      	b.n	800ee64 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ee50:	6839      	ldr	r1, [r7, #0]
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f000 fcf7 	bl	800f846 <USBD_CtlError>
          break;
 800ee58:	e004      	b.n	800ee64 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ee5a:	6839      	ldr	r1, [r7, #0]
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f000 fcf2 	bl	800f846 <USBD_CtlError>
          break;
 800ee62:	e000      	b.n	800ee66 <USBD_StdItfReq+0xc2>
          break;
 800ee64:	bf00      	nop
      }
      break;
 800ee66:	e004      	b.n	800ee72 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ee68:	6839      	ldr	r1, [r7, #0]
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 fceb 	bl	800f846 <USBD_CtlError>
      break;
 800ee70:	bf00      	nop
  }

  return ret;
 800ee72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3710      	adds	r7, #16
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}

0800ee7c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b084      	sub	sp, #16
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
 800ee84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ee86:	2300      	movs	r3, #0
 800ee88:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	889b      	ldrh	r3, [r3, #4]
 800ee8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ee98:	2b40      	cmp	r3, #64	@ 0x40
 800ee9a:	d007      	beq.n	800eeac <USBD_StdEPReq+0x30>
 800ee9c:	2b40      	cmp	r3, #64	@ 0x40
 800ee9e:	f200 817f 	bhi.w	800f1a0 <USBD_StdEPReq+0x324>
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d02a      	beq.n	800eefc <USBD_StdEPReq+0x80>
 800eea6:	2b20      	cmp	r3, #32
 800eea8:	f040 817a 	bne.w	800f1a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800eeac:	7bbb      	ldrb	r3, [r7, #14]
 800eeae:	4619      	mov	r1, r3
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f7ff fe85 	bl	800ebc0 <USBD_CoreFindEP>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eeba:	7b7b      	ldrb	r3, [r7, #13]
 800eebc:	2bff      	cmp	r3, #255	@ 0xff
 800eebe:	f000 8174 	beq.w	800f1aa <USBD_StdEPReq+0x32e>
 800eec2:	7b7b      	ldrb	r3, [r7, #13]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f040 8170 	bne.w	800f1aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800eeca:	7b7a      	ldrb	r2, [r7, #13]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800eed2:	7b7a      	ldrb	r2, [r7, #13]
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	32ae      	adds	r2, #174	@ 0xae
 800eed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eedc:	689b      	ldr	r3, [r3, #8]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	f000 8163 	beq.w	800f1aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800eee4:	7b7a      	ldrb	r2, [r7, #13]
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	32ae      	adds	r2, #174	@ 0xae
 800eeea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeee:	689b      	ldr	r3, [r3, #8]
 800eef0:	6839      	ldr	r1, [r7, #0]
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	4798      	blx	r3
 800eef6:	4603      	mov	r3, r0
 800eef8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800eefa:	e156      	b.n	800f1aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	785b      	ldrb	r3, [r3, #1]
 800ef00:	2b03      	cmp	r3, #3
 800ef02:	d008      	beq.n	800ef16 <USBD_StdEPReq+0x9a>
 800ef04:	2b03      	cmp	r3, #3
 800ef06:	f300 8145 	bgt.w	800f194 <USBD_StdEPReq+0x318>
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	f000 809b 	beq.w	800f046 <USBD_StdEPReq+0x1ca>
 800ef10:	2b01      	cmp	r3, #1
 800ef12:	d03c      	beq.n	800ef8e <USBD_StdEPReq+0x112>
 800ef14:	e13e      	b.n	800f194 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef1c:	b2db      	uxtb	r3, r3
 800ef1e:	2b02      	cmp	r3, #2
 800ef20:	d002      	beq.n	800ef28 <USBD_StdEPReq+0xac>
 800ef22:	2b03      	cmp	r3, #3
 800ef24:	d016      	beq.n	800ef54 <USBD_StdEPReq+0xd8>
 800ef26:	e02c      	b.n	800ef82 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef28:	7bbb      	ldrb	r3, [r7, #14]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d00d      	beq.n	800ef4a <USBD_StdEPReq+0xce>
 800ef2e:	7bbb      	ldrb	r3, [r7, #14]
 800ef30:	2b80      	cmp	r3, #128	@ 0x80
 800ef32:	d00a      	beq.n	800ef4a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ef34:	7bbb      	ldrb	r3, [r7, #14]
 800ef36:	4619      	mov	r1, r3
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f001 f963 	bl	8010204 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef3e:	2180      	movs	r1, #128	@ 0x80
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f001 f95f 	bl	8010204 <USBD_LL_StallEP>
 800ef46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ef48:	e020      	b.n	800ef8c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ef4a:	6839      	ldr	r1, [r7, #0]
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f000 fc7a 	bl	800f846 <USBD_CtlError>
              break;
 800ef52:	e01b      	b.n	800ef8c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ef54:	683b      	ldr	r3, [r7, #0]
 800ef56:	885b      	ldrh	r3, [r3, #2]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d10e      	bne.n	800ef7a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ef5c:	7bbb      	ldrb	r3, [r7, #14]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d00b      	beq.n	800ef7a <USBD_StdEPReq+0xfe>
 800ef62:	7bbb      	ldrb	r3, [r7, #14]
 800ef64:	2b80      	cmp	r3, #128	@ 0x80
 800ef66:	d008      	beq.n	800ef7a <USBD_StdEPReq+0xfe>
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	88db      	ldrh	r3, [r3, #6]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d104      	bne.n	800ef7a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ef70:	7bbb      	ldrb	r3, [r7, #14]
 800ef72:	4619      	mov	r1, r3
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f001 f945 	bl	8010204 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f000 fd2e 	bl	800f9dc <USBD_CtlSendStatus>

              break;
 800ef80:	e004      	b.n	800ef8c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ef82:	6839      	ldr	r1, [r7, #0]
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f000 fc5e 	bl	800f846 <USBD_CtlError>
              break;
 800ef8a:	bf00      	nop
          }
          break;
 800ef8c:	e107      	b.n	800f19e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef94:	b2db      	uxtb	r3, r3
 800ef96:	2b02      	cmp	r3, #2
 800ef98:	d002      	beq.n	800efa0 <USBD_StdEPReq+0x124>
 800ef9a:	2b03      	cmp	r3, #3
 800ef9c:	d016      	beq.n	800efcc <USBD_StdEPReq+0x150>
 800ef9e:	e04b      	b.n	800f038 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800efa0:	7bbb      	ldrb	r3, [r7, #14]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d00d      	beq.n	800efc2 <USBD_StdEPReq+0x146>
 800efa6:	7bbb      	ldrb	r3, [r7, #14]
 800efa8:	2b80      	cmp	r3, #128	@ 0x80
 800efaa:	d00a      	beq.n	800efc2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800efac:	7bbb      	ldrb	r3, [r7, #14]
 800efae:	4619      	mov	r1, r3
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f001 f927 	bl	8010204 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800efb6:	2180      	movs	r1, #128	@ 0x80
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f001 f923 	bl	8010204 <USBD_LL_StallEP>
 800efbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800efc0:	e040      	b.n	800f044 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800efc2:	6839      	ldr	r1, [r7, #0]
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f000 fc3e 	bl	800f846 <USBD_CtlError>
              break;
 800efca:	e03b      	b.n	800f044 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	885b      	ldrh	r3, [r3, #2]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d136      	bne.n	800f042 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800efd4:	7bbb      	ldrb	r3, [r7, #14]
 800efd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d004      	beq.n	800efe8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800efde:	7bbb      	ldrb	r3, [r7, #14]
 800efe0:	4619      	mov	r1, r3
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f001 f92d 	bl	8010242 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f000 fcf7 	bl	800f9dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800efee:	7bbb      	ldrb	r3, [r7, #14]
 800eff0:	4619      	mov	r1, r3
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f7ff fde4 	bl	800ebc0 <USBD_CoreFindEP>
 800eff8:	4603      	mov	r3, r0
 800effa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800effc:	7b7b      	ldrb	r3, [r7, #13]
 800effe:	2bff      	cmp	r3, #255	@ 0xff
 800f000:	d01f      	beq.n	800f042 <USBD_StdEPReq+0x1c6>
 800f002:	7b7b      	ldrb	r3, [r7, #13]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d11c      	bne.n	800f042 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f008:	7b7a      	ldrb	r2, [r7, #13]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f010:	7b7a      	ldrb	r2, [r7, #13]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	32ae      	adds	r2, #174	@ 0xae
 800f016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f01a:	689b      	ldr	r3, [r3, #8]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d010      	beq.n	800f042 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f020:	7b7a      	ldrb	r2, [r7, #13]
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	32ae      	adds	r2, #174	@ 0xae
 800f026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f02a:	689b      	ldr	r3, [r3, #8]
 800f02c:	6839      	ldr	r1, [r7, #0]
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	4798      	blx	r3
 800f032:	4603      	mov	r3, r0
 800f034:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f036:	e004      	b.n	800f042 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f038:	6839      	ldr	r1, [r7, #0]
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f000 fc03 	bl	800f846 <USBD_CtlError>
              break;
 800f040:	e000      	b.n	800f044 <USBD_StdEPReq+0x1c8>
              break;
 800f042:	bf00      	nop
          }
          break;
 800f044:	e0ab      	b.n	800f19e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f04c:	b2db      	uxtb	r3, r3
 800f04e:	2b02      	cmp	r3, #2
 800f050:	d002      	beq.n	800f058 <USBD_StdEPReq+0x1dc>
 800f052:	2b03      	cmp	r3, #3
 800f054:	d032      	beq.n	800f0bc <USBD_StdEPReq+0x240>
 800f056:	e097      	b.n	800f188 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f058:	7bbb      	ldrb	r3, [r7, #14]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d007      	beq.n	800f06e <USBD_StdEPReq+0x1f2>
 800f05e:	7bbb      	ldrb	r3, [r7, #14]
 800f060:	2b80      	cmp	r3, #128	@ 0x80
 800f062:	d004      	beq.n	800f06e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f064:	6839      	ldr	r1, [r7, #0]
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f000 fbed 	bl	800f846 <USBD_CtlError>
                break;
 800f06c:	e091      	b.n	800f192 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f06e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f072:	2b00      	cmp	r3, #0
 800f074:	da0b      	bge.n	800f08e <USBD_StdEPReq+0x212>
 800f076:	7bbb      	ldrb	r3, [r7, #14]
 800f078:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f07c:	4613      	mov	r3, r2
 800f07e:	009b      	lsls	r3, r3, #2
 800f080:	4413      	add	r3, r2
 800f082:	009b      	lsls	r3, r3, #2
 800f084:	3310      	adds	r3, #16
 800f086:	687a      	ldr	r2, [r7, #4]
 800f088:	4413      	add	r3, r2
 800f08a:	3304      	adds	r3, #4
 800f08c:	e00b      	b.n	800f0a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f08e:	7bbb      	ldrb	r3, [r7, #14]
 800f090:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f094:	4613      	mov	r3, r2
 800f096:	009b      	lsls	r3, r3, #2
 800f098:	4413      	add	r3, r2
 800f09a:	009b      	lsls	r3, r3, #2
 800f09c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	4413      	add	r3, r2
 800f0a4:	3304      	adds	r3, #4
 800f0a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	2202      	movs	r2, #2
 800f0b2:	4619      	mov	r1, r3
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f000 fc37 	bl	800f928 <USBD_CtlSendData>
              break;
 800f0ba:	e06a      	b.n	800f192 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f0bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	da11      	bge.n	800f0e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f0c4:	7bbb      	ldrb	r3, [r7, #14]
 800f0c6:	f003 020f 	and.w	r2, r3, #15
 800f0ca:	6879      	ldr	r1, [r7, #4]
 800f0cc:	4613      	mov	r3, r2
 800f0ce:	009b      	lsls	r3, r3, #2
 800f0d0:	4413      	add	r3, r2
 800f0d2:	009b      	lsls	r3, r3, #2
 800f0d4:	440b      	add	r3, r1
 800f0d6:	3324      	adds	r3, #36	@ 0x24
 800f0d8:	881b      	ldrh	r3, [r3, #0]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d117      	bne.n	800f10e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f0de:	6839      	ldr	r1, [r7, #0]
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f000 fbb0 	bl	800f846 <USBD_CtlError>
                  break;
 800f0e6:	e054      	b.n	800f192 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f0e8:	7bbb      	ldrb	r3, [r7, #14]
 800f0ea:	f003 020f 	and.w	r2, r3, #15
 800f0ee:	6879      	ldr	r1, [r7, #4]
 800f0f0:	4613      	mov	r3, r2
 800f0f2:	009b      	lsls	r3, r3, #2
 800f0f4:	4413      	add	r3, r2
 800f0f6:	009b      	lsls	r3, r3, #2
 800f0f8:	440b      	add	r3, r1
 800f0fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f0fe:	881b      	ldrh	r3, [r3, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d104      	bne.n	800f10e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f104:	6839      	ldr	r1, [r7, #0]
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f000 fb9d 	bl	800f846 <USBD_CtlError>
                  break;
 800f10c:	e041      	b.n	800f192 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f10e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f112:	2b00      	cmp	r3, #0
 800f114:	da0b      	bge.n	800f12e <USBD_StdEPReq+0x2b2>
 800f116:	7bbb      	ldrb	r3, [r7, #14]
 800f118:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f11c:	4613      	mov	r3, r2
 800f11e:	009b      	lsls	r3, r3, #2
 800f120:	4413      	add	r3, r2
 800f122:	009b      	lsls	r3, r3, #2
 800f124:	3310      	adds	r3, #16
 800f126:	687a      	ldr	r2, [r7, #4]
 800f128:	4413      	add	r3, r2
 800f12a:	3304      	adds	r3, #4
 800f12c:	e00b      	b.n	800f146 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f12e:	7bbb      	ldrb	r3, [r7, #14]
 800f130:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f134:	4613      	mov	r3, r2
 800f136:	009b      	lsls	r3, r3, #2
 800f138:	4413      	add	r3, r2
 800f13a:	009b      	lsls	r3, r3, #2
 800f13c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f140:	687a      	ldr	r2, [r7, #4]
 800f142:	4413      	add	r3, r2
 800f144:	3304      	adds	r3, #4
 800f146:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f148:	7bbb      	ldrb	r3, [r7, #14]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d002      	beq.n	800f154 <USBD_StdEPReq+0x2d8>
 800f14e:	7bbb      	ldrb	r3, [r7, #14]
 800f150:	2b80      	cmp	r3, #128	@ 0x80
 800f152:	d103      	bne.n	800f15c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	2200      	movs	r2, #0
 800f158:	601a      	str	r2, [r3, #0]
 800f15a:	e00e      	b.n	800f17a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f15c:	7bbb      	ldrb	r3, [r7, #14]
 800f15e:	4619      	mov	r1, r3
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f001 f88d 	bl	8010280 <USBD_LL_IsStallEP>
 800f166:	4603      	mov	r3, r0
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d003      	beq.n	800f174 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	2201      	movs	r2, #1
 800f170:	601a      	str	r2, [r3, #0]
 800f172:	e002      	b.n	800f17a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	2200      	movs	r2, #0
 800f178:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	2202      	movs	r2, #2
 800f17e:	4619      	mov	r1, r3
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f000 fbd1 	bl	800f928 <USBD_CtlSendData>
              break;
 800f186:	e004      	b.n	800f192 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f188:	6839      	ldr	r1, [r7, #0]
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f000 fb5b 	bl	800f846 <USBD_CtlError>
              break;
 800f190:	bf00      	nop
          }
          break;
 800f192:	e004      	b.n	800f19e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f194:	6839      	ldr	r1, [r7, #0]
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f000 fb55 	bl	800f846 <USBD_CtlError>
          break;
 800f19c:	bf00      	nop
      }
      break;
 800f19e:	e005      	b.n	800f1ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f1a0:	6839      	ldr	r1, [r7, #0]
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f000 fb4f 	bl	800f846 <USBD_CtlError>
      break;
 800f1a8:	e000      	b.n	800f1ac <USBD_StdEPReq+0x330>
      break;
 800f1aa:	bf00      	nop
  }

  return ret;
 800f1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	3710      	adds	r7, #16
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}
	...

0800f1b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b084      	sub	sp, #16
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	885b      	ldrh	r3, [r3, #2]
 800f1d2:	0a1b      	lsrs	r3, r3, #8
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	3b01      	subs	r3, #1
 800f1d8:	2b06      	cmp	r3, #6
 800f1da:	f200 8128 	bhi.w	800f42e <USBD_GetDescriptor+0x276>
 800f1de:	a201      	add	r2, pc, #4	@ (adr r2, 800f1e4 <USBD_GetDescriptor+0x2c>)
 800f1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1e4:	0800f201 	.word	0x0800f201
 800f1e8:	0800f219 	.word	0x0800f219
 800f1ec:	0800f259 	.word	0x0800f259
 800f1f0:	0800f42f 	.word	0x0800f42f
 800f1f4:	0800f42f 	.word	0x0800f42f
 800f1f8:	0800f3cf 	.word	0x0800f3cf
 800f1fc:	0800f3fb 	.word	0x0800f3fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	687a      	ldr	r2, [r7, #4]
 800f20a:	7c12      	ldrb	r2, [r2, #16]
 800f20c:	f107 0108 	add.w	r1, r7, #8
 800f210:	4610      	mov	r0, r2
 800f212:	4798      	blx	r3
 800f214:	60f8      	str	r0, [r7, #12]
      break;
 800f216:	e112      	b.n	800f43e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	7c1b      	ldrb	r3, [r3, #16]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d10d      	bne.n	800f23c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f228:	f107 0208 	add.w	r2, r7, #8
 800f22c:	4610      	mov	r0, r2
 800f22e:	4798      	blx	r3
 800f230:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	3301      	adds	r3, #1
 800f236:	2202      	movs	r2, #2
 800f238:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f23a:	e100      	b.n	800f43e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f244:	f107 0208 	add.w	r2, r7, #8
 800f248:	4610      	mov	r0, r2
 800f24a:	4798      	blx	r3
 800f24c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	3301      	adds	r3, #1
 800f252:	2202      	movs	r2, #2
 800f254:	701a      	strb	r2, [r3, #0]
      break;
 800f256:	e0f2      	b.n	800f43e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	885b      	ldrh	r3, [r3, #2]
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	2b05      	cmp	r3, #5
 800f260:	f200 80ac 	bhi.w	800f3bc <USBD_GetDescriptor+0x204>
 800f264:	a201      	add	r2, pc, #4	@ (adr r2, 800f26c <USBD_GetDescriptor+0xb4>)
 800f266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f26a:	bf00      	nop
 800f26c:	0800f285 	.word	0x0800f285
 800f270:	0800f2b9 	.word	0x0800f2b9
 800f274:	0800f2ed 	.word	0x0800f2ed
 800f278:	0800f321 	.word	0x0800f321
 800f27c:	0800f355 	.word	0x0800f355
 800f280:	0800f389 	.word	0x0800f389
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f28a:	685b      	ldr	r3, [r3, #4]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d00b      	beq.n	800f2a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f296:	685b      	ldr	r3, [r3, #4]
 800f298:	687a      	ldr	r2, [r7, #4]
 800f29a:	7c12      	ldrb	r2, [r2, #16]
 800f29c:	f107 0108 	add.w	r1, r7, #8
 800f2a0:	4610      	mov	r0, r2
 800f2a2:	4798      	blx	r3
 800f2a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f2a6:	e091      	b.n	800f3cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f2a8:	6839      	ldr	r1, [r7, #0]
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f000 facb 	bl	800f846 <USBD_CtlError>
            err++;
 800f2b0:	7afb      	ldrb	r3, [r7, #11]
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	72fb      	strb	r3, [r7, #11]
          break;
 800f2b6:	e089      	b.n	800f3cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2be:	689b      	ldr	r3, [r3, #8]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d00b      	beq.n	800f2dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2ca:	689b      	ldr	r3, [r3, #8]
 800f2cc:	687a      	ldr	r2, [r7, #4]
 800f2ce:	7c12      	ldrb	r2, [r2, #16]
 800f2d0:	f107 0108 	add.w	r1, r7, #8
 800f2d4:	4610      	mov	r0, r2
 800f2d6:	4798      	blx	r3
 800f2d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f2da:	e077      	b.n	800f3cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f2dc:	6839      	ldr	r1, [r7, #0]
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f000 fab1 	bl	800f846 <USBD_CtlError>
            err++;
 800f2e4:	7afb      	ldrb	r3, [r7, #11]
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	72fb      	strb	r3, [r7, #11]
          break;
 800f2ea:	e06f      	b.n	800f3cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d00b      	beq.n	800f310 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2fe:	68db      	ldr	r3, [r3, #12]
 800f300:	687a      	ldr	r2, [r7, #4]
 800f302:	7c12      	ldrb	r2, [r2, #16]
 800f304:	f107 0108 	add.w	r1, r7, #8
 800f308:	4610      	mov	r0, r2
 800f30a:	4798      	blx	r3
 800f30c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f30e:	e05d      	b.n	800f3cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f310:	6839      	ldr	r1, [r7, #0]
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f000 fa97 	bl	800f846 <USBD_CtlError>
            err++;
 800f318:	7afb      	ldrb	r3, [r7, #11]
 800f31a:	3301      	adds	r3, #1
 800f31c:	72fb      	strb	r3, [r7, #11]
          break;
 800f31e:	e055      	b.n	800f3cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f326:	691b      	ldr	r3, [r3, #16]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d00b      	beq.n	800f344 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f332:	691b      	ldr	r3, [r3, #16]
 800f334:	687a      	ldr	r2, [r7, #4]
 800f336:	7c12      	ldrb	r2, [r2, #16]
 800f338:	f107 0108 	add.w	r1, r7, #8
 800f33c:	4610      	mov	r0, r2
 800f33e:	4798      	blx	r3
 800f340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f342:	e043      	b.n	800f3cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f344:	6839      	ldr	r1, [r7, #0]
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f000 fa7d 	bl	800f846 <USBD_CtlError>
            err++;
 800f34c:	7afb      	ldrb	r3, [r7, #11]
 800f34e:	3301      	adds	r3, #1
 800f350:	72fb      	strb	r3, [r7, #11]
          break;
 800f352:	e03b      	b.n	800f3cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f35a:	695b      	ldr	r3, [r3, #20]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d00b      	beq.n	800f378 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f366:	695b      	ldr	r3, [r3, #20]
 800f368:	687a      	ldr	r2, [r7, #4]
 800f36a:	7c12      	ldrb	r2, [r2, #16]
 800f36c:	f107 0108 	add.w	r1, r7, #8
 800f370:	4610      	mov	r0, r2
 800f372:	4798      	blx	r3
 800f374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f376:	e029      	b.n	800f3cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f378:	6839      	ldr	r1, [r7, #0]
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 fa63 	bl	800f846 <USBD_CtlError>
            err++;
 800f380:	7afb      	ldrb	r3, [r7, #11]
 800f382:	3301      	adds	r3, #1
 800f384:	72fb      	strb	r3, [r7, #11]
          break;
 800f386:	e021      	b.n	800f3cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f38e:	699b      	ldr	r3, [r3, #24]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d00b      	beq.n	800f3ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f39a:	699b      	ldr	r3, [r3, #24]
 800f39c:	687a      	ldr	r2, [r7, #4]
 800f39e:	7c12      	ldrb	r2, [r2, #16]
 800f3a0:	f107 0108 	add.w	r1, r7, #8
 800f3a4:	4610      	mov	r0, r2
 800f3a6:	4798      	blx	r3
 800f3a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f3aa:	e00f      	b.n	800f3cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f3ac:	6839      	ldr	r1, [r7, #0]
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f000 fa49 	bl	800f846 <USBD_CtlError>
            err++;
 800f3b4:	7afb      	ldrb	r3, [r7, #11]
 800f3b6:	3301      	adds	r3, #1
 800f3b8:	72fb      	strb	r3, [r7, #11]
          break;
 800f3ba:	e007      	b.n	800f3cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f3bc:	6839      	ldr	r1, [r7, #0]
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f000 fa41 	bl	800f846 <USBD_CtlError>
          err++;
 800f3c4:	7afb      	ldrb	r3, [r7, #11]
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f3ca:	bf00      	nop
      }
      break;
 800f3cc:	e037      	b.n	800f43e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	7c1b      	ldrb	r3, [r3, #16]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d109      	bne.n	800f3ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f3de:	f107 0208 	add.w	r2, r7, #8
 800f3e2:	4610      	mov	r0, r2
 800f3e4:	4798      	blx	r3
 800f3e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f3e8:	e029      	b.n	800f43e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f3ea:	6839      	ldr	r1, [r7, #0]
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f000 fa2a 	bl	800f846 <USBD_CtlError>
        err++;
 800f3f2:	7afb      	ldrb	r3, [r7, #11]
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	72fb      	strb	r3, [r7, #11]
      break;
 800f3f8:	e021      	b.n	800f43e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	7c1b      	ldrb	r3, [r3, #16]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d10d      	bne.n	800f41e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f40a:	f107 0208 	add.w	r2, r7, #8
 800f40e:	4610      	mov	r0, r2
 800f410:	4798      	blx	r3
 800f412:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	3301      	adds	r3, #1
 800f418:	2207      	movs	r2, #7
 800f41a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f41c:	e00f      	b.n	800f43e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f41e:	6839      	ldr	r1, [r7, #0]
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f000 fa10 	bl	800f846 <USBD_CtlError>
        err++;
 800f426:	7afb      	ldrb	r3, [r7, #11]
 800f428:	3301      	adds	r3, #1
 800f42a:	72fb      	strb	r3, [r7, #11]
      break;
 800f42c:	e007      	b.n	800f43e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f42e:	6839      	ldr	r1, [r7, #0]
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 fa08 	bl	800f846 <USBD_CtlError>
      err++;
 800f436:	7afb      	ldrb	r3, [r7, #11]
 800f438:	3301      	adds	r3, #1
 800f43a:	72fb      	strb	r3, [r7, #11]
      break;
 800f43c:	bf00      	nop
  }

  if (err != 0U)
 800f43e:	7afb      	ldrb	r3, [r7, #11]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d11e      	bne.n	800f482 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	88db      	ldrh	r3, [r3, #6]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d016      	beq.n	800f47a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f44c:	893b      	ldrh	r3, [r7, #8]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d00e      	beq.n	800f470 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	88da      	ldrh	r2, [r3, #6]
 800f456:	893b      	ldrh	r3, [r7, #8]
 800f458:	4293      	cmp	r3, r2
 800f45a:	bf28      	it	cs
 800f45c:	4613      	movcs	r3, r2
 800f45e:	b29b      	uxth	r3, r3
 800f460:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f462:	893b      	ldrh	r3, [r7, #8]
 800f464:	461a      	mov	r2, r3
 800f466:	68f9      	ldr	r1, [r7, #12]
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f000 fa5d 	bl	800f928 <USBD_CtlSendData>
 800f46e:	e009      	b.n	800f484 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f470:	6839      	ldr	r1, [r7, #0]
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f000 f9e7 	bl	800f846 <USBD_CtlError>
 800f478:	e004      	b.n	800f484 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 faae 	bl	800f9dc <USBD_CtlSendStatus>
 800f480:	e000      	b.n	800f484 <USBD_GetDescriptor+0x2cc>
    return;
 800f482:	bf00      	nop
  }
}
 800f484:	3710      	adds	r7, #16
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}
 800f48a:	bf00      	nop

0800f48c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	889b      	ldrh	r3, [r3, #4]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d131      	bne.n	800f502 <USBD_SetAddress+0x76>
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	88db      	ldrh	r3, [r3, #6]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d12d      	bne.n	800f502 <USBD_SetAddress+0x76>
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	885b      	ldrh	r3, [r3, #2]
 800f4aa:	2b7f      	cmp	r3, #127	@ 0x7f
 800f4ac:	d829      	bhi.n	800f502 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	885b      	ldrh	r3, [r3, #2]
 800f4b2:	b2db      	uxtb	r3, r3
 800f4b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f4b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4c0:	b2db      	uxtb	r3, r3
 800f4c2:	2b03      	cmp	r3, #3
 800f4c4:	d104      	bne.n	800f4d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f4c6:	6839      	ldr	r1, [r7, #0]
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f000 f9bc 	bl	800f846 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4ce:	e01d      	b.n	800f50c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	7bfa      	ldrb	r2, [r7, #15]
 800f4d4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f4d8:	7bfb      	ldrb	r3, [r7, #15]
 800f4da:	4619      	mov	r1, r3
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f000 fefb 	bl	80102d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 fa7a 	bl	800f9dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f4e8:	7bfb      	ldrb	r3, [r7, #15]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d004      	beq.n	800f4f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2202      	movs	r2, #2
 800f4f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4f6:	e009      	b.n	800f50c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f500:	e004      	b.n	800f50c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f502:	6839      	ldr	r1, [r7, #0]
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f000 f99e 	bl	800f846 <USBD_CtlError>
  }
}
 800f50a:	bf00      	nop
 800f50c:	bf00      	nop
 800f50e:	3710      	adds	r7, #16
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b084      	sub	sp, #16
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f51e:	2300      	movs	r3, #0
 800f520:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	885b      	ldrh	r3, [r3, #2]
 800f526:	b2da      	uxtb	r2, r3
 800f528:	4b4e      	ldr	r3, [pc, #312]	@ (800f664 <USBD_SetConfig+0x150>)
 800f52a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f52c:	4b4d      	ldr	r3, [pc, #308]	@ (800f664 <USBD_SetConfig+0x150>)
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	2b01      	cmp	r3, #1
 800f532:	d905      	bls.n	800f540 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f534:	6839      	ldr	r1, [r7, #0]
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f000 f985 	bl	800f846 <USBD_CtlError>
    return USBD_FAIL;
 800f53c:	2303      	movs	r3, #3
 800f53e:	e08c      	b.n	800f65a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f546:	b2db      	uxtb	r3, r3
 800f548:	2b02      	cmp	r3, #2
 800f54a:	d002      	beq.n	800f552 <USBD_SetConfig+0x3e>
 800f54c:	2b03      	cmp	r3, #3
 800f54e:	d029      	beq.n	800f5a4 <USBD_SetConfig+0x90>
 800f550:	e075      	b.n	800f63e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f552:	4b44      	ldr	r3, [pc, #272]	@ (800f664 <USBD_SetConfig+0x150>)
 800f554:	781b      	ldrb	r3, [r3, #0]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d020      	beq.n	800f59c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f55a:	4b42      	ldr	r3, [pc, #264]	@ (800f664 <USBD_SetConfig+0x150>)
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	461a      	mov	r2, r3
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f564:	4b3f      	ldr	r3, [pc, #252]	@ (800f664 <USBD_SetConfig+0x150>)
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	4619      	mov	r1, r3
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f7fe ffe3 	bl	800e536 <USBD_SetClassConfig>
 800f570:	4603      	mov	r3, r0
 800f572:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f574:	7bfb      	ldrb	r3, [r7, #15]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d008      	beq.n	800f58c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f57a:	6839      	ldr	r1, [r7, #0]
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f000 f962 	bl	800f846 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2202      	movs	r2, #2
 800f586:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f58a:	e065      	b.n	800f658 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f000 fa25 	bl	800f9dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2203      	movs	r2, #3
 800f596:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f59a:	e05d      	b.n	800f658 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f000 fa1d 	bl	800f9dc <USBD_CtlSendStatus>
      break;
 800f5a2:	e059      	b.n	800f658 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f5a4:	4b2f      	ldr	r3, [pc, #188]	@ (800f664 <USBD_SetConfig+0x150>)
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d112      	bne.n	800f5d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2202      	movs	r2, #2
 800f5b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f5b4:	4b2b      	ldr	r3, [pc, #172]	@ (800f664 <USBD_SetConfig+0x150>)
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f5be:	4b29      	ldr	r3, [pc, #164]	@ (800f664 <USBD_SetConfig+0x150>)
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f7fe ffd2 	bl	800e56e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f000 fa06 	bl	800f9dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f5d0:	e042      	b.n	800f658 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f5d2:	4b24      	ldr	r3, [pc, #144]	@ (800f664 <USBD_SetConfig+0x150>)
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	461a      	mov	r2, r3
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	685b      	ldr	r3, [r3, #4]
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	d02a      	beq.n	800f636 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	685b      	ldr	r3, [r3, #4]
 800f5e4:	b2db      	uxtb	r3, r3
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f7fe ffc0 	bl	800e56e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f5ee:	4b1d      	ldr	r3, [pc, #116]	@ (800f664 <USBD_SetConfig+0x150>)
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f5f8:	4b1a      	ldr	r3, [pc, #104]	@ (800f664 <USBD_SetConfig+0x150>)
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	4619      	mov	r1, r3
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f7fe ff99 	bl	800e536 <USBD_SetClassConfig>
 800f604:	4603      	mov	r3, r0
 800f606:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f608:	7bfb      	ldrb	r3, [r7, #15]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d00f      	beq.n	800f62e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f60e:	6839      	ldr	r1, [r7, #0]
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f000 f918 	bl	800f846 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	685b      	ldr	r3, [r3, #4]
 800f61a:	b2db      	uxtb	r3, r3
 800f61c:	4619      	mov	r1, r3
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f7fe ffa5 	bl	800e56e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2202      	movs	r2, #2
 800f628:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f62c:	e014      	b.n	800f658 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f000 f9d4 	bl	800f9dc <USBD_CtlSendStatus>
      break;
 800f634:	e010      	b.n	800f658 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f000 f9d0 	bl	800f9dc <USBD_CtlSendStatus>
      break;
 800f63c:	e00c      	b.n	800f658 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f63e:	6839      	ldr	r1, [r7, #0]
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f000 f900 	bl	800f846 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f646:	4b07      	ldr	r3, [pc, #28]	@ (800f664 <USBD_SetConfig+0x150>)
 800f648:	781b      	ldrb	r3, [r3, #0]
 800f64a:	4619      	mov	r1, r3
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f7fe ff8e 	bl	800e56e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f652:	2303      	movs	r3, #3
 800f654:	73fb      	strb	r3, [r7, #15]
      break;
 800f656:	bf00      	nop
  }

  return ret;
 800f658:	7bfb      	ldrb	r3, [r7, #15]
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3710      	adds	r7, #16
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
 800f662:	bf00      	nop
 800f664:	20001294 	.word	0x20001294

0800f668 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
 800f670:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	88db      	ldrh	r3, [r3, #6]
 800f676:	2b01      	cmp	r3, #1
 800f678:	d004      	beq.n	800f684 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f67a:	6839      	ldr	r1, [r7, #0]
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f000 f8e2 	bl	800f846 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f682:	e023      	b.n	800f6cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	2b02      	cmp	r3, #2
 800f68e:	dc02      	bgt.n	800f696 <USBD_GetConfig+0x2e>
 800f690:	2b00      	cmp	r3, #0
 800f692:	dc03      	bgt.n	800f69c <USBD_GetConfig+0x34>
 800f694:	e015      	b.n	800f6c2 <USBD_GetConfig+0x5a>
 800f696:	2b03      	cmp	r3, #3
 800f698:	d00b      	beq.n	800f6b2 <USBD_GetConfig+0x4a>
 800f69a:	e012      	b.n	800f6c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	3308      	adds	r3, #8
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f000 f93c 	bl	800f928 <USBD_CtlSendData>
        break;
 800f6b0:	e00c      	b.n	800f6cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	3304      	adds	r3, #4
 800f6b6:	2201      	movs	r2, #1
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f000 f934 	bl	800f928 <USBD_CtlSendData>
        break;
 800f6c0:	e004      	b.n	800f6cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f6c2:	6839      	ldr	r1, [r7, #0]
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f000 f8be 	bl	800f846 <USBD_CtlError>
        break;
 800f6ca:	bf00      	nop
}
 800f6cc:	bf00      	nop
 800f6ce:	3708      	adds	r7, #8
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	3b01      	subs	r3, #1
 800f6e8:	2b02      	cmp	r3, #2
 800f6ea:	d81e      	bhi.n	800f72a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	88db      	ldrh	r3, [r3, #6]
 800f6f0:	2b02      	cmp	r3, #2
 800f6f2:	d004      	beq.n	800f6fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f6f4:	6839      	ldr	r1, [r7, #0]
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f000 f8a5 	bl	800f846 <USBD_CtlError>
        break;
 800f6fc:	e01a      	b.n	800f734 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2201      	movs	r2, #1
 800f702:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d005      	beq.n	800f71a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	68db      	ldr	r3, [r3, #12]
 800f712:	f043 0202 	orr.w	r2, r3, #2
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	330c      	adds	r3, #12
 800f71e:	2202      	movs	r2, #2
 800f720:	4619      	mov	r1, r3
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	f000 f900 	bl	800f928 <USBD_CtlSendData>
      break;
 800f728:	e004      	b.n	800f734 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f72a:	6839      	ldr	r1, [r7, #0]
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f000 f88a 	bl	800f846 <USBD_CtlError>
      break;
 800f732:	bf00      	nop
  }
}
 800f734:	bf00      	nop
 800f736:	3708      	adds	r7, #8
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	885b      	ldrh	r3, [r3, #2]
 800f74a:	2b01      	cmp	r3, #1
 800f74c:	d107      	bne.n	800f75e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2201      	movs	r2, #1
 800f752:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f000 f940 	bl	800f9dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f75c:	e013      	b.n	800f786 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	885b      	ldrh	r3, [r3, #2]
 800f762:	2b02      	cmp	r3, #2
 800f764:	d10b      	bne.n	800f77e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	889b      	ldrh	r3, [r3, #4]
 800f76a:	0a1b      	lsrs	r3, r3, #8
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	b2da      	uxtb	r2, r3
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f000 f930 	bl	800f9dc <USBD_CtlSendStatus>
}
 800f77c:	e003      	b.n	800f786 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f77e:	6839      	ldr	r1, [r7, #0]
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f000 f860 	bl	800f846 <USBD_CtlError>
}
 800f786:	bf00      	nop
 800f788:	3708      	adds	r7, #8
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}

0800f78e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f78e:	b580      	push	{r7, lr}
 800f790:	b082      	sub	sp, #8
 800f792:	af00      	add	r7, sp, #0
 800f794:	6078      	str	r0, [r7, #4]
 800f796:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f79e:	b2db      	uxtb	r3, r3
 800f7a0:	3b01      	subs	r3, #1
 800f7a2:	2b02      	cmp	r3, #2
 800f7a4:	d80b      	bhi.n	800f7be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	885b      	ldrh	r3, [r3, #2]
 800f7aa:	2b01      	cmp	r3, #1
 800f7ac:	d10c      	bne.n	800f7c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 f910 	bl	800f9dc <USBD_CtlSendStatus>
      }
      break;
 800f7bc:	e004      	b.n	800f7c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f7be:	6839      	ldr	r1, [r7, #0]
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f000 f840 	bl	800f846 <USBD_CtlError>
      break;
 800f7c6:	e000      	b.n	800f7ca <USBD_ClrFeature+0x3c>
      break;
 800f7c8:	bf00      	nop
  }
}
 800f7ca:	bf00      	nop
 800f7cc:	3708      	adds	r7, #8
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}

0800f7d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f7d2:	b580      	push	{r7, lr}
 800f7d4:	b084      	sub	sp, #16
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	6078      	str	r0, [r7, #4]
 800f7da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	781a      	ldrb	r2, [r3, #0]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	781a      	ldrb	r2, [r3, #0]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	3301      	adds	r3, #1
 800f7fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f7fc:	68f8      	ldr	r0, [r7, #12]
 800f7fe:	f7ff fa40 	bl	800ec82 <SWAPBYTE>
 800f802:	4603      	mov	r3, r0
 800f804:	461a      	mov	r2, r3
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	3301      	adds	r3, #1
 800f80e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	3301      	adds	r3, #1
 800f814:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f816:	68f8      	ldr	r0, [r7, #12]
 800f818:	f7ff fa33 	bl	800ec82 <SWAPBYTE>
 800f81c:	4603      	mov	r3, r0
 800f81e:	461a      	mov	r2, r3
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	3301      	adds	r3, #1
 800f828:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	3301      	adds	r3, #1
 800f82e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f830:	68f8      	ldr	r0, [r7, #12]
 800f832:	f7ff fa26 	bl	800ec82 <SWAPBYTE>
 800f836:	4603      	mov	r3, r0
 800f838:	461a      	mov	r2, r3
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	80da      	strh	r2, [r3, #6]
}
 800f83e:	bf00      	nop
 800f840:	3710      	adds	r7, #16
 800f842:	46bd      	mov	sp, r7
 800f844:	bd80      	pop	{r7, pc}

0800f846 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f846:	b580      	push	{r7, lr}
 800f848:	b082      	sub	sp, #8
 800f84a:	af00      	add	r7, sp, #0
 800f84c:	6078      	str	r0, [r7, #4]
 800f84e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f850:	2180      	movs	r1, #128	@ 0x80
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f000 fcd6 	bl	8010204 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f858:	2100      	movs	r1, #0
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f000 fcd2 	bl	8010204 <USBD_LL_StallEP>
}
 800f860:	bf00      	nop
 800f862:	3708      	adds	r7, #8
 800f864:	46bd      	mov	sp, r7
 800f866:	bd80      	pop	{r7, pc}

0800f868 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b086      	sub	sp, #24
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	60f8      	str	r0, [r7, #12]
 800f870:	60b9      	str	r1, [r7, #8]
 800f872:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f874:	2300      	movs	r3, #0
 800f876:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d036      	beq.n	800f8ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f882:	6938      	ldr	r0, [r7, #16]
 800f884:	f000 f836 	bl	800f8f4 <USBD_GetLen>
 800f888:	4603      	mov	r3, r0
 800f88a:	3301      	adds	r3, #1
 800f88c:	b29b      	uxth	r3, r3
 800f88e:	005b      	lsls	r3, r3, #1
 800f890:	b29a      	uxth	r2, r3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f896:	7dfb      	ldrb	r3, [r7, #23]
 800f898:	68ba      	ldr	r2, [r7, #8]
 800f89a:	4413      	add	r3, r2
 800f89c:	687a      	ldr	r2, [r7, #4]
 800f89e:	7812      	ldrb	r2, [r2, #0]
 800f8a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800f8a2:	7dfb      	ldrb	r3, [r7, #23]
 800f8a4:	3301      	adds	r3, #1
 800f8a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f8a8:	7dfb      	ldrb	r3, [r7, #23]
 800f8aa:	68ba      	ldr	r2, [r7, #8]
 800f8ac:	4413      	add	r3, r2
 800f8ae:	2203      	movs	r2, #3
 800f8b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800f8b2:	7dfb      	ldrb	r3, [r7, #23]
 800f8b4:	3301      	adds	r3, #1
 800f8b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f8b8:	e013      	b.n	800f8e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f8ba:	7dfb      	ldrb	r3, [r7, #23]
 800f8bc:	68ba      	ldr	r2, [r7, #8]
 800f8be:	4413      	add	r3, r2
 800f8c0:	693a      	ldr	r2, [r7, #16]
 800f8c2:	7812      	ldrb	r2, [r2, #0]
 800f8c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f8c6:	693b      	ldr	r3, [r7, #16]
 800f8c8:	3301      	adds	r3, #1
 800f8ca:	613b      	str	r3, [r7, #16]
    idx++;
 800f8cc:	7dfb      	ldrb	r3, [r7, #23]
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f8d2:	7dfb      	ldrb	r3, [r7, #23]
 800f8d4:	68ba      	ldr	r2, [r7, #8]
 800f8d6:	4413      	add	r3, r2
 800f8d8:	2200      	movs	r2, #0
 800f8da:	701a      	strb	r2, [r3, #0]
    idx++;
 800f8dc:	7dfb      	ldrb	r3, [r7, #23]
 800f8de:	3301      	adds	r3, #1
 800f8e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	781b      	ldrb	r3, [r3, #0]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d1e7      	bne.n	800f8ba <USBD_GetString+0x52>
 800f8ea:	e000      	b.n	800f8ee <USBD_GetString+0x86>
    return;
 800f8ec:	bf00      	nop
  }
}
 800f8ee:	3718      	adds	r7, #24
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	bd80      	pop	{r7, pc}

0800f8f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f8f4:	b480      	push	{r7}
 800f8f6:	b085      	sub	sp, #20
 800f8f8:	af00      	add	r7, sp, #0
 800f8fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f904:	e005      	b.n	800f912 <USBD_GetLen+0x1e>
  {
    len++;
 800f906:	7bfb      	ldrb	r3, [r7, #15]
 800f908:	3301      	adds	r3, #1
 800f90a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	3301      	adds	r3, #1
 800f910:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	781b      	ldrb	r3, [r3, #0]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d1f5      	bne.n	800f906 <USBD_GetLen+0x12>
  }

  return len;
 800f91a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3714      	adds	r7, #20
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr

0800f928 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	60f8      	str	r0, [r7, #12]
 800f930:	60b9      	str	r1, [r7, #8]
 800f932:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2202      	movs	r2, #2
 800f938:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	687a      	ldr	r2, [r7, #4]
 800f940:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	687a      	ldr	r2, [r7, #4]
 800f946:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	68ba      	ldr	r2, [r7, #8]
 800f94c:	2100      	movs	r1, #0
 800f94e:	68f8      	ldr	r0, [r7, #12]
 800f950:	f000 fce1 	bl	8010316 <USBD_LL_Transmit>

  return USBD_OK;
 800f954:	2300      	movs	r3, #0
}
 800f956:	4618      	mov	r0, r3
 800f958:	3710      	adds	r7, #16
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f95e:	b580      	push	{r7, lr}
 800f960:	b084      	sub	sp, #16
 800f962:	af00      	add	r7, sp, #0
 800f964:	60f8      	str	r0, [r7, #12]
 800f966:	60b9      	str	r1, [r7, #8]
 800f968:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	68ba      	ldr	r2, [r7, #8]
 800f96e:	2100      	movs	r1, #0
 800f970:	68f8      	ldr	r0, [r7, #12]
 800f972:	f000 fcd0 	bl	8010316 <USBD_LL_Transmit>

  return USBD_OK;
 800f976:	2300      	movs	r3, #0
}
 800f978:	4618      	mov	r0, r3
 800f97a:	3710      	adds	r7, #16
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	60f8      	str	r0, [r7, #12]
 800f988:	60b9      	str	r1, [r7, #8]
 800f98a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2203      	movs	r2, #3
 800f990:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	687a      	ldr	r2, [r7, #4]
 800f998:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	687a      	ldr	r2, [r7, #4]
 800f9a0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	68ba      	ldr	r2, [r7, #8]
 800f9a8:	2100      	movs	r1, #0
 800f9aa:	68f8      	ldr	r0, [r7, #12]
 800f9ac:	f000 fcd4 	bl	8010358 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f9b0:	2300      	movs	r3, #0
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3710      	adds	r7, #16
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b084      	sub	sp, #16
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	60f8      	str	r0, [r7, #12]
 800f9c2:	60b9      	str	r1, [r7, #8]
 800f9c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	68ba      	ldr	r2, [r7, #8]
 800f9ca:	2100      	movs	r1, #0
 800f9cc:	68f8      	ldr	r0, [r7, #12]
 800f9ce:	f000 fcc3 	bl	8010358 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f9d2:	2300      	movs	r3, #0
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3710      	adds	r7, #16
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2204      	movs	r2, #4
 800f9e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	2100      	movs	r1, #0
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f000 fc8f 	bl	8010316 <USBD_LL_Transmit>

  return USBD_OK;
 800f9f8:	2300      	movs	r3, #0
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	3708      	adds	r7, #8
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}

0800fa02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fa02:	b580      	push	{r7, lr}
 800fa04:	b082      	sub	sp, #8
 800fa06:	af00      	add	r7, sp, #0
 800fa08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	2205      	movs	r2, #5
 800fa0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fa12:	2300      	movs	r3, #0
 800fa14:	2200      	movs	r2, #0
 800fa16:	2100      	movs	r1, #0
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f000 fc9d 	bl	8010358 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fa1e:	2300      	movs	r3, #0
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3708      	adds	r7, #8
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}

0800fa28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	4912      	ldr	r1, [pc, #72]	@ (800fa78 <MX_USB_DEVICE_Init+0x50>)
 800fa30:	4812      	ldr	r0, [pc, #72]	@ (800fa7c <MX_USB_DEVICE_Init+0x54>)
 800fa32:	f7fe fd03 	bl	800e43c <USBD_Init>
 800fa36:	4603      	mov	r3, r0
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d001      	beq.n	800fa40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fa3c:	f7f2 ff12 	bl	8002864 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fa40:	490f      	ldr	r1, [pc, #60]	@ (800fa80 <MX_USB_DEVICE_Init+0x58>)
 800fa42:	480e      	ldr	r0, [pc, #56]	@ (800fa7c <MX_USB_DEVICE_Init+0x54>)
 800fa44:	f7fe fd2a 	bl	800e49c <USBD_RegisterClass>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d001      	beq.n	800fa52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fa4e:	f7f2 ff09 	bl	8002864 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fa52:	490c      	ldr	r1, [pc, #48]	@ (800fa84 <MX_USB_DEVICE_Init+0x5c>)
 800fa54:	4809      	ldr	r0, [pc, #36]	@ (800fa7c <MX_USB_DEVICE_Init+0x54>)
 800fa56:	f7fe fc21 	bl	800e29c <USBD_CDC_RegisterInterface>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d001      	beq.n	800fa64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fa60:	f7f2 ff00 	bl	8002864 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fa64:	4805      	ldr	r0, [pc, #20]	@ (800fa7c <MX_USB_DEVICE_Init+0x54>)
 800fa66:	f7fe fd4f 	bl	800e508 <USBD_Start>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d001      	beq.n	800fa74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fa70:	f7f2 fef8 	bl	8002864 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fa74:	bf00      	nop
 800fa76:	bd80      	pop	{r7, pc}
 800fa78:	20000108 	.word	0x20000108
 800fa7c:	20001298 	.word	0x20001298
 800fa80:	20000074 	.word	0x20000074
 800fa84:	200000f4 	.word	0x200000f4

0800fa88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	4905      	ldr	r1, [pc, #20]	@ (800faa4 <CDC_Init_FS+0x1c>)
 800fa90:	4805      	ldr	r0, [pc, #20]	@ (800faa8 <CDC_Init_FS+0x20>)
 800fa92:	f7fe fc1d 	bl	800e2d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fa96:	4905      	ldr	r1, [pc, #20]	@ (800faac <CDC_Init_FS+0x24>)
 800fa98:	4803      	ldr	r0, [pc, #12]	@ (800faa8 <CDC_Init_FS+0x20>)
 800fa9a:	f7fe fc3b 	bl	800e314 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fa9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	bd80      	pop	{r7, pc}
 800faa4:	20001d74 	.word	0x20001d74
 800faa8:	20001298 	.word	0x20001298
 800faac:	20001574 	.word	0x20001574

0800fab0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fab0:	b480      	push	{r7}
 800fab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fab4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr

0800fac0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b083      	sub	sp, #12
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	4603      	mov	r3, r0
 800fac8:	6039      	str	r1, [r7, #0]
 800faca:	71fb      	strb	r3, [r7, #7]
 800facc:	4613      	mov	r3, r2
 800face:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fad0:	79fb      	ldrb	r3, [r7, #7]
 800fad2:	2b23      	cmp	r3, #35	@ 0x23
 800fad4:	d84a      	bhi.n	800fb6c <CDC_Control_FS+0xac>
 800fad6:	a201      	add	r2, pc, #4	@ (adr r2, 800fadc <CDC_Control_FS+0x1c>)
 800fad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fadc:	0800fb6d 	.word	0x0800fb6d
 800fae0:	0800fb6d 	.word	0x0800fb6d
 800fae4:	0800fb6d 	.word	0x0800fb6d
 800fae8:	0800fb6d 	.word	0x0800fb6d
 800faec:	0800fb6d 	.word	0x0800fb6d
 800faf0:	0800fb6d 	.word	0x0800fb6d
 800faf4:	0800fb6d 	.word	0x0800fb6d
 800faf8:	0800fb6d 	.word	0x0800fb6d
 800fafc:	0800fb6d 	.word	0x0800fb6d
 800fb00:	0800fb6d 	.word	0x0800fb6d
 800fb04:	0800fb6d 	.word	0x0800fb6d
 800fb08:	0800fb6d 	.word	0x0800fb6d
 800fb0c:	0800fb6d 	.word	0x0800fb6d
 800fb10:	0800fb6d 	.word	0x0800fb6d
 800fb14:	0800fb6d 	.word	0x0800fb6d
 800fb18:	0800fb6d 	.word	0x0800fb6d
 800fb1c:	0800fb6d 	.word	0x0800fb6d
 800fb20:	0800fb6d 	.word	0x0800fb6d
 800fb24:	0800fb6d 	.word	0x0800fb6d
 800fb28:	0800fb6d 	.word	0x0800fb6d
 800fb2c:	0800fb6d 	.word	0x0800fb6d
 800fb30:	0800fb6d 	.word	0x0800fb6d
 800fb34:	0800fb6d 	.word	0x0800fb6d
 800fb38:	0800fb6d 	.word	0x0800fb6d
 800fb3c:	0800fb6d 	.word	0x0800fb6d
 800fb40:	0800fb6d 	.word	0x0800fb6d
 800fb44:	0800fb6d 	.word	0x0800fb6d
 800fb48:	0800fb6d 	.word	0x0800fb6d
 800fb4c:	0800fb6d 	.word	0x0800fb6d
 800fb50:	0800fb6d 	.word	0x0800fb6d
 800fb54:	0800fb6d 	.word	0x0800fb6d
 800fb58:	0800fb6d 	.word	0x0800fb6d
 800fb5c:	0800fb6d 	.word	0x0800fb6d
 800fb60:	0800fb6d 	.word	0x0800fb6d
 800fb64:	0800fb6d 	.word	0x0800fb6d
 800fb68:	0800fb6d 	.word	0x0800fb6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fb6c:	bf00      	nop
  }

  return (USBD_OK);
 800fb6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	370c      	adds	r7, #12
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr

0800fb7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fb86:	6879      	ldr	r1, [r7, #4]
 800fb88:	4805      	ldr	r0, [pc, #20]	@ (800fba0 <CDC_Receive_FS+0x24>)
 800fb8a:	f7fe fbc3 	bl	800e314 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fb8e:	4804      	ldr	r0, [pc, #16]	@ (800fba0 <CDC_Receive_FS+0x24>)
 800fb90:	f7fe fc1e 	bl	800e3d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fb94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	3708      	adds	r7, #8
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}
 800fb9e:	bf00      	nop
 800fba0:	20001298 	.word	0x20001298

0800fba4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b084      	sub	sp, #16
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	460b      	mov	r3, r1
 800fbae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fbb4:	4b0d      	ldr	r3, [pc, #52]	@ (800fbec <CDC_Transmit_FS+0x48>)
 800fbb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fbba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d001      	beq.n	800fbca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	e00b      	b.n	800fbe2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fbca:	887b      	ldrh	r3, [r7, #2]
 800fbcc:	461a      	mov	r2, r3
 800fbce:	6879      	ldr	r1, [r7, #4]
 800fbd0:	4806      	ldr	r0, [pc, #24]	@ (800fbec <CDC_Transmit_FS+0x48>)
 800fbd2:	f7fe fb7d 	bl	800e2d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fbd6:	4805      	ldr	r0, [pc, #20]	@ (800fbec <CDC_Transmit_FS+0x48>)
 800fbd8:	f7fe fbba 	bl	800e350 <USBD_CDC_TransmitPacket>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3710      	adds	r7, #16
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	20001298 	.word	0x20001298

0800fbf0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b087      	sub	sp, #28
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	60f8      	str	r0, [r7, #12]
 800fbf8:	60b9      	str	r1, [r7, #8]
 800fbfa:	4613      	mov	r3, r2
 800fbfc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fc02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	371c      	adds	r7, #28
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc10:	4770      	bx	lr
	...

0800fc14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc14:	b480      	push	{r7}
 800fc16:	b083      	sub	sp, #12
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	6039      	str	r1, [r7, #0]
 800fc1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	2212      	movs	r2, #18
 800fc24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800fc26:	4b03      	ldr	r3, [pc, #12]	@ (800fc34 <USBD_FS_DeviceDescriptor+0x20>)
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	370c      	adds	r7, #12
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc32:	4770      	bx	lr
 800fc34:	20000124 	.word	0x20000124

0800fc38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b083      	sub	sp, #12
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	4603      	mov	r3, r0
 800fc40:	6039      	str	r1, [r7, #0]
 800fc42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	2204      	movs	r2, #4
 800fc48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fc4a:	4b03      	ldr	r3, [pc, #12]	@ (800fc58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800fc4c:	4618      	mov	r0, r3
 800fc4e:	370c      	adds	r7, #12
 800fc50:	46bd      	mov	sp, r7
 800fc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc56:	4770      	bx	lr
 800fc58:	20000138 	.word	0x20000138

0800fc5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	4603      	mov	r3, r0
 800fc64:	6039      	str	r1, [r7, #0]
 800fc66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fc68:	79fb      	ldrb	r3, [r7, #7]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d105      	bne.n	800fc7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fc6e:	683a      	ldr	r2, [r7, #0]
 800fc70:	4907      	ldr	r1, [pc, #28]	@ (800fc90 <USBD_FS_ProductStrDescriptor+0x34>)
 800fc72:	4808      	ldr	r0, [pc, #32]	@ (800fc94 <USBD_FS_ProductStrDescriptor+0x38>)
 800fc74:	f7ff fdf8 	bl	800f868 <USBD_GetString>
 800fc78:	e004      	b.n	800fc84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800fc7a:	683a      	ldr	r2, [r7, #0]
 800fc7c:	4904      	ldr	r1, [pc, #16]	@ (800fc90 <USBD_FS_ProductStrDescriptor+0x34>)
 800fc7e:	4805      	ldr	r0, [pc, #20]	@ (800fc94 <USBD_FS_ProductStrDescriptor+0x38>)
 800fc80:	f7ff fdf2 	bl	800f868 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fc84:	4b02      	ldr	r3, [pc, #8]	@ (800fc90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3708      	adds	r7, #8
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	20002574 	.word	0x20002574
 800fc94:	08013518 	.word	0x08013518

0800fc98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	4603      	mov	r3, r0
 800fca0:	6039      	str	r1, [r7, #0]
 800fca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800fca4:	683a      	ldr	r2, [r7, #0]
 800fca6:	4904      	ldr	r1, [pc, #16]	@ (800fcb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800fca8:	4804      	ldr	r0, [pc, #16]	@ (800fcbc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800fcaa:	f7ff fddd 	bl	800f868 <USBD_GetString>
  return USBD_StrDesc;
 800fcae:	4b02      	ldr	r3, [pc, #8]	@ (800fcb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	3708      	adds	r7, #8
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	bd80      	pop	{r7, pc}
 800fcb8:	20002574 	.word	0x20002574
 800fcbc:	08013530 	.word	0x08013530

0800fcc0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b082      	sub	sp, #8
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	6039      	str	r1, [r7, #0]
 800fcca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	221a      	movs	r2, #26
 800fcd0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800fcd2:	f000 f843 	bl	800fd5c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fcd6:	4b02      	ldr	r3, [pc, #8]	@ (800fce0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	3708      	adds	r7, #8
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}
 800fce0:	2000013c 	.word	0x2000013c

0800fce4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b082      	sub	sp, #8
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	4603      	mov	r3, r0
 800fcec:	6039      	str	r1, [r7, #0]
 800fcee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fcf0:	79fb      	ldrb	r3, [r7, #7]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d105      	bne.n	800fd02 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fcf6:	683a      	ldr	r2, [r7, #0]
 800fcf8:	4907      	ldr	r1, [pc, #28]	@ (800fd18 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fcfa:	4808      	ldr	r0, [pc, #32]	@ (800fd1c <USBD_FS_ConfigStrDescriptor+0x38>)
 800fcfc:	f7ff fdb4 	bl	800f868 <USBD_GetString>
 800fd00:	e004      	b.n	800fd0c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fd02:	683a      	ldr	r2, [r7, #0]
 800fd04:	4904      	ldr	r1, [pc, #16]	@ (800fd18 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fd06:	4805      	ldr	r0, [pc, #20]	@ (800fd1c <USBD_FS_ConfigStrDescriptor+0x38>)
 800fd08:	f7ff fdae 	bl	800f868 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fd0c:	4b02      	ldr	r3, [pc, #8]	@ (800fd18 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	3708      	adds	r7, #8
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}
 800fd16:	bf00      	nop
 800fd18:	20002574 	.word	0x20002574
 800fd1c:	08013544 	.word	0x08013544

0800fd20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b082      	sub	sp, #8
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	4603      	mov	r3, r0
 800fd28:	6039      	str	r1, [r7, #0]
 800fd2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fd2c:	79fb      	ldrb	r3, [r7, #7]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d105      	bne.n	800fd3e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fd32:	683a      	ldr	r2, [r7, #0]
 800fd34:	4907      	ldr	r1, [pc, #28]	@ (800fd54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fd36:	4808      	ldr	r0, [pc, #32]	@ (800fd58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fd38:	f7ff fd96 	bl	800f868 <USBD_GetString>
 800fd3c:	e004      	b.n	800fd48 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fd3e:	683a      	ldr	r2, [r7, #0]
 800fd40:	4904      	ldr	r1, [pc, #16]	@ (800fd54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fd42:	4805      	ldr	r0, [pc, #20]	@ (800fd58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fd44:	f7ff fd90 	bl	800f868 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fd48:	4b02      	ldr	r3, [pc, #8]	@ (800fd54 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3708      	adds	r7, #8
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}
 800fd52:	bf00      	nop
 800fd54:	20002574 	.word	0x20002574
 800fd58:	08013550 	.word	0x08013550

0800fd5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b084      	sub	sp, #16
 800fd60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fd62:	4b0f      	ldr	r3, [pc, #60]	@ (800fda0 <Get_SerialNum+0x44>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fd68:	4b0e      	ldr	r3, [pc, #56]	@ (800fda4 <Get_SerialNum+0x48>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fd6e:	4b0e      	ldr	r3, [pc, #56]	@ (800fda8 <Get_SerialNum+0x4c>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fd74:	68fa      	ldr	r2, [r7, #12]
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	4413      	add	r3, r2
 800fd7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d009      	beq.n	800fd96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800fd82:	2208      	movs	r2, #8
 800fd84:	4909      	ldr	r1, [pc, #36]	@ (800fdac <Get_SerialNum+0x50>)
 800fd86:	68f8      	ldr	r0, [r7, #12]
 800fd88:	f000 f814 	bl	800fdb4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fd8c:	2204      	movs	r2, #4
 800fd8e:	4908      	ldr	r1, [pc, #32]	@ (800fdb0 <Get_SerialNum+0x54>)
 800fd90:	68b8      	ldr	r0, [r7, #8]
 800fd92:	f000 f80f 	bl	800fdb4 <IntToUnicode>
  }
}
 800fd96:	bf00      	nop
 800fd98:	3710      	adds	r7, #16
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}
 800fd9e:	bf00      	nop
 800fda0:	1fff7a10 	.word	0x1fff7a10
 800fda4:	1fff7a14 	.word	0x1fff7a14
 800fda8:	1fff7a18 	.word	0x1fff7a18
 800fdac:	2000013e 	.word	0x2000013e
 800fdb0:	2000014e 	.word	0x2000014e

0800fdb4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b087      	sub	sp, #28
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	60f8      	str	r0, [r7, #12]
 800fdbc:	60b9      	str	r1, [r7, #8]
 800fdbe:	4613      	mov	r3, r2
 800fdc0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	75fb      	strb	r3, [r7, #23]
 800fdca:	e027      	b.n	800fe1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	0f1b      	lsrs	r3, r3, #28
 800fdd0:	2b09      	cmp	r3, #9
 800fdd2:	d80b      	bhi.n	800fdec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	0f1b      	lsrs	r3, r3, #28
 800fdd8:	b2da      	uxtb	r2, r3
 800fdda:	7dfb      	ldrb	r3, [r7, #23]
 800fddc:	005b      	lsls	r3, r3, #1
 800fdde:	4619      	mov	r1, r3
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	440b      	add	r3, r1
 800fde4:	3230      	adds	r2, #48	@ 0x30
 800fde6:	b2d2      	uxtb	r2, r2
 800fde8:	701a      	strb	r2, [r3, #0]
 800fdea:	e00a      	b.n	800fe02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	0f1b      	lsrs	r3, r3, #28
 800fdf0:	b2da      	uxtb	r2, r3
 800fdf2:	7dfb      	ldrb	r3, [r7, #23]
 800fdf4:	005b      	lsls	r3, r3, #1
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	440b      	add	r3, r1
 800fdfc:	3237      	adds	r2, #55	@ 0x37
 800fdfe:	b2d2      	uxtb	r2, r2
 800fe00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	011b      	lsls	r3, r3, #4
 800fe06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fe08:	7dfb      	ldrb	r3, [r7, #23]
 800fe0a:	005b      	lsls	r3, r3, #1
 800fe0c:	3301      	adds	r3, #1
 800fe0e:	68ba      	ldr	r2, [r7, #8]
 800fe10:	4413      	add	r3, r2
 800fe12:	2200      	movs	r2, #0
 800fe14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fe16:	7dfb      	ldrb	r3, [r7, #23]
 800fe18:	3301      	adds	r3, #1
 800fe1a:	75fb      	strb	r3, [r7, #23]
 800fe1c:	7dfa      	ldrb	r2, [r7, #23]
 800fe1e:	79fb      	ldrb	r3, [r7, #7]
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d3d3      	bcc.n	800fdcc <IntToUnicode+0x18>
  }
}
 800fe24:	bf00      	nop
 800fe26:	bf00      	nop
 800fe28:	371c      	adds	r7, #28
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr
	...

0800fe34 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b08a      	sub	sp, #40	@ 0x28
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fe3c:	f107 0314 	add.w	r3, r7, #20
 800fe40:	2200      	movs	r2, #0
 800fe42:	601a      	str	r2, [r3, #0]
 800fe44:	605a      	str	r2, [r3, #4]
 800fe46:	609a      	str	r2, [r3, #8]
 800fe48:	60da      	str	r2, [r3, #12]
 800fe4a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fe54:	d13a      	bne.n	800fecc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fe56:	2300      	movs	r3, #0
 800fe58:	613b      	str	r3, [r7, #16]
 800fe5a:	4b1e      	ldr	r3, [pc, #120]	@ (800fed4 <HAL_PCD_MspInit+0xa0>)
 800fe5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe5e:	4a1d      	ldr	r2, [pc, #116]	@ (800fed4 <HAL_PCD_MspInit+0xa0>)
 800fe60:	f043 0301 	orr.w	r3, r3, #1
 800fe64:	6313      	str	r3, [r2, #48]	@ 0x30
 800fe66:	4b1b      	ldr	r3, [pc, #108]	@ (800fed4 <HAL_PCD_MspInit+0xa0>)
 800fe68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe6a:	f003 0301 	and.w	r3, r3, #1
 800fe6e:	613b      	str	r3, [r7, #16]
 800fe70:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fe72:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800fe76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fe78:	2302      	movs	r3, #2
 800fe7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800fe80:	2303      	movs	r3, #3
 800fe82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800fe84:	230a      	movs	r3, #10
 800fe86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fe88:	f107 0314 	add.w	r3, r7, #20
 800fe8c:	4619      	mov	r1, r3
 800fe8e:	4812      	ldr	r0, [pc, #72]	@ (800fed8 <HAL_PCD_MspInit+0xa4>)
 800fe90:	f7f6 fd18 	bl	80068c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fe94:	4b0f      	ldr	r3, [pc, #60]	@ (800fed4 <HAL_PCD_MspInit+0xa0>)
 800fe96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe98:	4a0e      	ldr	r2, [pc, #56]	@ (800fed4 <HAL_PCD_MspInit+0xa0>)
 800fe9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe9e:	6353      	str	r3, [r2, #52]	@ 0x34
 800fea0:	2300      	movs	r3, #0
 800fea2:	60fb      	str	r3, [r7, #12]
 800fea4:	4b0b      	ldr	r3, [pc, #44]	@ (800fed4 <HAL_PCD_MspInit+0xa0>)
 800fea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fea8:	4a0a      	ldr	r2, [pc, #40]	@ (800fed4 <HAL_PCD_MspInit+0xa0>)
 800feaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800feae:	6453      	str	r3, [r2, #68]	@ 0x44
 800feb0:	4b08      	ldr	r3, [pc, #32]	@ (800fed4 <HAL_PCD_MspInit+0xa0>)
 800feb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800feb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800feb8:	60fb      	str	r3, [r7, #12]
 800feba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800febc:	2200      	movs	r2, #0
 800febe:	2100      	movs	r1, #0
 800fec0:	2043      	movs	r0, #67	@ 0x43
 800fec2:	f7f6 f8da 	bl	800607a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fec6:	2043      	movs	r0, #67	@ 0x43
 800fec8:	f7f6 f8f3 	bl	80060b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fecc:	bf00      	nop
 800fece:	3728      	adds	r7, #40	@ 0x28
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	40023800 	.word	0x40023800
 800fed8:	40020000 	.word	0x40020000

0800fedc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b082      	sub	sp, #8
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800fef0:	4619      	mov	r1, r3
 800fef2:	4610      	mov	r0, r2
 800fef4:	f7fe fb55 	bl	800e5a2 <USBD_LL_SetupStage>
}
 800fef8:	bf00      	nop
 800fefa:	3708      	adds	r7, #8
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}

0800ff00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	460b      	mov	r3, r1
 800ff0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ff12:	78fa      	ldrb	r2, [r7, #3]
 800ff14:	6879      	ldr	r1, [r7, #4]
 800ff16:	4613      	mov	r3, r2
 800ff18:	00db      	lsls	r3, r3, #3
 800ff1a:	4413      	add	r3, r2
 800ff1c:	009b      	lsls	r3, r3, #2
 800ff1e:	440b      	add	r3, r1
 800ff20:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ff24:	681a      	ldr	r2, [r3, #0]
 800ff26:	78fb      	ldrb	r3, [r7, #3]
 800ff28:	4619      	mov	r1, r3
 800ff2a:	f7fe fb8f 	bl	800e64c <USBD_LL_DataOutStage>
}
 800ff2e:	bf00      	nop
 800ff30:	3708      	adds	r7, #8
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}

0800ff36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff36:	b580      	push	{r7, lr}
 800ff38:	b082      	sub	sp, #8
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	6078      	str	r0, [r7, #4]
 800ff3e:	460b      	mov	r3, r1
 800ff40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ff48:	78fa      	ldrb	r2, [r7, #3]
 800ff4a:	6879      	ldr	r1, [r7, #4]
 800ff4c:	4613      	mov	r3, r2
 800ff4e:	00db      	lsls	r3, r3, #3
 800ff50:	4413      	add	r3, r2
 800ff52:	009b      	lsls	r3, r3, #2
 800ff54:	440b      	add	r3, r1
 800ff56:	3320      	adds	r3, #32
 800ff58:	681a      	ldr	r2, [r3, #0]
 800ff5a:	78fb      	ldrb	r3, [r7, #3]
 800ff5c:	4619      	mov	r1, r3
 800ff5e:	f7fe fc28 	bl	800e7b2 <USBD_LL_DataInStage>
}
 800ff62:	bf00      	nop
 800ff64:	3708      	adds	r7, #8
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}

0800ff6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff6a:	b580      	push	{r7, lr}
 800ff6c:	b082      	sub	sp, #8
 800ff6e:	af00      	add	r7, sp, #0
 800ff70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f7fe fd62 	bl	800ea42 <USBD_LL_SOF>
}
 800ff7e:	bf00      	nop
 800ff80:	3708      	adds	r7, #8
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}

0800ff86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ff86:	b580      	push	{r7, lr}
 800ff88:	b084      	sub	sp, #16
 800ff8a:	af00      	add	r7, sp, #0
 800ff8c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ff8e:	2301      	movs	r3, #1
 800ff90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	79db      	ldrb	r3, [r3, #7]
 800ff96:	2b02      	cmp	r3, #2
 800ff98:	d001      	beq.n	800ff9e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ff9a:	f7f2 fc63 	bl	8002864 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ffa4:	7bfa      	ldrb	r2, [r7, #15]
 800ffa6:	4611      	mov	r1, r2
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f7fe fd06 	bl	800e9ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f7fe fcae 	bl	800e916 <USBD_LL_Reset>
}
 800ffba:	bf00      	nop
 800ffbc:	3710      	adds	r7, #16
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}
	...

0800ffc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7fe fd01 	bl	800e9da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	687a      	ldr	r2, [r7, #4]
 800ffe4:	6812      	ldr	r2, [r2, #0]
 800ffe6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ffea:	f043 0301 	orr.w	r3, r3, #1
 800ffee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	7adb      	ldrb	r3, [r3, #11]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d005      	beq.n	8010004 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fff8:	4b04      	ldr	r3, [pc, #16]	@ (801000c <HAL_PCD_SuspendCallback+0x48>)
 800fffa:	691b      	ldr	r3, [r3, #16]
 800fffc:	4a03      	ldr	r2, [pc, #12]	@ (801000c <HAL_PCD_SuspendCallback+0x48>)
 800fffe:	f043 0306 	orr.w	r3, r3, #6
 8010002:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010004:	bf00      	nop
 8010006:	3708      	adds	r7, #8
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}
 801000c:	e000ed00 	.word	0xe000ed00

08010010 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b082      	sub	sp, #8
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801001e:	4618      	mov	r0, r3
 8010020:	f7fe fcf7 	bl	800ea12 <USBD_LL_Resume>
}
 8010024:	bf00      	nop
 8010026:	3708      	adds	r7, #8
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b082      	sub	sp, #8
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	460b      	mov	r3, r1
 8010036:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801003e:	78fa      	ldrb	r2, [r7, #3]
 8010040:	4611      	mov	r1, r2
 8010042:	4618      	mov	r0, r3
 8010044:	f7fe fd4f 	bl	800eae6 <USBD_LL_IsoOUTIncomplete>
}
 8010048:	bf00      	nop
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	460b      	mov	r3, r1
 801005a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010062:	78fa      	ldrb	r2, [r7, #3]
 8010064:	4611      	mov	r1, r2
 8010066:	4618      	mov	r0, r3
 8010068:	f7fe fd0b 	bl	800ea82 <USBD_LL_IsoINIncomplete>
}
 801006c:	bf00      	nop
 801006e:	3708      	adds	r7, #8
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}

08010074 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b082      	sub	sp, #8
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010082:	4618      	mov	r0, r3
 8010084:	f7fe fd61 	bl	800eb4a <USBD_LL_DevConnected>
}
 8010088:	bf00      	nop
 801008a:	3708      	adds	r7, #8
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}

08010090 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b082      	sub	sp, #8
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801009e:	4618      	mov	r0, r3
 80100a0:	f7fe fd5e 	bl	800eb60 <USBD_LL_DevDisconnected>
}
 80100a4:	bf00      	nop
 80100a6:	3708      	adds	r7, #8
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}

080100ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b082      	sub	sp, #8
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d13c      	bne.n	8010136 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80100bc:	4a20      	ldr	r2, [pc, #128]	@ (8010140 <USBD_LL_Init+0x94>)
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	4a1e      	ldr	r2, [pc, #120]	@ (8010140 <USBD_LL_Init+0x94>)
 80100c8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80100cc:	4b1c      	ldr	r3, [pc, #112]	@ (8010140 <USBD_LL_Init+0x94>)
 80100ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80100d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80100d4:	4b1a      	ldr	r3, [pc, #104]	@ (8010140 <USBD_LL_Init+0x94>)
 80100d6:	2204      	movs	r2, #4
 80100d8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80100da:	4b19      	ldr	r3, [pc, #100]	@ (8010140 <USBD_LL_Init+0x94>)
 80100dc:	2202      	movs	r2, #2
 80100de:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80100e0:	4b17      	ldr	r3, [pc, #92]	@ (8010140 <USBD_LL_Init+0x94>)
 80100e2:	2200      	movs	r2, #0
 80100e4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80100e6:	4b16      	ldr	r3, [pc, #88]	@ (8010140 <USBD_LL_Init+0x94>)
 80100e8:	2202      	movs	r2, #2
 80100ea:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80100ec:	4b14      	ldr	r3, [pc, #80]	@ (8010140 <USBD_LL_Init+0x94>)
 80100ee:	2200      	movs	r2, #0
 80100f0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80100f2:	4b13      	ldr	r3, [pc, #76]	@ (8010140 <USBD_LL_Init+0x94>)
 80100f4:	2200      	movs	r2, #0
 80100f6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80100f8:	4b11      	ldr	r3, [pc, #68]	@ (8010140 <USBD_LL_Init+0x94>)
 80100fa:	2200      	movs	r2, #0
 80100fc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80100fe:	4b10      	ldr	r3, [pc, #64]	@ (8010140 <USBD_LL_Init+0x94>)
 8010100:	2200      	movs	r2, #0
 8010102:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010104:	4b0e      	ldr	r3, [pc, #56]	@ (8010140 <USBD_LL_Init+0x94>)
 8010106:	2200      	movs	r2, #0
 8010108:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801010a:	480d      	ldr	r0, [pc, #52]	@ (8010140 <USBD_LL_Init+0x94>)
 801010c:	f7f6 feee 	bl	8006eec <HAL_PCD_Init>
 8010110:	4603      	mov	r3, r0
 8010112:	2b00      	cmp	r3, #0
 8010114:	d001      	beq.n	801011a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010116:	f7f2 fba5 	bl	8002864 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801011a:	2180      	movs	r1, #128	@ 0x80
 801011c:	4808      	ldr	r0, [pc, #32]	@ (8010140 <USBD_LL_Init+0x94>)
 801011e:	f7f8 f918 	bl	8008352 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010122:	2240      	movs	r2, #64	@ 0x40
 8010124:	2100      	movs	r1, #0
 8010126:	4806      	ldr	r0, [pc, #24]	@ (8010140 <USBD_LL_Init+0x94>)
 8010128:	f7f8 f8cc 	bl	80082c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801012c:	2280      	movs	r2, #128	@ 0x80
 801012e:	2101      	movs	r1, #1
 8010130:	4803      	ldr	r0, [pc, #12]	@ (8010140 <USBD_LL_Init+0x94>)
 8010132:	f7f8 f8c7 	bl	80082c4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010136:	2300      	movs	r3, #0
}
 8010138:	4618      	mov	r0, r3
 801013a:	3708      	adds	r7, #8
 801013c:	46bd      	mov	sp, r7
 801013e:	bd80      	pop	{r7, pc}
 8010140:	20002774 	.word	0x20002774

08010144 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b084      	sub	sp, #16
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801014c:	2300      	movs	r3, #0
 801014e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010150:	2300      	movs	r3, #0
 8010152:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801015a:	4618      	mov	r0, r3
 801015c:	f7f6 ffd5 	bl	800710a <HAL_PCD_Start>
 8010160:	4603      	mov	r3, r0
 8010162:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010164:	7bfb      	ldrb	r3, [r7, #15]
 8010166:	4618      	mov	r0, r3
 8010168:	f000 f942 	bl	80103f0 <USBD_Get_USB_Status>
 801016c:	4603      	mov	r3, r0
 801016e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010170:	7bbb      	ldrb	r3, [r7, #14]
}
 8010172:	4618      	mov	r0, r3
 8010174:	3710      	adds	r7, #16
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}

0801017a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801017a:	b580      	push	{r7, lr}
 801017c:	b084      	sub	sp, #16
 801017e:	af00      	add	r7, sp, #0
 8010180:	6078      	str	r0, [r7, #4]
 8010182:	4608      	mov	r0, r1
 8010184:	4611      	mov	r1, r2
 8010186:	461a      	mov	r2, r3
 8010188:	4603      	mov	r3, r0
 801018a:	70fb      	strb	r3, [r7, #3]
 801018c:	460b      	mov	r3, r1
 801018e:	70bb      	strb	r3, [r7, #2]
 8010190:	4613      	mov	r3, r2
 8010192:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010194:	2300      	movs	r3, #0
 8010196:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010198:	2300      	movs	r3, #0
 801019a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80101a2:	78bb      	ldrb	r3, [r7, #2]
 80101a4:	883a      	ldrh	r2, [r7, #0]
 80101a6:	78f9      	ldrb	r1, [r7, #3]
 80101a8:	f7f7 fca9 	bl	8007afe <HAL_PCD_EP_Open>
 80101ac:	4603      	mov	r3, r0
 80101ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101b0:	7bfb      	ldrb	r3, [r7, #15]
 80101b2:	4618      	mov	r0, r3
 80101b4:	f000 f91c 	bl	80103f0 <USBD_Get_USB_Status>
 80101b8:	4603      	mov	r3, r0
 80101ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80101be:	4618      	mov	r0, r3
 80101c0:	3710      	adds	r7, #16
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd80      	pop	{r7, pc}

080101c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80101c6:	b580      	push	{r7, lr}
 80101c8:	b084      	sub	sp, #16
 80101ca:	af00      	add	r7, sp, #0
 80101cc:	6078      	str	r0, [r7, #4]
 80101ce:	460b      	mov	r3, r1
 80101d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101d2:	2300      	movs	r3, #0
 80101d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101d6:	2300      	movs	r3, #0
 80101d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80101e0:	78fa      	ldrb	r2, [r7, #3]
 80101e2:	4611      	mov	r1, r2
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7f7 fcf2 	bl	8007bce <HAL_PCD_EP_Close>
 80101ea:	4603      	mov	r3, r0
 80101ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101ee:	7bfb      	ldrb	r3, [r7, #15]
 80101f0:	4618      	mov	r0, r3
 80101f2:	f000 f8fd 	bl	80103f0 <USBD_Get_USB_Status>
 80101f6:	4603      	mov	r3, r0
 80101f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80101fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	3710      	adds	r7, #16
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}

08010204 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b084      	sub	sp, #16
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	460b      	mov	r3, r1
 801020e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010210:	2300      	movs	r3, #0
 8010212:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010214:	2300      	movs	r3, #0
 8010216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801021e:	78fa      	ldrb	r2, [r7, #3]
 8010220:	4611      	mov	r1, r2
 8010222:	4618      	mov	r0, r3
 8010224:	f7f7 fdaa 	bl	8007d7c <HAL_PCD_EP_SetStall>
 8010228:	4603      	mov	r3, r0
 801022a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801022c:	7bfb      	ldrb	r3, [r7, #15]
 801022e:	4618      	mov	r0, r3
 8010230:	f000 f8de 	bl	80103f0 <USBD_Get_USB_Status>
 8010234:	4603      	mov	r3, r0
 8010236:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010238:	7bbb      	ldrb	r3, [r7, #14]
}
 801023a:	4618      	mov	r0, r3
 801023c:	3710      	adds	r7, #16
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}

08010242 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010242:	b580      	push	{r7, lr}
 8010244:	b084      	sub	sp, #16
 8010246:	af00      	add	r7, sp, #0
 8010248:	6078      	str	r0, [r7, #4]
 801024a:	460b      	mov	r3, r1
 801024c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801024e:	2300      	movs	r3, #0
 8010250:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010252:	2300      	movs	r3, #0
 8010254:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801025c:	78fa      	ldrb	r2, [r7, #3]
 801025e:	4611      	mov	r1, r2
 8010260:	4618      	mov	r0, r3
 8010262:	f7f7 fdee 	bl	8007e42 <HAL_PCD_EP_ClrStall>
 8010266:	4603      	mov	r3, r0
 8010268:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801026a:	7bfb      	ldrb	r3, [r7, #15]
 801026c:	4618      	mov	r0, r3
 801026e:	f000 f8bf 	bl	80103f0 <USBD_Get_USB_Status>
 8010272:	4603      	mov	r3, r0
 8010274:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010276:	7bbb      	ldrb	r3, [r7, #14]
}
 8010278:	4618      	mov	r0, r3
 801027a:	3710      	adds	r7, #16
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}

08010280 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010280:	b480      	push	{r7}
 8010282:	b085      	sub	sp, #20
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	460b      	mov	r3, r1
 801028a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010292:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010294:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010298:	2b00      	cmp	r3, #0
 801029a:	da0b      	bge.n	80102b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801029c:	78fb      	ldrb	r3, [r7, #3]
 801029e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80102a2:	68f9      	ldr	r1, [r7, #12]
 80102a4:	4613      	mov	r3, r2
 80102a6:	00db      	lsls	r3, r3, #3
 80102a8:	4413      	add	r3, r2
 80102aa:	009b      	lsls	r3, r3, #2
 80102ac:	440b      	add	r3, r1
 80102ae:	3316      	adds	r3, #22
 80102b0:	781b      	ldrb	r3, [r3, #0]
 80102b2:	e00b      	b.n	80102cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80102b4:	78fb      	ldrb	r3, [r7, #3]
 80102b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80102ba:	68f9      	ldr	r1, [r7, #12]
 80102bc:	4613      	mov	r3, r2
 80102be:	00db      	lsls	r3, r3, #3
 80102c0:	4413      	add	r3, r2
 80102c2:	009b      	lsls	r3, r3, #2
 80102c4:	440b      	add	r3, r1
 80102c6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80102ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	3714      	adds	r7, #20
 80102d0:	46bd      	mov	sp, r7
 80102d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d6:	4770      	bx	lr

080102d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b084      	sub	sp, #16
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	460b      	mov	r3, r1
 80102e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102e4:	2300      	movs	r3, #0
 80102e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102e8:	2300      	movs	r3, #0
 80102ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80102f2:	78fa      	ldrb	r2, [r7, #3]
 80102f4:	4611      	mov	r1, r2
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7f7 fbdd 	bl	8007ab6 <HAL_PCD_SetAddress>
 80102fc:	4603      	mov	r3, r0
 80102fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010300:	7bfb      	ldrb	r3, [r7, #15]
 8010302:	4618      	mov	r0, r3
 8010304:	f000 f874 	bl	80103f0 <USBD_Get_USB_Status>
 8010308:	4603      	mov	r3, r0
 801030a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801030c:	7bbb      	ldrb	r3, [r7, #14]
}
 801030e:	4618      	mov	r0, r3
 8010310:	3710      	adds	r7, #16
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}

08010316 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010316:	b580      	push	{r7, lr}
 8010318:	b086      	sub	sp, #24
 801031a:	af00      	add	r7, sp, #0
 801031c:	60f8      	str	r0, [r7, #12]
 801031e:	607a      	str	r2, [r7, #4]
 8010320:	603b      	str	r3, [r7, #0]
 8010322:	460b      	mov	r3, r1
 8010324:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010326:	2300      	movs	r3, #0
 8010328:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801032a:	2300      	movs	r3, #0
 801032c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010334:	7af9      	ldrb	r1, [r7, #11]
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	687a      	ldr	r2, [r7, #4]
 801033a:	f7f7 fce5 	bl	8007d08 <HAL_PCD_EP_Transmit>
 801033e:	4603      	mov	r3, r0
 8010340:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010342:	7dfb      	ldrb	r3, [r7, #23]
 8010344:	4618      	mov	r0, r3
 8010346:	f000 f853 	bl	80103f0 <USBD_Get_USB_Status>
 801034a:	4603      	mov	r3, r0
 801034c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801034e:	7dbb      	ldrb	r3, [r7, #22]
}
 8010350:	4618      	mov	r0, r3
 8010352:	3718      	adds	r7, #24
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}

08010358 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b086      	sub	sp, #24
 801035c:	af00      	add	r7, sp, #0
 801035e:	60f8      	str	r0, [r7, #12]
 8010360:	607a      	str	r2, [r7, #4]
 8010362:	603b      	str	r3, [r7, #0]
 8010364:	460b      	mov	r3, r1
 8010366:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010368:	2300      	movs	r3, #0
 801036a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801036c:	2300      	movs	r3, #0
 801036e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010376:	7af9      	ldrb	r1, [r7, #11]
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	687a      	ldr	r2, [r7, #4]
 801037c:	f7f7 fc71 	bl	8007c62 <HAL_PCD_EP_Receive>
 8010380:	4603      	mov	r3, r0
 8010382:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010384:	7dfb      	ldrb	r3, [r7, #23]
 8010386:	4618      	mov	r0, r3
 8010388:	f000 f832 	bl	80103f0 <USBD_Get_USB_Status>
 801038c:	4603      	mov	r3, r0
 801038e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010390:	7dbb      	ldrb	r3, [r7, #22]
}
 8010392:	4618      	mov	r0, r3
 8010394:	3718      	adds	r7, #24
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}

0801039a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801039a:	b580      	push	{r7, lr}
 801039c:	b082      	sub	sp, #8
 801039e:	af00      	add	r7, sp, #0
 80103a0:	6078      	str	r0, [r7, #4]
 80103a2:	460b      	mov	r3, r1
 80103a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80103ac:	78fa      	ldrb	r2, [r7, #3]
 80103ae:	4611      	mov	r1, r2
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7f7 fc91 	bl	8007cd8 <HAL_PCD_EP_GetRxCount>
 80103b6:	4603      	mov	r3, r0
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3708      	adds	r7, #8
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80103c0:	b480      	push	{r7}
 80103c2:	b083      	sub	sp, #12
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80103c8:	4b03      	ldr	r3, [pc, #12]	@ (80103d8 <USBD_static_malloc+0x18>)
}
 80103ca:	4618      	mov	r0, r3
 80103cc:	370c      	adds	r7, #12
 80103ce:	46bd      	mov	sp, r7
 80103d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d4:	4770      	bx	lr
 80103d6:	bf00      	nop
 80103d8:	20002c58 	.word	0x20002c58

080103dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80103dc:	b480      	push	{r7}
 80103de:	b083      	sub	sp, #12
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]

}
 80103e4:	bf00      	nop
 80103e6:	370c      	adds	r7, #12
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr

080103f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80103f0:	b480      	push	{r7}
 80103f2:	b085      	sub	sp, #20
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	4603      	mov	r3, r0
 80103f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103fa:	2300      	movs	r3, #0
 80103fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80103fe:	79fb      	ldrb	r3, [r7, #7]
 8010400:	2b03      	cmp	r3, #3
 8010402:	d817      	bhi.n	8010434 <USBD_Get_USB_Status+0x44>
 8010404:	a201      	add	r2, pc, #4	@ (adr r2, 801040c <USBD_Get_USB_Status+0x1c>)
 8010406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801040a:	bf00      	nop
 801040c:	0801041d 	.word	0x0801041d
 8010410:	08010423 	.word	0x08010423
 8010414:	08010429 	.word	0x08010429
 8010418:	0801042f 	.word	0x0801042f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801041c:	2300      	movs	r3, #0
 801041e:	73fb      	strb	r3, [r7, #15]
    break;
 8010420:	e00b      	b.n	801043a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010422:	2303      	movs	r3, #3
 8010424:	73fb      	strb	r3, [r7, #15]
    break;
 8010426:	e008      	b.n	801043a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010428:	2301      	movs	r3, #1
 801042a:	73fb      	strb	r3, [r7, #15]
    break;
 801042c:	e005      	b.n	801043a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801042e:	2303      	movs	r3, #3
 8010430:	73fb      	strb	r3, [r7, #15]
    break;
 8010432:	e002      	b.n	801043a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010434:	2303      	movs	r3, #3
 8010436:	73fb      	strb	r3, [r7, #15]
    break;
 8010438:	bf00      	nop
  }
  return usb_status;
 801043a:	7bfb      	ldrb	r3, [r7, #15]
}
 801043c:	4618      	mov	r0, r3
 801043e:	3714      	adds	r7, #20
 8010440:	46bd      	mov	sp, r7
 8010442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010446:	4770      	bx	lr

08010448 <__cvt>:
 8010448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801044c:	ec57 6b10 	vmov	r6, r7, d0
 8010450:	2f00      	cmp	r7, #0
 8010452:	460c      	mov	r4, r1
 8010454:	4619      	mov	r1, r3
 8010456:	463b      	mov	r3, r7
 8010458:	bfbb      	ittet	lt
 801045a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801045e:	461f      	movlt	r7, r3
 8010460:	2300      	movge	r3, #0
 8010462:	232d      	movlt	r3, #45	@ 0x2d
 8010464:	700b      	strb	r3, [r1, #0]
 8010466:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010468:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801046c:	4691      	mov	r9, r2
 801046e:	f023 0820 	bic.w	r8, r3, #32
 8010472:	bfbc      	itt	lt
 8010474:	4632      	movlt	r2, r6
 8010476:	4616      	movlt	r6, r2
 8010478:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801047c:	d005      	beq.n	801048a <__cvt+0x42>
 801047e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010482:	d100      	bne.n	8010486 <__cvt+0x3e>
 8010484:	3401      	adds	r4, #1
 8010486:	2102      	movs	r1, #2
 8010488:	e000      	b.n	801048c <__cvt+0x44>
 801048a:	2103      	movs	r1, #3
 801048c:	ab03      	add	r3, sp, #12
 801048e:	9301      	str	r3, [sp, #4]
 8010490:	ab02      	add	r3, sp, #8
 8010492:	9300      	str	r3, [sp, #0]
 8010494:	ec47 6b10 	vmov	d0, r6, r7
 8010498:	4653      	mov	r3, sl
 801049a:	4622      	mov	r2, r4
 801049c:	f000 ff5c 	bl	8011358 <_dtoa_r>
 80104a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80104a4:	4605      	mov	r5, r0
 80104a6:	d119      	bne.n	80104dc <__cvt+0x94>
 80104a8:	f019 0f01 	tst.w	r9, #1
 80104ac:	d00e      	beq.n	80104cc <__cvt+0x84>
 80104ae:	eb00 0904 	add.w	r9, r0, r4
 80104b2:	2200      	movs	r2, #0
 80104b4:	2300      	movs	r3, #0
 80104b6:	4630      	mov	r0, r6
 80104b8:	4639      	mov	r1, r7
 80104ba:	f7f0 fb0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80104be:	b108      	cbz	r0, 80104c4 <__cvt+0x7c>
 80104c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80104c4:	2230      	movs	r2, #48	@ 0x30
 80104c6:	9b03      	ldr	r3, [sp, #12]
 80104c8:	454b      	cmp	r3, r9
 80104ca:	d31e      	bcc.n	801050a <__cvt+0xc2>
 80104cc:	9b03      	ldr	r3, [sp, #12]
 80104ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80104d0:	1b5b      	subs	r3, r3, r5
 80104d2:	4628      	mov	r0, r5
 80104d4:	6013      	str	r3, [r2, #0]
 80104d6:	b004      	add	sp, #16
 80104d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80104e0:	eb00 0904 	add.w	r9, r0, r4
 80104e4:	d1e5      	bne.n	80104b2 <__cvt+0x6a>
 80104e6:	7803      	ldrb	r3, [r0, #0]
 80104e8:	2b30      	cmp	r3, #48	@ 0x30
 80104ea:	d10a      	bne.n	8010502 <__cvt+0xba>
 80104ec:	2200      	movs	r2, #0
 80104ee:	2300      	movs	r3, #0
 80104f0:	4630      	mov	r0, r6
 80104f2:	4639      	mov	r1, r7
 80104f4:	f7f0 faf0 	bl	8000ad8 <__aeabi_dcmpeq>
 80104f8:	b918      	cbnz	r0, 8010502 <__cvt+0xba>
 80104fa:	f1c4 0401 	rsb	r4, r4, #1
 80104fe:	f8ca 4000 	str.w	r4, [sl]
 8010502:	f8da 3000 	ldr.w	r3, [sl]
 8010506:	4499      	add	r9, r3
 8010508:	e7d3      	b.n	80104b2 <__cvt+0x6a>
 801050a:	1c59      	adds	r1, r3, #1
 801050c:	9103      	str	r1, [sp, #12]
 801050e:	701a      	strb	r2, [r3, #0]
 8010510:	e7d9      	b.n	80104c6 <__cvt+0x7e>

08010512 <__exponent>:
 8010512:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010514:	2900      	cmp	r1, #0
 8010516:	bfba      	itte	lt
 8010518:	4249      	neglt	r1, r1
 801051a:	232d      	movlt	r3, #45	@ 0x2d
 801051c:	232b      	movge	r3, #43	@ 0x2b
 801051e:	2909      	cmp	r1, #9
 8010520:	7002      	strb	r2, [r0, #0]
 8010522:	7043      	strb	r3, [r0, #1]
 8010524:	dd29      	ble.n	801057a <__exponent+0x68>
 8010526:	f10d 0307 	add.w	r3, sp, #7
 801052a:	461d      	mov	r5, r3
 801052c:	270a      	movs	r7, #10
 801052e:	461a      	mov	r2, r3
 8010530:	fbb1 f6f7 	udiv	r6, r1, r7
 8010534:	fb07 1416 	mls	r4, r7, r6, r1
 8010538:	3430      	adds	r4, #48	@ 0x30
 801053a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801053e:	460c      	mov	r4, r1
 8010540:	2c63      	cmp	r4, #99	@ 0x63
 8010542:	f103 33ff 	add.w	r3, r3, #4294967295
 8010546:	4631      	mov	r1, r6
 8010548:	dcf1      	bgt.n	801052e <__exponent+0x1c>
 801054a:	3130      	adds	r1, #48	@ 0x30
 801054c:	1e94      	subs	r4, r2, #2
 801054e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010552:	1c41      	adds	r1, r0, #1
 8010554:	4623      	mov	r3, r4
 8010556:	42ab      	cmp	r3, r5
 8010558:	d30a      	bcc.n	8010570 <__exponent+0x5e>
 801055a:	f10d 0309 	add.w	r3, sp, #9
 801055e:	1a9b      	subs	r3, r3, r2
 8010560:	42ac      	cmp	r4, r5
 8010562:	bf88      	it	hi
 8010564:	2300      	movhi	r3, #0
 8010566:	3302      	adds	r3, #2
 8010568:	4403      	add	r3, r0
 801056a:	1a18      	subs	r0, r3, r0
 801056c:	b003      	add	sp, #12
 801056e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010570:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010574:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010578:	e7ed      	b.n	8010556 <__exponent+0x44>
 801057a:	2330      	movs	r3, #48	@ 0x30
 801057c:	3130      	adds	r1, #48	@ 0x30
 801057e:	7083      	strb	r3, [r0, #2]
 8010580:	70c1      	strb	r1, [r0, #3]
 8010582:	1d03      	adds	r3, r0, #4
 8010584:	e7f1      	b.n	801056a <__exponent+0x58>
	...

08010588 <_printf_float>:
 8010588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801058c:	b08d      	sub	sp, #52	@ 0x34
 801058e:	460c      	mov	r4, r1
 8010590:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010594:	4616      	mov	r6, r2
 8010596:	461f      	mov	r7, r3
 8010598:	4605      	mov	r5, r0
 801059a:	f000 fdcd 	bl	8011138 <_localeconv_r>
 801059e:	6803      	ldr	r3, [r0, #0]
 80105a0:	9304      	str	r3, [sp, #16]
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7ef fe6c 	bl	8000280 <strlen>
 80105a8:	2300      	movs	r3, #0
 80105aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80105ac:	f8d8 3000 	ldr.w	r3, [r8]
 80105b0:	9005      	str	r0, [sp, #20]
 80105b2:	3307      	adds	r3, #7
 80105b4:	f023 0307 	bic.w	r3, r3, #7
 80105b8:	f103 0208 	add.w	r2, r3, #8
 80105bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80105c0:	f8d4 b000 	ldr.w	fp, [r4]
 80105c4:	f8c8 2000 	str.w	r2, [r8]
 80105c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80105cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80105d0:	9307      	str	r3, [sp, #28]
 80105d2:	f8cd 8018 	str.w	r8, [sp, #24]
 80105d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80105da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80105de:	4b9c      	ldr	r3, [pc, #624]	@ (8010850 <_printf_float+0x2c8>)
 80105e0:	f04f 32ff 	mov.w	r2, #4294967295
 80105e4:	f7f0 faaa 	bl	8000b3c <__aeabi_dcmpun>
 80105e8:	bb70      	cbnz	r0, 8010648 <_printf_float+0xc0>
 80105ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80105ee:	4b98      	ldr	r3, [pc, #608]	@ (8010850 <_printf_float+0x2c8>)
 80105f0:	f04f 32ff 	mov.w	r2, #4294967295
 80105f4:	f7f0 fa84 	bl	8000b00 <__aeabi_dcmple>
 80105f8:	bb30      	cbnz	r0, 8010648 <_printf_float+0xc0>
 80105fa:	2200      	movs	r2, #0
 80105fc:	2300      	movs	r3, #0
 80105fe:	4640      	mov	r0, r8
 8010600:	4649      	mov	r1, r9
 8010602:	f7f0 fa73 	bl	8000aec <__aeabi_dcmplt>
 8010606:	b110      	cbz	r0, 801060e <_printf_float+0x86>
 8010608:	232d      	movs	r3, #45	@ 0x2d
 801060a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801060e:	4a91      	ldr	r2, [pc, #580]	@ (8010854 <_printf_float+0x2cc>)
 8010610:	4b91      	ldr	r3, [pc, #580]	@ (8010858 <_printf_float+0x2d0>)
 8010612:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010616:	bf94      	ite	ls
 8010618:	4690      	movls	r8, r2
 801061a:	4698      	movhi	r8, r3
 801061c:	2303      	movs	r3, #3
 801061e:	6123      	str	r3, [r4, #16]
 8010620:	f02b 0304 	bic.w	r3, fp, #4
 8010624:	6023      	str	r3, [r4, #0]
 8010626:	f04f 0900 	mov.w	r9, #0
 801062a:	9700      	str	r7, [sp, #0]
 801062c:	4633      	mov	r3, r6
 801062e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010630:	4621      	mov	r1, r4
 8010632:	4628      	mov	r0, r5
 8010634:	f000 f9d2 	bl	80109dc <_printf_common>
 8010638:	3001      	adds	r0, #1
 801063a:	f040 808d 	bne.w	8010758 <_printf_float+0x1d0>
 801063e:	f04f 30ff 	mov.w	r0, #4294967295
 8010642:	b00d      	add	sp, #52	@ 0x34
 8010644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010648:	4642      	mov	r2, r8
 801064a:	464b      	mov	r3, r9
 801064c:	4640      	mov	r0, r8
 801064e:	4649      	mov	r1, r9
 8010650:	f7f0 fa74 	bl	8000b3c <__aeabi_dcmpun>
 8010654:	b140      	cbz	r0, 8010668 <_printf_float+0xe0>
 8010656:	464b      	mov	r3, r9
 8010658:	2b00      	cmp	r3, #0
 801065a:	bfbc      	itt	lt
 801065c:	232d      	movlt	r3, #45	@ 0x2d
 801065e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010662:	4a7e      	ldr	r2, [pc, #504]	@ (801085c <_printf_float+0x2d4>)
 8010664:	4b7e      	ldr	r3, [pc, #504]	@ (8010860 <_printf_float+0x2d8>)
 8010666:	e7d4      	b.n	8010612 <_printf_float+0x8a>
 8010668:	6863      	ldr	r3, [r4, #4]
 801066a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801066e:	9206      	str	r2, [sp, #24]
 8010670:	1c5a      	adds	r2, r3, #1
 8010672:	d13b      	bne.n	80106ec <_printf_float+0x164>
 8010674:	2306      	movs	r3, #6
 8010676:	6063      	str	r3, [r4, #4]
 8010678:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801067c:	2300      	movs	r3, #0
 801067e:	6022      	str	r2, [r4, #0]
 8010680:	9303      	str	r3, [sp, #12]
 8010682:	ab0a      	add	r3, sp, #40	@ 0x28
 8010684:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010688:	ab09      	add	r3, sp, #36	@ 0x24
 801068a:	9300      	str	r3, [sp, #0]
 801068c:	6861      	ldr	r1, [r4, #4]
 801068e:	ec49 8b10 	vmov	d0, r8, r9
 8010692:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010696:	4628      	mov	r0, r5
 8010698:	f7ff fed6 	bl	8010448 <__cvt>
 801069c:	9b06      	ldr	r3, [sp, #24]
 801069e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80106a0:	2b47      	cmp	r3, #71	@ 0x47
 80106a2:	4680      	mov	r8, r0
 80106a4:	d129      	bne.n	80106fa <_printf_float+0x172>
 80106a6:	1cc8      	adds	r0, r1, #3
 80106a8:	db02      	blt.n	80106b0 <_printf_float+0x128>
 80106aa:	6863      	ldr	r3, [r4, #4]
 80106ac:	4299      	cmp	r1, r3
 80106ae:	dd41      	ble.n	8010734 <_printf_float+0x1ac>
 80106b0:	f1aa 0a02 	sub.w	sl, sl, #2
 80106b4:	fa5f fa8a 	uxtb.w	sl, sl
 80106b8:	3901      	subs	r1, #1
 80106ba:	4652      	mov	r2, sl
 80106bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80106c0:	9109      	str	r1, [sp, #36]	@ 0x24
 80106c2:	f7ff ff26 	bl	8010512 <__exponent>
 80106c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80106c8:	1813      	adds	r3, r2, r0
 80106ca:	2a01      	cmp	r2, #1
 80106cc:	4681      	mov	r9, r0
 80106ce:	6123      	str	r3, [r4, #16]
 80106d0:	dc02      	bgt.n	80106d8 <_printf_float+0x150>
 80106d2:	6822      	ldr	r2, [r4, #0]
 80106d4:	07d2      	lsls	r2, r2, #31
 80106d6:	d501      	bpl.n	80106dc <_printf_float+0x154>
 80106d8:	3301      	adds	r3, #1
 80106da:	6123      	str	r3, [r4, #16]
 80106dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d0a2      	beq.n	801062a <_printf_float+0xa2>
 80106e4:	232d      	movs	r3, #45	@ 0x2d
 80106e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80106ea:	e79e      	b.n	801062a <_printf_float+0xa2>
 80106ec:	9a06      	ldr	r2, [sp, #24]
 80106ee:	2a47      	cmp	r2, #71	@ 0x47
 80106f0:	d1c2      	bne.n	8010678 <_printf_float+0xf0>
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d1c0      	bne.n	8010678 <_printf_float+0xf0>
 80106f6:	2301      	movs	r3, #1
 80106f8:	e7bd      	b.n	8010676 <_printf_float+0xee>
 80106fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80106fe:	d9db      	bls.n	80106b8 <_printf_float+0x130>
 8010700:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010704:	d118      	bne.n	8010738 <_printf_float+0x1b0>
 8010706:	2900      	cmp	r1, #0
 8010708:	6863      	ldr	r3, [r4, #4]
 801070a:	dd0b      	ble.n	8010724 <_printf_float+0x19c>
 801070c:	6121      	str	r1, [r4, #16]
 801070e:	b913      	cbnz	r3, 8010716 <_printf_float+0x18e>
 8010710:	6822      	ldr	r2, [r4, #0]
 8010712:	07d0      	lsls	r0, r2, #31
 8010714:	d502      	bpl.n	801071c <_printf_float+0x194>
 8010716:	3301      	adds	r3, #1
 8010718:	440b      	add	r3, r1
 801071a:	6123      	str	r3, [r4, #16]
 801071c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801071e:	f04f 0900 	mov.w	r9, #0
 8010722:	e7db      	b.n	80106dc <_printf_float+0x154>
 8010724:	b913      	cbnz	r3, 801072c <_printf_float+0x1a4>
 8010726:	6822      	ldr	r2, [r4, #0]
 8010728:	07d2      	lsls	r2, r2, #31
 801072a:	d501      	bpl.n	8010730 <_printf_float+0x1a8>
 801072c:	3302      	adds	r3, #2
 801072e:	e7f4      	b.n	801071a <_printf_float+0x192>
 8010730:	2301      	movs	r3, #1
 8010732:	e7f2      	b.n	801071a <_printf_float+0x192>
 8010734:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010738:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801073a:	4299      	cmp	r1, r3
 801073c:	db05      	blt.n	801074a <_printf_float+0x1c2>
 801073e:	6823      	ldr	r3, [r4, #0]
 8010740:	6121      	str	r1, [r4, #16]
 8010742:	07d8      	lsls	r0, r3, #31
 8010744:	d5ea      	bpl.n	801071c <_printf_float+0x194>
 8010746:	1c4b      	adds	r3, r1, #1
 8010748:	e7e7      	b.n	801071a <_printf_float+0x192>
 801074a:	2900      	cmp	r1, #0
 801074c:	bfd4      	ite	le
 801074e:	f1c1 0202 	rsble	r2, r1, #2
 8010752:	2201      	movgt	r2, #1
 8010754:	4413      	add	r3, r2
 8010756:	e7e0      	b.n	801071a <_printf_float+0x192>
 8010758:	6823      	ldr	r3, [r4, #0]
 801075a:	055a      	lsls	r2, r3, #21
 801075c:	d407      	bmi.n	801076e <_printf_float+0x1e6>
 801075e:	6923      	ldr	r3, [r4, #16]
 8010760:	4642      	mov	r2, r8
 8010762:	4631      	mov	r1, r6
 8010764:	4628      	mov	r0, r5
 8010766:	47b8      	blx	r7
 8010768:	3001      	adds	r0, #1
 801076a:	d12b      	bne.n	80107c4 <_printf_float+0x23c>
 801076c:	e767      	b.n	801063e <_printf_float+0xb6>
 801076e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010772:	f240 80dd 	bls.w	8010930 <_printf_float+0x3a8>
 8010776:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801077a:	2200      	movs	r2, #0
 801077c:	2300      	movs	r3, #0
 801077e:	f7f0 f9ab 	bl	8000ad8 <__aeabi_dcmpeq>
 8010782:	2800      	cmp	r0, #0
 8010784:	d033      	beq.n	80107ee <_printf_float+0x266>
 8010786:	4a37      	ldr	r2, [pc, #220]	@ (8010864 <_printf_float+0x2dc>)
 8010788:	2301      	movs	r3, #1
 801078a:	4631      	mov	r1, r6
 801078c:	4628      	mov	r0, r5
 801078e:	47b8      	blx	r7
 8010790:	3001      	adds	r0, #1
 8010792:	f43f af54 	beq.w	801063e <_printf_float+0xb6>
 8010796:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801079a:	4543      	cmp	r3, r8
 801079c:	db02      	blt.n	80107a4 <_printf_float+0x21c>
 801079e:	6823      	ldr	r3, [r4, #0]
 80107a0:	07d8      	lsls	r0, r3, #31
 80107a2:	d50f      	bpl.n	80107c4 <_printf_float+0x23c>
 80107a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80107a8:	4631      	mov	r1, r6
 80107aa:	4628      	mov	r0, r5
 80107ac:	47b8      	blx	r7
 80107ae:	3001      	adds	r0, #1
 80107b0:	f43f af45 	beq.w	801063e <_printf_float+0xb6>
 80107b4:	f04f 0900 	mov.w	r9, #0
 80107b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80107bc:	f104 0a1a 	add.w	sl, r4, #26
 80107c0:	45c8      	cmp	r8, r9
 80107c2:	dc09      	bgt.n	80107d8 <_printf_float+0x250>
 80107c4:	6823      	ldr	r3, [r4, #0]
 80107c6:	079b      	lsls	r3, r3, #30
 80107c8:	f100 8103 	bmi.w	80109d2 <_printf_float+0x44a>
 80107cc:	68e0      	ldr	r0, [r4, #12]
 80107ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80107d0:	4298      	cmp	r0, r3
 80107d2:	bfb8      	it	lt
 80107d4:	4618      	movlt	r0, r3
 80107d6:	e734      	b.n	8010642 <_printf_float+0xba>
 80107d8:	2301      	movs	r3, #1
 80107da:	4652      	mov	r2, sl
 80107dc:	4631      	mov	r1, r6
 80107de:	4628      	mov	r0, r5
 80107e0:	47b8      	blx	r7
 80107e2:	3001      	adds	r0, #1
 80107e4:	f43f af2b 	beq.w	801063e <_printf_float+0xb6>
 80107e8:	f109 0901 	add.w	r9, r9, #1
 80107ec:	e7e8      	b.n	80107c0 <_printf_float+0x238>
 80107ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	dc39      	bgt.n	8010868 <_printf_float+0x2e0>
 80107f4:	4a1b      	ldr	r2, [pc, #108]	@ (8010864 <_printf_float+0x2dc>)
 80107f6:	2301      	movs	r3, #1
 80107f8:	4631      	mov	r1, r6
 80107fa:	4628      	mov	r0, r5
 80107fc:	47b8      	blx	r7
 80107fe:	3001      	adds	r0, #1
 8010800:	f43f af1d 	beq.w	801063e <_printf_float+0xb6>
 8010804:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010808:	ea59 0303 	orrs.w	r3, r9, r3
 801080c:	d102      	bne.n	8010814 <_printf_float+0x28c>
 801080e:	6823      	ldr	r3, [r4, #0]
 8010810:	07d9      	lsls	r1, r3, #31
 8010812:	d5d7      	bpl.n	80107c4 <_printf_float+0x23c>
 8010814:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010818:	4631      	mov	r1, r6
 801081a:	4628      	mov	r0, r5
 801081c:	47b8      	blx	r7
 801081e:	3001      	adds	r0, #1
 8010820:	f43f af0d 	beq.w	801063e <_printf_float+0xb6>
 8010824:	f04f 0a00 	mov.w	sl, #0
 8010828:	f104 0b1a 	add.w	fp, r4, #26
 801082c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801082e:	425b      	negs	r3, r3
 8010830:	4553      	cmp	r3, sl
 8010832:	dc01      	bgt.n	8010838 <_printf_float+0x2b0>
 8010834:	464b      	mov	r3, r9
 8010836:	e793      	b.n	8010760 <_printf_float+0x1d8>
 8010838:	2301      	movs	r3, #1
 801083a:	465a      	mov	r2, fp
 801083c:	4631      	mov	r1, r6
 801083e:	4628      	mov	r0, r5
 8010840:	47b8      	blx	r7
 8010842:	3001      	adds	r0, #1
 8010844:	f43f aefb 	beq.w	801063e <_printf_float+0xb6>
 8010848:	f10a 0a01 	add.w	sl, sl, #1
 801084c:	e7ee      	b.n	801082c <_printf_float+0x2a4>
 801084e:	bf00      	nop
 8010850:	7fefffff 	.word	0x7fefffff
 8010854:	08015098 	.word	0x08015098
 8010858:	0801509c 	.word	0x0801509c
 801085c:	080150a0 	.word	0x080150a0
 8010860:	080150a4 	.word	0x080150a4
 8010864:	080150a8 	.word	0x080150a8
 8010868:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801086a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801086e:	4553      	cmp	r3, sl
 8010870:	bfa8      	it	ge
 8010872:	4653      	movge	r3, sl
 8010874:	2b00      	cmp	r3, #0
 8010876:	4699      	mov	r9, r3
 8010878:	dc36      	bgt.n	80108e8 <_printf_float+0x360>
 801087a:	f04f 0b00 	mov.w	fp, #0
 801087e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010882:	f104 021a 	add.w	r2, r4, #26
 8010886:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010888:	9306      	str	r3, [sp, #24]
 801088a:	eba3 0309 	sub.w	r3, r3, r9
 801088e:	455b      	cmp	r3, fp
 8010890:	dc31      	bgt.n	80108f6 <_printf_float+0x36e>
 8010892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010894:	459a      	cmp	sl, r3
 8010896:	dc3a      	bgt.n	801090e <_printf_float+0x386>
 8010898:	6823      	ldr	r3, [r4, #0]
 801089a:	07da      	lsls	r2, r3, #31
 801089c:	d437      	bmi.n	801090e <_printf_float+0x386>
 801089e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108a0:	ebaa 0903 	sub.w	r9, sl, r3
 80108a4:	9b06      	ldr	r3, [sp, #24]
 80108a6:	ebaa 0303 	sub.w	r3, sl, r3
 80108aa:	4599      	cmp	r9, r3
 80108ac:	bfa8      	it	ge
 80108ae:	4699      	movge	r9, r3
 80108b0:	f1b9 0f00 	cmp.w	r9, #0
 80108b4:	dc33      	bgt.n	801091e <_printf_float+0x396>
 80108b6:	f04f 0800 	mov.w	r8, #0
 80108ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80108be:	f104 0b1a 	add.w	fp, r4, #26
 80108c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108c4:	ebaa 0303 	sub.w	r3, sl, r3
 80108c8:	eba3 0309 	sub.w	r3, r3, r9
 80108cc:	4543      	cmp	r3, r8
 80108ce:	f77f af79 	ble.w	80107c4 <_printf_float+0x23c>
 80108d2:	2301      	movs	r3, #1
 80108d4:	465a      	mov	r2, fp
 80108d6:	4631      	mov	r1, r6
 80108d8:	4628      	mov	r0, r5
 80108da:	47b8      	blx	r7
 80108dc:	3001      	adds	r0, #1
 80108de:	f43f aeae 	beq.w	801063e <_printf_float+0xb6>
 80108e2:	f108 0801 	add.w	r8, r8, #1
 80108e6:	e7ec      	b.n	80108c2 <_printf_float+0x33a>
 80108e8:	4642      	mov	r2, r8
 80108ea:	4631      	mov	r1, r6
 80108ec:	4628      	mov	r0, r5
 80108ee:	47b8      	blx	r7
 80108f0:	3001      	adds	r0, #1
 80108f2:	d1c2      	bne.n	801087a <_printf_float+0x2f2>
 80108f4:	e6a3      	b.n	801063e <_printf_float+0xb6>
 80108f6:	2301      	movs	r3, #1
 80108f8:	4631      	mov	r1, r6
 80108fa:	4628      	mov	r0, r5
 80108fc:	9206      	str	r2, [sp, #24]
 80108fe:	47b8      	blx	r7
 8010900:	3001      	adds	r0, #1
 8010902:	f43f ae9c 	beq.w	801063e <_printf_float+0xb6>
 8010906:	9a06      	ldr	r2, [sp, #24]
 8010908:	f10b 0b01 	add.w	fp, fp, #1
 801090c:	e7bb      	b.n	8010886 <_printf_float+0x2fe>
 801090e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010912:	4631      	mov	r1, r6
 8010914:	4628      	mov	r0, r5
 8010916:	47b8      	blx	r7
 8010918:	3001      	adds	r0, #1
 801091a:	d1c0      	bne.n	801089e <_printf_float+0x316>
 801091c:	e68f      	b.n	801063e <_printf_float+0xb6>
 801091e:	9a06      	ldr	r2, [sp, #24]
 8010920:	464b      	mov	r3, r9
 8010922:	4442      	add	r2, r8
 8010924:	4631      	mov	r1, r6
 8010926:	4628      	mov	r0, r5
 8010928:	47b8      	blx	r7
 801092a:	3001      	adds	r0, #1
 801092c:	d1c3      	bne.n	80108b6 <_printf_float+0x32e>
 801092e:	e686      	b.n	801063e <_printf_float+0xb6>
 8010930:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010934:	f1ba 0f01 	cmp.w	sl, #1
 8010938:	dc01      	bgt.n	801093e <_printf_float+0x3b6>
 801093a:	07db      	lsls	r3, r3, #31
 801093c:	d536      	bpl.n	80109ac <_printf_float+0x424>
 801093e:	2301      	movs	r3, #1
 8010940:	4642      	mov	r2, r8
 8010942:	4631      	mov	r1, r6
 8010944:	4628      	mov	r0, r5
 8010946:	47b8      	blx	r7
 8010948:	3001      	adds	r0, #1
 801094a:	f43f ae78 	beq.w	801063e <_printf_float+0xb6>
 801094e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010952:	4631      	mov	r1, r6
 8010954:	4628      	mov	r0, r5
 8010956:	47b8      	blx	r7
 8010958:	3001      	adds	r0, #1
 801095a:	f43f ae70 	beq.w	801063e <_printf_float+0xb6>
 801095e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010962:	2200      	movs	r2, #0
 8010964:	2300      	movs	r3, #0
 8010966:	f10a 3aff 	add.w	sl, sl, #4294967295
 801096a:	f7f0 f8b5 	bl	8000ad8 <__aeabi_dcmpeq>
 801096e:	b9c0      	cbnz	r0, 80109a2 <_printf_float+0x41a>
 8010970:	4653      	mov	r3, sl
 8010972:	f108 0201 	add.w	r2, r8, #1
 8010976:	4631      	mov	r1, r6
 8010978:	4628      	mov	r0, r5
 801097a:	47b8      	blx	r7
 801097c:	3001      	adds	r0, #1
 801097e:	d10c      	bne.n	801099a <_printf_float+0x412>
 8010980:	e65d      	b.n	801063e <_printf_float+0xb6>
 8010982:	2301      	movs	r3, #1
 8010984:	465a      	mov	r2, fp
 8010986:	4631      	mov	r1, r6
 8010988:	4628      	mov	r0, r5
 801098a:	47b8      	blx	r7
 801098c:	3001      	adds	r0, #1
 801098e:	f43f ae56 	beq.w	801063e <_printf_float+0xb6>
 8010992:	f108 0801 	add.w	r8, r8, #1
 8010996:	45d0      	cmp	r8, sl
 8010998:	dbf3      	blt.n	8010982 <_printf_float+0x3fa>
 801099a:	464b      	mov	r3, r9
 801099c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80109a0:	e6df      	b.n	8010762 <_printf_float+0x1da>
 80109a2:	f04f 0800 	mov.w	r8, #0
 80109a6:	f104 0b1a 	add.w	fp, r4, #26
 80109aa:	e7f4      	b.n	8010996 <_printf_float+0x40e>
 80109ac:	2301      	movs	r3, #1
 80109ae:	4642      	mov	r2, r8
 80109b0:	e7e1      	b.n	8010976 <_printf_float+0x3ee>
 80109b2:	2301      	movs	r3, #1
 80109b4:	464a      	mov	r2, r9
 80109b6:	4631      	mov	r1, r6
 80109b8:	4628      	mov	r0, r5
 80109ba:	47b8      	blx	r7
 80109bc:	3001      	adds	r0, #1
 80109be:	f43f ae3e 	beq.w	801063e <_printf_float+0xb6>
 80109c2:	f108 0801 	add.w	r8, r8, #1
 80109c6:	68e3      	ldr	r3, [r4, #12]
 80109c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80109ca:	1a5b      	subs	r3, r3, r1
 80109cc:	4543      	cmp	r3, r8
 80109ce:	dcf0      	bgt.n	80109b2 <_printf_float+0x42a>
 80109d0:	e6fc      	b.n	80107cc <_printf_float+0x244>
 80109d2:	f04f 0800 	mov.w	r8, #0
 80109d6:	f104 0919 	add.w	r9, r4, #25
 80109da:	e7f4      	b.n	80109c6 <_printf_float+0x43e>

080109dc <_printf_common>:
 80109dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109e0:	4616      	mov	r6, r2
 80109e2:	4698      	mov	r8, r3
 80109e4:	688a      	ldr	r2, [r1, #8]
 80109e6:	690b      	ldr	r3, [r1, #16]
 80109e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80109ec:	4293      	cmp	r3, r2
 80109ee:	bfb8      	it	lt
 80109f0:	4613      	movlt	r3, r2
 80109f2:	6033      	str	r3, [r6, #0]
 80109f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80109f8:	4607      	mov	r7, r0
 80109fa:	460c      	mov	r4, r1
 80109fc:	b10a      	cbz	r2, 8010a02 <_printf_common+0x26>
 80109fe:	3301      	adds	r3, #1
 8010a00:	6033      	str	r3, [r6, #0]
 8010a02:	6823      	ldr	r3, [r4, #0]
 8010a04:	0699      	lsls	r1, r3, #26
 8010a06:	bf42      	ittt	mi
 8010a08:	6833      	ldrmi	r3, [r6, #0]
 8010a0a:	3302      	addmi	r3, #2
 8010a0c:	6033      	strmi	r3, [r6, #0]
 8010a0e:	6825      	ldr	r5, [r4, #0]
 8010a10:	f015 0506 	ands.w	r5, r5, #6
 8010a14:	d106      	bne.n	8010a24 <_printf_common+0x48>
 8010a16:	f104 0a19 	add.w	sl, r4, #25
 8010a1a:	68e3      	ldr	r3, [r4, #12]
 8010a1c:	6832      	ldr	r2, [r6, #0]
 8010a1e:	1a9b      	subs	r3, r3, r2
 8010a20:	42ab      	cmp	r3, r5
 8010a22:	dc26      	bgt.n	8010a72 <_printf_common+0x96>
 8010a24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010a28:	6822      	ldr	r2, [r4, #0]
 8010a2a:	3b00      	subs	r3, #0
 8010a2c:	bf18      	it	ne
 8010a2e:	2301      	movne	r3, #1
 8010a30:	0692      	lsls	r2, r2, #26
 8010a32:	d42b      	bmi.n	8010a8c <_printf_common+0xb0>
 8010a34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010a38:	4641      	mov	r1, r8
 8010a3a:	4638      	mov	r0, r7
 8010a3c:	47c8      	blx	r9
 8010a3e:	3001      	adds	r0, #1
 8010a40:	d01e      	beq.n	8010a80 <_printf_common+0xa4>
 8010a42:	6823      	ldr	r3, [r4, #0]
 8010a44:	6922      	ldr	r2, [r4, #16]
 8010a46:	f003 0306 	and.w	r3, r3, #6
 8010a4a:	2b04      	cmp	r3, #4
 8010a4c:	bf02      	ittt	eq
 8010a4e:	68e5      	ldreq	r5, [r4, #12]
 8010a50:	6833      	ldreq	r3, [r6, #0]
 8010a52:	1aed      	subeq	r5, r5, r3
 8010a54:	68a3      	ldr	r3, [r4, #8]
 8010a56:	bf0c      	ite	eq
 8010a58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010a5c:	2500      	movne	r5, #0
 8010a5e:	4293      	cmp	r3, r2
 8010a60:	bfc4      	itt	gt
 8010a62:	1a9b      	subgt	r3, r3, r2
 8010a64:	18ed      	addgt	r5, r5, r3
 8010a66:	2600      	movs	r6, #0
 8010a68:	341a      	adds	r4, #26
 8010a6a:	42b5      	cmp	r5, r6
 8010a6c:	d11a      	bne.n	8010aa4 <_printf_common+0xc8>
 8010a6e:	2000      	movs	r0, #0
 8010a70:	e008      	b.n	8010a84 <_printf_common+0xa8>
 8010a72:	2301      	movs	r3, #1
 8010a74:	4652      	mov	r2, sl
 8010a76:	4641      	mov	r1, r8
 8010a78:	4638      	mov	r0, r7
 8010a7a:	47c8      	blx	r9
 8010a7c:	3001      	adds	r0, #1
 8010a7e:	d103      	bne.n	8010a88 <_printf_common+0xac>
 8010a80:	f04f 30ff 	mov.w	r0, #4294967295
 8010a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a88:	3501      	adds	r5, #1
 8010a8a:	e7c6      	b.n	8010a1a <_printf_common+0x3e>
 8010a8c:	18e1      	adds	r1, r4, r3
 8010a8e:	1c5a      	adds	r2, r3, #1
 8010a90:	2030      	movs	r0, #48	@ 0x30
 8010a92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010a96:	4422      	add	r2, r4
 8010a98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010a9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010aa0:	3302      	adds	r3, #2
 8010aa2:	e7c7      	b.n	8010a34 <_printf_common+0x58>
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	4622      	mov	r2, r4
 8010aa8:	4641      	mov	r1, r8
 8010aaa:	4638      	mov	r0, r7
 8010aac:	47c8      	blx	r9
 8010aae:	3001      	adds	r0, #1
 8010ab0:	d0e6      	beq.n	8010a80 <_printf_common+0xa4>
 8010ab2:	3601      	adds	r6, #1
 8010ab4:	e7d9      	b.n	8010a6a <_printf_common+0x8e>
	...

08010ab8 <_printf_i>:
 8010ab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010abc:	7e0f      	ldrb	r7, [r1, #24]
 8010abe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010ac0:	2f78      	cmp	r7, #120	@ 0x78
 8010ac2:	4691      	mov	r9, r2
 8010ac4:	4680      	mov	r8, r0
 8010ac6:	460c      	mov	r4, r1
 8010ac8:	469a      	mov	sl, r3
 8010aca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010ace:	d807      	bhi.n	8010ae0 <_printf_i+0x28>
 8010ad0:	2f62      	cmp	r7, #98	@ 0x62
 8010ad2:	d80a      	bhi.n	8010aea <_printf_i+0x32>
 8010ad4:	2f00      	cmp	r7, #0
 8010ad6:	f000 80d2 	beq.w	8010c7e <_printf_i+0x1c6>
 8010ada:	2f58      	cmp	r7, #88	@ 0x58
 8010adc:	f000 80b9 	beq.w	8010c52 <_printf_i+0x19a>
 8010ae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010ae4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010ae8:	e03a      	b.n	8010b60 <_printf_i+0xa8>
 8010aea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010aee:	2b15      	cmp	r3, #21
 8010af0:	d8f6      	bhi.n	8010ae0 <_printf_i+0x28>
 8010af2:	a101      	add	r1, pc, #4	@ (adr r1, 8010af8 <_printf_i+0x40>)
 8010af4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010af8:	08010b51 	.word	0x08010b51
 8010afc:	08010b65 	.word	0x08010b65
 8010b00:	08010ae1 	.word	0x08010ae1
 8010b04:	08010ae1 	.word	0x08010ae1
 8010b08:	08010ae1 	.word	0x08010ae1
 8010b0c:	08010ae1 	.word	0x08010ae1
 8010b10:	08010b65 	.word	0x08010b65
 8010b14:	08010ae1 	.word	0x08010ae1
 8010b18:	08010ae1 	.word	0x08010ae1
 8010b1c:	08010ae1 	.word	0x08010ae1
 8010b20:	08010ae1 	.word	0x08010ae1
 8010b24:	08010c65 	.word	0x08010c65
 8010b28:	08010b8f 	.word	0x08010b8f
 8010b2c:	08010c1f 	.word	0x08010c1f
 8010b30:	08010ae1 	.word	0x08010ae1
 8010b34:	08010ae1 	.word	0x08010ae1
 8010b38:	08010c87 	.word	0x08010c87
 8010b3c:	08010ae1 	.word	0x08010ae1
 8010b40:	08010b8f 	.word	0x08010b8f
 8010b44:	08010ae1 	.word	0x08010ae1
 8010b48:	08010ae1 	.word	0x08010ae1
 8010b4c:	08010c27 	.word	0x08010c27
 8010b50:	6833      	ldr	r3, [r6, #0]
 8010b52:	1d1a      	adds	r2, r3, #4
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	6032      	str	r2, [r6, #0]
 8010b58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010b5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010b60:	2301      	movs	r3, #1
 8010b62:	e09d      	b.n	8010ca0 <_printf_i+0x1e8>
 8010b64:	6833      	ldr	r3, [r6, #0]
 8010b66:	6820      	ldr	r0, [r4, #0]
 8010b68:	1d19      	adds	r1, r3, #4
 8010b6a:	6031      	str	r1, [r6, #0]
 8010b6c:	0606      	lsls	r6, r0, #24
 8010b6e:	d501      	bpl.n	8010b74 <_printf_i+0xbc>
 8010b70:	681d      	ldr	r5, [r3, #0]
 8010b72:	e003      	b.n	8010b7c <_printf_i+0xc4>
 8010b74:	0645      	lsls	r5, r0, #25
 8010b76:	d5fb      	bpl.n	8010b70 <_printf_i+0xb8>
 8010b78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010b7c:	2d00      	cmp	r5, #0
 8010b7e:	da03      	bge.n	8010b88 <_printf_i+0xd0>
 8010b80:	232d      	movs	r3, #45	@ 0x2d
 8010b82:	426d      	negs	r5, r5
 8010b84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010b88:	4859      	ldr	r0, [pc, #356]	@ (8010cf0 <_printf_i+0x238>)
 8010b8a:	230a      	movs	r3, #10
 8010b8c:	e011      	b.n	8010bb2 <_printf_i+0xfa>
 8010b8e:	6821      	ldr	r1, [r4, #0]
 8010b90:	6833      	ldr	r3, [r6, #0]
 8010b92:	0608      	lsls	r0, r1, #24
 8010b94:	f853 5b04 	ldr.w	r5, [r3], #4
 8010b98:	d402      	bmi.n	8010ba0 <_printf_i+0xe8>
 8010b9a:	0649      	lsls	r1, r1, #25
 8010b9c:	bf48      	it	mi
 8010b9e:	b2ad      	uxthmi	r5, r5
 8010ba0:	2f6f      	cmp	r7, #111	@ 0x6f
 8010ba2:	4853      	ldr	r0, [pc, #332]	@ (8010cf0 <_printf_i+0x238>)
 8010ba4:	6033      	str	r3, [r6, #0]
 8010ba6:	bf14      	ite	ne
 8010ba8:	230a      	movne	r3, #10
 8010baa:	2308      	moveq	r3, #8
 8010bac:	2100      	movs	r1, #0
 8010bae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010bb2:	6866      	ldr	r6, [r4, #4]
 8010bb4:	60a6      	str	r6, [r4, #8]
 8010bb6:	2e00      	cmp	r6, #0
 8010bb8:	bfa2      	ittt	ge
 8010bba:	6821      	ldrge	r1, [r4, #0]
 8010bbc:	f021 0104 	bicge.w	r1, r1, #4
 8010bc0:	6021      	strge	r1, [r4, #0]
 8010bc2:	b90d      	cbnz	r5, 8010bc8 <_printf_i+0x110>
 8010bc4:	2e00      	cmp	r6, #0
 8010bc6:	d04b      	beq.n	8010c60 <_printf_i+0x1a8>
 8010bc8:	4616      	mov	r6, r2
 8010bca:	fbb5 f1f3 	udiv	r1, r5, r3
 8010bce:	fb03 5711 	mls	r7, r3, r1, r5
 8010bd2:	5dc7      	ldrb	r7, [r0, r7]
 8010bd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010bd8:	462f      	mov	r7, r5
 8010bda:	42bb      	cmp	r3, r7
 8010bdc:	460d      	mov	r5, r1
 8010bde:	d9f4      	bls.n	8010bca <_printf_i+0x112>
 8010be0:	2b08      	cmp	r3, #8
 8010be2:	d10b      	bne.n	8010bfc <_printf_i+0x144>
 8010be4:	6823      	ldr	r3, [r4, #0]
 8010be6:	07df      	lsls	r7, r3, #31
 8010be8:	d508      	bpl.n	8010bfc <_printf_i+0x144>
 8010bea:	6923      	ldr	r3, [r4, #16]
 8010bec:	6861      	ldr	r1, [r4, #4]
 8010bee:	4299      	cmp	r1, r3
 8010bf0:	bfde      	ittt	le
 8010bf2:	2330      	movle	r3, #48	@ 0x30
 8010bf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010bf8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010bfc:	1b92      	subs	r2, r2, r6
 8010bfe:	6122      	str	r2, [r4, #16]
 8010c00:	f8cd a000 	str.w	sl, [sp]
 8010c04:	464b      	mov	r3, r9
 8010c06:	aa03      	add	r2, sp, #12
 8010c08:	4621      	mov	r1, r4
 8010c0a:	4640      	mov	r0, r8
 8010c0c:	f7ff fee6 	bl	80109dc <_printf_common>
 8010c10:	3001      	adds	r0, #1
 8010c12:	d14a      	bne.n	8010caa <_printf_i+0x1f2>
 8010c14:	f04f 30ff 	mov.w	r0, #4294967295
 8010c18:	b004      	add	sp, #16
 8010c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c1e:	6823      	ldr	r3, [r4, #0]
 8010c20:	f043 0320 	orr.w	r3, r3, #32
 8010c24:	6023      	str	r3, [r4, #0]
 8010c26:	4833      	ldr	r0, [pc, #204]	@ (8010cf4 <_printf_i+0x23c>)
 8010c28:	2778      	movs	r7, #120	@ 0x78
 8010c2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010c2e:	6823      	ldr	r3, [r4, #0]
 8010c30:	6831      	ldr	r1, [r6, #0]
 8010c32:	061f      	lsls	r7, r3, #24
 8010c34:	f851 5b04 	ldr.w	r5, [r1], #4
 8010c38:	d402      	bmi.n	8010c40 <_printf_i+0x188>
 8010c3a:	065f      	lsls	r7, r3, #25
 8010c3c:	bf48      	it	mi
 8010c3e:	b2ad      	uxthmi	r5, r5
 8010c40:	6031      	str	r1, [r6, #0]
 8010c42:	07d9      	lsls	r1, r3, #31
 8010c44:	bf44      	itt	mi
 8010c46:	f043 0320 	orrmi.w	r3, r3, #32
 8010c4a:	6023      	strmi	r3, [r4, #0]
 8010c4c:	b11d      	cbz	r5, 8010c56 <_printf_i+0x19e>
 8010c4e:	2310      	movs	r3, #16
 8010c50:	e7ac      	b.n	8010bac <_printf_i+0xf4>
 8010c52:	4827      	ldr	r0, [pc, #156]	@ (8010cf0 <_printf_i+0x238>)
 8010c54:	e7e9      	b.n	8010c2a <_printf_i+0x172>
 8010c56:	6823      	ldr	r3, [r4, #0]
 8010c58:	f023 0320 	bic.w	r3, r3, #32
 8010c5c:	6023      	str	r3, [r4, #0]
 8010c5e:	e7f6      	b.n	8010c4e <_printf_i+0x196>
 8010c60:	4616      	mov	r6, r2
 8010c62:	e7bd      	b.n	8010be0 <_printf_i+0x128>
 8010c64:	6833      	ldr	r3, [r6, #0]
 8010c66:	6825      	ldr	r5, [r4, #0]
 8010c68:	6961      	ldr	r1, [r4, #20]
 8010c6a:	1d18      	adds	r0, r3, #4
 8010c6c:	6030      	str	r0, [r6, #0]
 8010c6e:	062e      	lsls	r6, r5, #24
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	d501      	bpl.n	8010c78 <_printf_i+0x1c0>
 8010c74:	6019      	str	r1, [r3, #0]
 8010c76:	e002      	b.n	8010c7e <_printf_i+0x1c6>
 8010c78:	0668      	lsls	r0, r5, #25
 8010c7a:	d5fb      	bpl.n	8010c74 <_printf_i+0x1bc>
 8010c7c:	8019      	strh	r1, [r3, #0]
 8010c7e:	2300      	movs	r3, #0
 8010c80:	6123      	str	r3, [r4, #16]
 8010c82:	4616      	mov	r6, r2
 8010c84:	e7bc      	b.n	8010c00 <_printf_i+0x148>
 8010c86:	6833      	ldr	r3, [r6, #0]
 8010c88:	1d1a      	adds	r2, r3, #4
 8010c8a:	6032      	str	r2, [r6, #0]
 8010c8c:	681e      	ldr	r6, [r3, #0]
 8010c8e:	6862      	ldr	r2, [r4, #4]
 8010c90:	2100      	movs	r1, #0
 8010c92:	4630      	mov	r0, r6
 8010c94:	f7ef faa4 	bl	80001e0 <memchr>
 8010c98:	b108      	cbz	r0, 8010c9e <_printf_i+0x1e6>
 8010c9a:	1b80      	subs	r0, r0, r6
 8010c9c:	6060      	str	r0, [r4, #4]
 8010c9e:	6863      	ldr	r3, [r4, #4]
 8010ca0:	6123      	str	r3, [r4, #16]
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ca8:	e7aa      	b.n	8010c00 <_printf_i+0x148>
 8010caa:	6923      	ldr	r3, [r4, #16]
 8010cac:	4632      	mov	r2, r6
 8010cae:	4649      	mov	r1, r9
 8010cb0:	4640      	mov	r0, r8
 8010cb2:	47d0      	blx	sl
 8010cb4:	3001      	adds	r0, #1
 8010cb6:	d0ad      	beq.n	8010c14 <_printf_i+0x15c>
 8010cb8:	6823      	ldr	r3, [r4, #0]
 8010cba:	079b      	lsls	r3, r3, #30
 8010cbc:	d413      	bmi.n	8010ce6 <_printf_i+0x22e>
 8010cbe:	68e0      	ldr	r0, [r4, #12]
 8010cc0:	9b03      	ldr	r3, [sp, #12]
 8010cc2:	4298      	cmp	r0, r3
 8010cc4:	bfb8      	it	lt
 8010cc6:	4618      	movlt	r0, r3
 8010cc8:	e7a6      	b.n	8010c18 <_printf_i+0x160>
 8010cca:	2301      	movs	r3, #1
 8010ccc:	4632      	mov	r2, r6
 8010cce:	4649      	mov	r1, r9
 8010cd0:	4640      	mov	r0, r8
 8010cd2:	47d0      	blx	sl
 8010cd4:	3001      	adds	r0, #1
 8010cd6:	d09d      	beq.n	8010c14 <_printf_i+0x15c>
 8010cd8:	3501      	adds	r5, #1
 8010cda:	68e3      	ldr	r3, [r4, #12]
 8010cdc:	9903      	ldr	r1, [sp, #12]
 8010cde:	1a5b      	subs	r3, r3, r1
 8010ce0:	42ab      	cmp	r3, r5
 8010ce2:	dcf2      	bgt.n	8010cca <_printf_i+0x212>
 8010ce4:	e7eb      	b.n	8010cbe <_printf_i+0x206>
 8010ce6:	2500      	movs	r5, #0
 8010ce8:	f104 0619 	add.w	r6, r4, #25
 8010cec:	e7f5      	b.n	8010cda <_printf_i+0x222>
 8010cee:	bf00      	nop
 8010cf0:	080150aa 	.word	0x080150aa
 8010cf4:	080150bb 	.word	0x080150bb

08010cf8 <std>:
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	b510      	push	{r4, lr}
 8010cfc:	4604      	mov	r4, r0
 8010cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8010d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010d06:	6083      	str	r3, [r0, #8]
 8010d08:	8181      	strh	r1, [r0, #12]
 8010d0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8010d0c:	81c2      	strh	r2, [r0, #14]
 8010d0e:	6183      	str	r3, [r0, #24]
 8010d10:	4619      	mov	r1, r3
 8010d12:	2208      	movs	r2, #8
 8010d14:	305c      	adds	r0, #92	@ 0x5c
 8010d16:	f000 fa07 	bl	8011128 <memset>
 8010d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8010d50 <std+0x58>)
 8010d1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8010d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8010d54 <std+0x5c>)
 8010d20:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010d22:	4b0d      	ldr	r3, [pc, #52]	@ (8010d58 <std+0x60>)
 8010d24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010d26:	4b0d      	ldr	r3, [pc, #52]	@ (8010d5c <std+0x64>)
 8010d28:	6323      	str	r3, [r4, #48]	@ 0x30
 8010d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8010d60 <std+0x68>)
 8010d2c:	6224      	str	r4, [r4, #32]
 8010d2e:	429c      	cmp	r4, r3
 8010d30:	d006      	beq.n	8010d40 <std+0x48>
 8010d32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010d36:	4294      	cmp	r4, r2
 8010d38:	d002      	beq.n	8010d40 <std+0x48>
 8010d3a:	33d0      	adds	r3, #208	@ 0xd0
 8010d3c:	429c      	cmp	r4, r3
 8010d3e:	d105      	bne.n	8010d4c <std+0x54>
 8010d40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d48:	f000 ba6a 	b.w	8011220 <__retarget_lock_init_recursive>
 8010d4c:	bd10      	pop	{r4, pc}
 8010d4e:	bf00      	nop
 8010d50:	08010f79 	.word	0x08010f79
 8010d54:	08010f9b 	.word	0x08010f9b
 8010d58:	08010fd3 	.word	0x08010fd3
 8010d5c:	08010ff7 	.word	0x08010ff7
 8010d60:	20002e78 	.word	0x20002e78

08010d64 <stdio_exit_handler>:
 8010d64:	4a02      	ldr	r2, [pc, #8]	@ (8010d70 <stdio_exit_handler+0xc>)
 8010d66:	4903      	ldr	r1, [pc, #12]	@ (8010d74 <stdio_exit_handler+0x10>)
 8010d68:	4803      	ldr	r0, [pc, #12]	@ (8010d78 <stdio_exit_handler+0x14>)
 8010d6a:	f000 b869 	b.w	8010e40 <_fwalk_sglue>
 8010d6e:	bf00      	nop
 8010d70:	20000158 	.word	0x20000158
 8010d74:	08012b9d 	.word	0x08012b9d
 8010d78:	20000168 	.word	0x20000168

08010d7c <cleanup_stdio>:
 8010d7c:	6841      	ldr	r1, [r0, #4]
 8010d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8010db0 <cleanup_stdio+0x34>)
 8010d80:	4299      	cmp	r1, r3
 8010d82:	b510      	push	{r4, lr}
 8010d84:	4604      	mov	r4, r0
 8010d86:	d001      	beq.n	8010d8c <cleanup_stdio+0x10>
 8010d88:	f001 ff08 	bl	8012b9c <_fflush_r>
 8010d8c:	68a1      	ldr	r1, [r4, #8]
 8010d8e:	4b09      	ldr	r3, [pc, #36]	@ (8010db4 <cleanup_stdio+0x38>)
 8010d90:	4299      	cmp	r1, r3
 8010d92:	d002      	beq.n	8010d9a <cleanup_stdio+0x1e>
 8010d94:	4620      	mov	r0, r4
 8010d96:	f001 ff01 	bl	8012b9c <_fflush_r>
 8010d9a:	68e1      	ldr	r1, [r4, #12]
 8010d9c:	4b06      	ldr	r3, [pc, #24]	@ (8010db8 <cleanup_stdio+0x3c>)
 8010d9e:	4299      	cmp	r1, r3
 8010da0:	d004      	beq.n	8010dac <cleanup_stdio+0x30>
 8010da2:	4620      	mov	r0, r4
 8010da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010da8:	f001 bef8 	b.w	8012b9c <_fflush_r>
 8010dac:	bd10      	pop	{r4, pc}
 8010dae:	bf00      	nop
 8010db0:	20002e78 	.word	0x20002e78
 8010db4:	20002ee0 	.word	0x20002ee0
 8010db8:	20002f48 	.word	0x20002f48

08010dbc <global_stdio_init.part.0>:
 8010dbc:	b510      	push	{r4, lr}
 8010dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8010dec <global_stdio_init.part.0+0x30>)
 8010dc0:	4c0b      	ldr	r4, [pc, #44]	@ (8010df0 <global_stdio_init.part.0+0x34>)
 8010dc2:	4a0c      	ldr	r2, [pc, #48]	@ (8010df4 <global_stdio_init.part.0+0x38>)
 8010dc4:	601a      	str	r2, [r3, #0]
 8010dc6:	4620      	mov	r0, r4
 8010dc8:	2200      	movs	r2, #0
 8010dca:	2104      	movs	r1, #4
 8010dcc:	f7ff ff94 	bl	8010cf8 <std>
 8010dd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010dd4:	2201      	movs	r2, #1
 8010dd6:	2109      	movs	r1, #9
 8010dd8:	f7ff ff8e 	bl	8010cf8 <std>
 8010ddc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010de0:	2202      	movs	r2, #2
 8010de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010de6:	2112      	movs	r1, #18
 8010de8:	f7ff bf86 	b.w	8010cf8 <std>
 8010dec:	20002fb0 	.word	0x20002fb0
 8010df0:	20002e78 	.word	0x20002e78
 8010df4:	08010d65 	.word	0x08010d65

08010df8 <__sfp_lock_acquire>:
 8010df8:	4801      	ldr	r0, [pc, #4]	@ (8010e00 <__sfp_lock_acquire+0x8>)
 8010dfa:	f000 ba12 	b.w	8011222 <__retarget_lock_acquire_recursive>
 8010dfe:	bf00      	nop
 8010e00:	20002fb9 	.word	0x20002fb9

08010e04 <__sfp_lock_release>:
 8010e04:	4801      	ldr	r0, [pc, #4]	@ (8010e0c <__sfp_lock_release+0x8>)
 8010e06:	f000 ba0d 	b.w	8011224 <__retarget_lock_release_recursive>
 8010e0a:	bf00      	nop
 8010e0c:	20002fb9 	.word	0x20002fb9

08010e10 <__sinit>:
 8010e10:	b510      	push	{r4, lr}
 8010e12:	4604      	mov	r4, r0
 8010e14:	f7ff fff0 	bl	8010df8 <__sfp_lock_acquire>
 8010e18:	6a23      	ldr	r3, [r4, #32]
 8010e1a:	b11b      	cbz	r3, 8010e24 <__sinit+0x14>
 8010e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e20:	f7ff bff0 	b.w	8010e04 <__sfp_lock_release>
 8010e24:	4b04      	ldr	r3, [pc, #16]	@ (8010e38 <__sinit+0x28>)
 8010e26:	6223      	str	r3, [r4, #32]
 8010e28:	4b04      	ldr	r3, [pc, #16]	@ (8010e3c <__sinit+0x2c>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d1f5      	bne.n	8010e1c <__sinit+0xc>
 8010e30:	f7ff ffc4 	bl	8010dbc <global_stdio_init.part.0>
 8010e34:	e7f2      	b.n	8010e1c <__sinit+0xc>
 8010e36:	bf00      	nop
 8010e38:	08010d7d 	.word	0x08010d7d
 8010e3c:	20002fb0 	.word	0x20002fb0

08010e40 <_fwalk_sglue>:
 8010e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e44:	4607      	mov	r7, r0
 8010e46:	4688      	mov	r8, r1
 8010e48:	4614      	mov	r4, r2
 8010e4a:	2600      	movs	r6, #0
 8010e4c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010e50:	f1b9 0901 	subs.w	r9, r9, #1
 8010e54:	d505      	bpl.n	8010e62 <_fwalk_sglue+0x22>
 8010e56:	6824      	ldr	r4, [r4, #0]
 8010e58:	2c00      	cmp	r4, #0
 8010e5a:	d1f7      	bne.n	8010e4c <_fwalk_sglue+0xc>
 8010e5c:	4630      	mov	r0, r6
 8010e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e62:	89ab      	ldrh	r3, [r5, #12]
 8010e64:	2b01      	cmp	r3, #1
 8010e66:	d907      	bls.n	8010e78 <_fwalk_sglue+0x38>
 8010e68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	d003      	beq.n	8010e78 <_fwalk_sglue+0x38>
 8010e70:	4629      	mov	r1, r5
 8010e72:	4638      	mov	r0, r7
 8010e74:	47c0      	blx	r8
 8010e76:	4306      	orrs	r6, r0
 8010e78:	3568      	adds	r5, #104	@ 0x68
 8010e7a:	e7e9      	b.n	8010e50 <_fwalk_sglue+0x10>

08010e7c <_puts_r>:
 8010e7c:	6a03      	ldr	r3, [r0, #32]
 8010e7e:	b570      	push	{r4, r5, r6, lr}
 8010e80:	6884      	ldr	r4, [r0, #8]
 8010e82:	4605      	mov	r5, r0
 8010e84:	460e      	mov	r6, r1
 8010e86:	b90b      	cbnz	r3, 8010e8c <_puts_r+0x10>
 8010e88:	f7ff ffc2 	bl	8010e10 <__sinit>
 8010e8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010e8e:	07db      	lsls	r3, r3, #31
 8010e90:	d405      	bmi.n	8010e9e <_puts_r+0x22>
 8010e92:	89a3      	ldrh	r3, [r4, #12]
 8010e94:	0598      	lsls	r0, r3, #22
 8010e96:	d402      	bmi.n	8010e9e <_puts_r+0x22>
 8010e98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010e9a:	f000 f9c2 	bl	8011222 <__retarget_lock_acquire_recursive>
 8010e9e:	89a3      	ldrh	r3, [r4, #12]
 8010ea0:	0719      	lsls	r1, r3, #28
 8010ea2:	d502      	bpl.n	8010eaa <_puts_r+0x2e>
 8010ea4:	6923      	ldr	r3, [r4, #16]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d135      	bne.n	8010f16 <_puts_r+0x9a>
 8010eaa:	4621      	mov	r1, r4
 8010eac:	4628      	mov	r0, r5
 8010eae:	f000 f8e5 	bl	801107c <__swsetup_r>
 8010eb2:	b380      	cbz	r0, 8010f16 <_puts_r+0x9a>
 8010eb4:	f04f 35ff 	mov.w	r5, #4294967295
 8010eb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010eba:	07da      	lsls	r2, r3, #31
 8010ebc:	d405      	bmi.n	8010eca <_puts_r+0x4e>
 8010ebe:	89a3      	ldrh	r3, [r4, #12]
 8010ec0:	059b      	lsls	r3, r3, #22
 8010ec2:	d402      	bmi.n	8010eca <_puts_r+0x4e>
 8010ec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ec6:	f000 f9ad 	bl	8011224 <__retarget_lock_release_recursive>
 8010eca:	4628      	mov	r0, r5
 8010ecc:	bd70      	pop	{r4, r5, r6, pc}
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	da04      	bge.n	8010edc <_puts_r+0x60>
 8010ed2:	69a2      	ldr	r2, [r4, #24]
 8010ed4:	429a      	cmp	r2, r3
 8010ed6:	dc17      	bgt.n	8010f08 <_puts_r+0x8c>
 8010ed8:	290a      	cmp	r1, #10
 8010eda:	d015      	beq.n	8010f08 <_puts_r+0x8c>
 8010edc:	6823      	ldr	r3, [r4, #0]
 8010ede:	1c5a      	adds	r2, r3, #1
 8010ee0:	6022      	str	r2, [r4, #0]
 8010ee2:	7019      	strb	r1, [r3, #0]
 8010ee4:	68a3      	ldr	r3, [r4, #8]
 8010ee6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010eea:	3b01      	subs	r3, #1
 8010eec:	60a3      	str	r3, [r4, #8]
 8010eee:	2900      	cmp	r1, #0
 8010ef0:	d1ed      	bne.n	8010ece <_puts_r+0x52>
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	da11      	bge.n	8010f1a <_puts_r+0x9e>
 8010ef6:	4622      	mov	r2, r4
 8010ef8:	210a      	movs	r1, #10
 8010efa:	4628      	mov	r0, r5
 8010efc:	f000 f87f 	bl	8010ffe <__swbuf_r>
 8010f00:	3001      	adds	r0, #1
 8010f02:	d0d7      	beq.n	8010eb4 <_puts_r+0x38>
 8010f04:	250a      	movs	r5, #10
 8010f06:	e7d7      	b.n	8010eb8 <_puts_r+0x3c>
 8010f08:	4622      	mov	r2, r4
 8010f0a:	4628      	mov	r0, r5
 8010f0c:	f000 f877 	bl	8010ffe <__swbuf_r>
 8010f10:	3001      	adds	r0, #1
 8010f12:	d1e7      	bne.n	8010ee4 <_puts_r+0x68>
 8010f14:	e7ce      	b.n	8010eb4 <_puts_r+0x38>
 8010f16:	3e01      	subs	r6, #1
 8010f18:	e7e4      	b.n	8010ee4 <_puts_r+0x68>
 8010f1a:	6823      	ldr	r3, [r4, #0]
 8010f1c:	1c5a      	adds	r2, r3, #1
 8010f1e:	6022      	str	r2, [r4, #0]
 8010f20:	220a      	movs	r2, #10
 8010f22:	701a      	strb	r2, [r3, #0]
 8010f24:	e7ee      	b.n	8010f04 <_puts_r+0x88>
	...

08010f28 <puts>:
 8010f28:	4b02      	ldr	r3, [pc, #8]	@ (8010f34 <puts+0xc>)
 8010f2a:	4601      	mov	r1, r0
 8010f2c:	6818      	ldr	r0, [r3, #0]
 8010f2e:	f7ff bfa5 	b.w	8010e7c <_puts_r>
 8010f32:	bf00      	nop
 8010f34:	20000164 	.word	0x20000164

08010f38 <siprintf>:
 8010f38:	b40e      	push	{r1, r2, r3}
 8010f3a:	b500      	push	{lr}
 8010f3c:	b09c      	sub	sp, #112	@ 0x70
 8010f3e:	ab1d      	add	r3, sp, #116	@ 0x74
 8010f40:	9002      	str	r0, [sp, #8]
 8010f42:	9006      	str	r0, [sp, #24]
 8010f44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010f48:	4809      	ldr	r0, [pc, #36]	@ (8010f70 <siprintf+0x38>)
 8010f4a:	9107      	str	r1, [sp, #28]
 8010f4c:	9104      	str	r1, [sp, #16]
 8010f4e:	4909      	ldr	r1, [pc, #36]	@ (8010f74 <siprintf+0x3c>)
 8010f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f54:	9105      	str	r1, [sp, #20]
 8010f56:	6800      	ldr	r0, [r0, #0]
 8010f58:	9301      	str	r3, [sp, #4]
 8010f5a:	a902      	add	r1, sp, #8
 8010f5c:	f001 fc9e 	bl	801289c <_svfiprintf_r>
 8010f60:	9b02      	ldr	r3, [sp, #8]
 8010f62:	2200      	movs	r2, #0
 8010f64:	701a      	strb	r2, [r3, #0]
 8010f66:	b01c      	add	sp, #112	@ 0x70
 8010f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f6c:	b003      	add	sp, #12
 8010f6e:	4770      	bx	lr
 8010f70:	20000164 	.word	0x20000164
 8010f74:	ffff0208 	.word	0xffff0208

08010f78 <__sread>:
 8010f78:	b510      	push	{r4, lr}
 8010f7a:	460c      	mov	r4, r1
 8010f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f80:	f000 f900 	bl	8011184 <_read_r>
 8010f84:	2800      	cmp	r0, #0
 8010f86:	bfab      	itete	ge
 8010f88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010f8a:	89a3      	ldrhlt	r3, [r4, #12]
 8010f8c:	181b      	addge	r3, r3, r0
 8010f8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010f92:	bfac      	ite	ge
 8010f94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010f96:	81a3      	strhlt	r3, [r4, #12]
 8010f98:	bd10      	pop	{r4, pc}

08010f9a <__swrite>:
 8010f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f9e:	461f      	mov	r7, r3
 8010fa0:	898b      	ldrh	r3, [r1, #12]
 8010fa2:	05db      	lsls	r3, r3, #23
 8010fa4:	4605      	mov	r5, r0
 8010fa6:	460c      	mov	r4, r1
 8010fa8:	4616      	mov	r6, r2
 8010faa:	d505      	bpl.n	8010fb8 <__swrite+0x1e>
 8010fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fb0:	2302      	movs	r3, #2
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	f000 f8d4 	bl	8011160 <_lseek_r>
 8010fb8:	89a3      	ldrh	r3, [r4, #12]
 8010fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010fbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010fc2:	81a3      	strh	r3, [r4, #12]
 8010fc4:	4632      	mov	r2, r6
 8010fc6:	463b      	mov	r3, r7
 8010fc8:	4628      	mov	r0, r5
 8010fca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010fce:	f000 b8eb 	b.w	80111a8 <_write_r>

08010fd2 <__sseek>:
 8010fd2:	b510      	push	{r4, lr}
 8010fd4:	460c      	mov	r4, r1
 8010fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fda:	f000 f8c1 	bl	8011160 <_lseek_r>
 8010fde:	1c43      	adds	r3, r0, #1
 8010fe0:	89a3      	ldrh	r3, [r4, #12]
 8010fe2:	bf15      	itete	ne
 8010fe4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010fe6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010fea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010fee:	81a3      	strheq	r3, [r4, #12]
 8010ff0:	bf18      	it	ne
 8010ff2:	81a3      	strhne	r3, [r4, #12]
 8010ff4:	bd10      	pop	{r4, pc}

08010ff6 <__sclose>:
 8010ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ffa:	f000 b8a1 	b.w	8011140 <_close_r>

08010ffe <__swbuf_r>:
 8010ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011000:	460e      	mov	r6, r1
 8011002:	4614      	mov	r4, r2
 8011004:	4605      	mov	r5, r0
 8011006:	b118      	cbz	r0, 8011010 <__swbuf_r+0x12>
 8011008:	6a03      	ldr	r3, [r0, #32]
 801100a:	b90b      	cbnz	r3, 8011010 <__swbuf_r+0x12>
 801100c:	f7ff ff00 	bl	8010e10 <__sinit>
 8011010:	69a3      	ldr	r3, [r4, #24]
 8011012:	60a3      	str	r3, [r4, #8]
 8011014:	89a3      	ldrh	r3, [r4, #12]
 8011016:	071a      	lsls	r2, r3, #28
 8011018:	d501      	bpl.n	801101e <__swbuf_r+0x20>
 801101a:	6923      	ldr	r3, [r4, #16]
 801101c:	b943      	cbnz	r3, 8011030 <__swbuf_r+0x32>
 801101e:	4621      	mov	r1, r4
 8011020:	4628      	mov	r0, r5
 8011022:	f000 f82b 	bl	801107c <__swsetup_r>
 8011026:	b118      	cbz	r0, 8011030 <__swbuf_r+0x32>
 8011028:	f04f 37ff 	mov.w	r7, #4294967295
 801102c:	4638      	mov	r0, r7
 801102e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011030:	6823      	ldr	r3, [r4, #0]
 8011032:	6922      	ldr	r2, [r4, #16]
 8011034:	1a98      	subs	r0, r3, r2
 8011036:	6963      	ldr	r3, [r4, #20]
 8011038:	b2f6      	uxtb	r6, r6
 801103a:	4283      	cmp	r3, r0
 801103c:	4637      	mov	r7, r6
 801103e:	dc05      	bgt.n	801104c <__swbuf_r+0x4e>
 8011040:	4621      	mov	r1, r4
 8011042:	4628      	mov	r0, r5
 8011044:	f001 fdaa 	bl	8012b9c <_fflush_r>
 8011048:	2800      	cmp	r0, #0
 801104a:	d1ed      	bne.n	8011028 <__swbuf_r+0x2a>
 801104c:	68a3      	ldr	r3, [r4, #8]
 801104e:	3b01      	subs	r3, #1
 8011050:	60a3      	str	r3, [r4, #8]
 8011052:	6823      	ldr	r3, [r4, #0]
 8011054:	1c5a      	adds	r2, r3, #1
 8011056:	6022      	str	r2, [r4, #0]
 8011058:	701e      	strb	r6, [r3, #0]
 801105a:	6962      	ldr	r2, [r4, #20]
 801105c:	1c43      	adds	r3, r0, #1
 801105e:	429a      	cmp	r2, r3
 8011060:	d004      	beq.n	801106c <__swbuf_r+0x6e>
 8011062:	89a3      	ldrh	r3, [r4, #12]
 8011064:	07db      	lsls	r3, r3, #31
 8011066:	d5e1      	bpl.n	801102c <__swbuf_r+0x2e>
 8011068:	2e0a      	cmp	r6, #10
 801106a:	d1df      	bne.n	801102c <__swbuf_r+0x2e>
 801106c:	4621      	mov	r1, r4
 801106e:	4628      	mov	r0, r5
 8011070:	f001 fd94 	bl	8012b9c <_fflush_r>
 8011074:	2800      	cmp	r0, #0
 8011076:	d0d9      	beq.n	801102c <__swbuf_r+0x2e>
 8011078:	e7d6      	b.n	8011028 <__swbuf_r+0x2a>
	...

0801107c <__swsetup_r>:
 801107c:	b538      	push	{r3, r4, r5, lr}
 801107e:	4b29      	ldr	r3, [pc, #164]	@ (8011124 <__swsetup_r+0xa8>)
 8011080:	4605      	mov	r5, r0
 8011082:	6818      	ldr	r0, [r3, #0]
 8011084:	460c      	mov	r4, r1
 8011086:	b118      	cbz	r0, 8011090 <__swsetup_r+0x14>
 8011088:	6a03      	ldr	r3, [r0, #32]
 801108a:	b90b      	cbnz	r3, 8011090 <__swsetup_r+0x14>
 801108c:	f7ff fec0 	bl	8010e10 <__sinit>
 8011090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011094:	0719      	lsls	r1, r3, #28
 8011096:	d422      	bmi.n	80110de <__swsetup_r+0x62>
 8011098:	06da      	lsls	r2, r3, #27
 801109a:	d407      	bmi.n	80110ac <__swsetup_r+0x30>
 801109c:	2209      	movs	r2, #9
 801109e:	602a      	str	r2, [r5, #0]
 80110a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110a4:	81a3      	strh	r3, [r4, #12]
 80110a6:	f04f 30ff 	mov.w	r0, #4294967295
 80110aa:	e033      	b.n	8011114 <__swsetup_r+0x98>
 80110ac:	0758      	lsls	r0, r3, #29
 80110ae:	d512      	bpl.n	80110d6 <__swsetup_r+0x5a>
 80110b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80110b2:	b141      	cbz	r1, 80110c6 <__swsetup_r+0x4a>
 80110b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80110b8:	4299      	cmp	r1, r3
 80110ba:	d002      	beq.n	80110c2 <__swsetup_r+0x46>
 80110bc:	4628      	mov	r0, r5
 80110be:	f000 ff0f 	bl	8011ee0 <_free_r>
 80110c2:	2300      	movs	r3, #0
 80110c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80110c6:	89a3      	ldrh	r3, [r4, #12]
 80110c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80110cc:	81a3      	strh	r3, [r4, #12]
 80110ce:	2300      	movs	r3, #0
 80110d0:	6063      	str	r3, [r4, #4]
 80110d2:	6923      	ldr	r3, [r4, #16]
 80110d4:	6023      	str	r3, [r4, #0]
 80110d6:	89a3      	ldrh	r3, [r4, #12]
 80110d8:	f043 0308 	orr.w	r3, r3, #8
 80110dc:	81a3      	strh	r3, [r4, #12]
 80110de:	6923      	ldr	r3, [r4, #16]
 80110e0:	b94b      	cbnz	r3, 80110f6 <__swsetup_r+0x7a>
 80110e2:	89a3      	ldrh	r3, [r4, #12]
 80110e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80110e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80110ec:	d003      	beq.n	80110f6 <__swsetup_r+0x7a>
 80110ee:	4621      	mov	r1, r4
 80110f0:	4628      	mov	r0, r5
 80110f2:	f001 fda1 	bl	8012c38 <__smakebuf_r>
 80110f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110fa:	f013 0201 	ands.w	r2, r3, #1
 80110fe:	d00a      	beq.n	8011116 <__swsetup_r+0x9a>
 8011100:	2200      	movs	r2, #0
 8011102:	60a2      	str	r2, [r4, #8]
 8011104:	6962      	ldr	r2, [r4, #20]
 8011106:	4252      	negs	r2, r2
 8011108:	61a2      	str	r2, [r4, #24]
 801110a:	6922      	ldr	r2, [r4, #16]
 801110c:	b942      	cbnz	r2, 8011120 <__swsetup_r+0xa4>
 801110e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011112:	d1c5      	bne.n	80110a0 <__swsetup_r+0x24>
 8011114:	bd38      	pop	{r3, r4, r5, pc}
 8011116:	0799      	lsls	r1, r3, #30
 8011118:	bf58      	it	pl
 801111a:	6962      	ldrpl	r2, [r4, #20]
 801111c:	60a2      	str	r2, [r4, #8]
 801111e:	e7f4      	b.n	801110a <__swsetup_r+0x8e>
 8011120:	2000      	movs	r0, #0
 8011122:	e7f7      	b.n	8011114 <__swsetup_r+0x98>
 8011124:	20000164 	.word	0x20000164

08011128 <memset>:
 8011128:	4402      	add	r2, r0
 801112a:	4603      	mov	r3, r0
 801112c:	4293      	cmp	r3, r2
 801112e:	d100      	bne.n	8011132 <memset+0xa>
 8011130:	4770      	bx	lr
 8011132:	f803 1b01 	strb.w	r1, [r3], #1
 8011136:	e7f9      	b.n	801112c <memset+0x4>

08011138 <_localeconv_r>:
 8011138:	4800      	ldr	r0, [pc, #0]	@ (801113c <_localeconv_r+0x4>)
 801113a:	4770      	bx	lr
 801113c:	200002a4 	.word	0x200002a4

08011140 <_close_r>:
 8011140:	b538      	push	{r3, r4, r5, lr}
 8011142:	4d06      	ldr	r5, [pc, #24]	@ (801115c <_close_r+0x1c>)
 8011144:	2300      	movs	r3, #0
 8011146:	4604      	mov	r4, r0
 8011148:	4608      	mov	r0, r1
 801114a:	602b      	str	r3, [r5, #0]
 801114c:	f7f2 f82e 	bl	80031ac <_close>
 8011150:	1c43      	adds	r3, r0, #1
 8011152:	d102      	bne.n	801115a <_close_r+0x1a>
 8011154:	682b      	ldr	r3, [r5, #0]
 8011156:	b103      	cbz	r3, 801115a <_close_r+0x1a>
 8011158:	6023      	str	r3, [r4, #0]
 801115a:	bd38      	pop	{r3, r4, r5, pc}
 801115c:	20002fb4 	.word	0x20002fb4

08011160 <_lseek_r>:
 8011160:	b538      	push	{r3, r4, r5, lr}
 8011162:	4d07      	ldr	r5, [pc, #28]	@ (8011180 <_lseek_r+0x20>)
 8011164:	4604      	mov	r4, r0
 8011166:	4608      	mov	r0, r1
 8011168:	4611      	mov	r1, r2
 801116a:	2200      	movs	r2, #0
 801116c:	602a      	str	r2, [r5, #0]
 801116e:	461a      	mov	r2, r3
 8011170:	f7f2 f843 	bl	80031fa <_lseek>
 8011174:	1c43      	adds	r3, r0, #1
 8011176:	d102      	bne.n	801117e <_lseek_r+0x1e>
 8011178:	682b      	ldr	r3, [r5, #0]
 801117a:	b103      	cbz	r3, 801117e <_lseek_r+0x1e>
 801117c:	6023      	str	r3, [r4, #0]
 801117e:	bd38      	pop	{r3, r4, r5, pc}
 8011180:	20002fb4 	.word	0x20002fb4

08011184 <_read_r>:
 8011184:	b538      	push	{r3, r4, r5, lr}
 8011186:	4d07      	ldr	r5, [pc, #28]	@ (80111a4 <_read_r+0x20>)
 8011188:	4604      	mov	r4, r0
 801118a:	4608      	mov	r0, r1
 801118c:	4611      	mov	r1, r2
 801118e:	2200      	movs	r2, #0
 8011190:	602a      	str	r2, [r5, #0]
 8011192:	461a      	mov	r2, r3
 8011194:	f7f1 ffd1 	bl	800313a <_read>
 8011198:	1c43      	adds	r3, r0, #1
 801119a:	d102      	bne.n	80111a2 <_read_r+0x1e>
 801119c:	682b      	ldr	r3, [r5, #0]
 801119e:	b103      	cbz	r3, 80111a2 <_read_r+0x1e>
 80111a0:	6023      	str	r3, [r4, #0]
 80111a2:	bd38      	pop	{r3, r4, r5, pc}
 80111a4:	20002fb4 	.word	0x20002fb4

080111a8 <_write_r>:
 80111a8:	b538      	push	{r3, r4, r5, lr}
 80111aa:	4d07      	ldr	r5, [pc, #28]	@ (80111c8 <_write_r+0x20>)
 80111ac:	4604      	mov	r4, r0
 80111ae:	4608      	mov	r0, r1
 80111b0:	4611      	mov	r1, r2
 80111b2:	2200      	movs	r2, #0
 80111b4:	602a      	str	r2, [r5, #0]
 80111b6:	461a      	mov	r2, r3
 80111b8:	f7f1 ffdc 	bl	8003174 <_write>
 80111bc:	1c43      	adds	r3, r0, #1
 80111be:	d102      	bne.n	80111c6 <_write_r+0x1e>
 80111c0:	682b      	ldr	r3, [r5, #0]
 80111c2:	b103      	cbz	r3, 80111c6 <_write_r+0x1e>
 80111c4:	6023      	str	r3, [r4, #0]
 80111c6:	bd38      	pop	{r3, r4, r5, pc}
 80111c8:	20002fb4 	.word	0x20002fb4

080111cc <__errno>:
 80111cc:	4b01      	ldr	r3, [pc, #4]	@ (80111d4 <__errno+0x8>)
 80111ce:	6818      	ldr	r0, [r3, #0]
 80111d0:	4770      	bx	lr
 80111d2:	bf00      	nop
 80111d4:	20000164 	.word	0x20000164

080111d8 <__libc_init_array>:
 80111d8:	b570      	push	{r4, r5, r6, lr}
 80111da:	4d0d      	ldr	r5, [pc, #52]	@ (8011210 <__libc_init_array+0x38>)
 80111dc:	4c0d      	ldr	r4, [pc, #52]	@ (8011214 <__libc_init_array+0x3c>)
 80111de:	1b64      	subs	r4, r4, r5
 80111e0:	10a4      	asrs	r4, r4, #2
 80111e2:	2600      	movs	r6, #0
 80111e4:	42a6      	cmp	r6, r4
 80111e6:	d109      	bne.n	80111fc <__libc_init_array+0x24>
 80111e8:	4d0b      	ldr	r5, [pc, #44]	@ (8011218 <__libc_init_array+0x40>)
 80111ea:	4c0c      	ldr	r4, [pc, #48]	@ (801121c <__libc_init_array+0x44>)
 80111ec:	f001 ffd2 	bl	8013194 <_init>
 80111f0:	1b64      	subs	r4, r4, r5
 80111f2:	10a4      	asrs	r4, r4, #2
 80111f4:	2600      	movs	r6, #0
 80111f6:	42a6      	cmp	r6, r4
 80111f8:	d105      	bne.n	8011206 <__libc_init_array+0x2e>
 80111fa:	bd70      	pop	{r4, r5, r6, pc}
 80111fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8011200:	4798      	blx	r3
 8011202:	3601      	adds	r6, #1
 8011204:	e7ee      	b.n	80111e4 <__libc_init_array+0xc>
 8011206:	f855 3b04 	ldr.w	r3, [r5], #4
 801120a:	4798      	blx	r3
 801120c:	3601      	adds	r6, #1
 801120e:	e7f2      	b.n	80111f6 <__libc_init_array+0x1e>
 8011210:	08015410 	.word	0x08015410
 8011214:	08015410 	.word	0x08015410
 8011218:	08015410 	.word	0x08015410
 801121c:	08015414 	.word	0x08015414

08011220 <__retarget_lock_init_recursive>:
 8011220:	4770      	bx	lr

08011222 <__retarget_lock_acquire_recursive>:
 8011222:	4770      	bx	lr

08011224 <__retarget_lock_release_recursive>:
 8011224:	4770      	bx	lr

08011226 <memcpy>:
 8011226:	440a      	add	r2, r1
 8011228:	4291      	cmp	r1, r2
 801122a:	f100 33ff 	add.w	r3, r0, #4294967295
 801122e:	d100      	bne.n	8011232 <memcpy+0xc>
 8011230:	4770      	bx	lr
 8011232:	b510      	push	{r4, lr}
 8011234:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011238:	f803 4f01 	strb.w	r4, [r3, #1]!
 801123c:	4291      	cmp	r1, r2
 801123e:	d1f9      	bne.n	8011234 <memcpy+0xe>
 8011240:	bd10      	pop	{r4, pc}

08011242 <quorem>:
 8011242:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011246:	6903      	ldr	r3, [r0, #16]
 8011248:	690c      	ldr	r4, [r1, #16]
 801124a:	42a3      	cmp	r3, r4
 801124c:	4607      	mov	r7, r0
 801124e:	db7e      	blt.n	801134e <quorem+0x10c>
 8011250:	3c01      	subs	r4, #1
 8011252:	f101 0814 	add.w	r8, r1, #20
 8011256:	00a3      	lsls	r3, r4, #2
 8011258:	f100 0514 	add.w	r5, r0, #20
 801125c:	9300      	str	r3, [sp, #0]
 801125e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011262:	9301      	str	r3, [sp, #4]
 8011264:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011268:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801126c:	3301      	adds	r3, #1
 801126e:	429a      	cmp	r2, r3
 8011270:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011274:	fbb2 f6f3 	udiv	r6, r2, r3
 8011278:	d32e      	bcc.n	80112d8 <quorem+0x96>
 801127a:	f04f 0a00 	mov.w	sl, #0
 801127e:	46c4      	mov	ip, r8
 8011280:	46ae      	mov	lr, r5
 8011282:	46d3      	mov	fp, sl
 8011284:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011288:	b298      	uxth	r0, r3
 801128a:	fb06 a000 	mla	r0, r6, r0, sl
 801128e:	0c02      	lsrs	r2, r0, #16
 8011290:	0c1b      	lsrs	r3, r3, #16
 8011292:	fb06 2303 	mla	r3, r6, r3, r2
 8011296:	f8de 2000 	ldr.w	r2, [lr]
 801129a:	b280      	uxth	r0, r0
 801129c:	b292      	uxth	r2, r2
 801129e:	1a12      	subs	r2, r2, r0
 80112a0:	445a      	add	r2, fp
 80112a2:	f8de 0000 	ldr.w	r0, [lr]
 80112a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80112aa:	b29b      	uxth	r3, r3
 80112ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80112b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80112b4:	b292      	uxth	r2, r2
 80112b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80112ba:	45e1      	cmp	r9, ip
 80112bc:	f84e 2b04 	str.w	r2, [lr], #4
 80112c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80112c4:	d2de      	bcs.n	8011284 <quorem+0x42>
 80112c6:	9b00      	ldr	r3, [sp, #0]
 80112c8:	58eb      	ldr	r3, [r5, r3]
 80112ca:	b92b      	cbnz	r3, 80112d8 <quorem+0x96>
 80112cc:	9b01      	ldr	r3, [sp, #4]
 80112ce:	3b04      	subs	r3, #4
 80112d0:	429d      	cmp	r5, r3
 80112d2:	461a      	mov	r2, r3
 80112d4:	d32f      	bcc.n	8011336 <quorem+0xf4>
 80112d6:	613c      	str	r4, [r7, #16]
 80112d8:	4638      	mov	r0, r7
 80112da:	f001 f97b 	bl	80125d4 <__mcmp>
 80112de:	2800      	cmp	r0, #0
 80112e0:	db25      	blt.n	801132e <quorem+0xec>
 80112e2:	4629      	mov	r1, r5
 80112e4:	2000      	movs	r0, #0
 80112e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80112ea:	f8d1 c000 	ldr.w	ip, [r1]
 80112ee:	fa1f fe82 	uxth.w	lr, r2
 80112f2:	fa1f f38c 	uxth.w	r3, ip
 80112f6:	eba3 030e 	sub.w	r3, r3, lr
 80112fa:	4403      	add	r3, r0
 80112fc:	0c12      	lsrs	r2, r2, #16
 80112fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011302:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011306:	b29b      	uxth	r3, r3
 8011308:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801130c:	45c1      	cmp	r9, r8
 801130e:	f841 3b04 	str.w	r3, [r1], #4
 8011312:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011316:	d2e6      	bcs.n	80112e6 <quorem+0xa4>
 8011318:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801131c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011320:	b922      	cbnz	r2, 801132c <quorem+0xea>
 8011322:	3b04      	subs	r3, #4
 8011324:	429d      	cmp	r5, r3
 8011326:	461a      	mov	r2, r3
 8011328:	d30b      	bcc.n	8011342 <quorem+0x100>
 801132a:	613c      	str	r4, [r7, #16]
 801132c:	3601      	adds	r6, #1
 801132e:	4630      	mov	r0, r6
 8011330:	b003      	add	sp, #12
 8011332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011336:	6812      	ldr	r2, [r2, #0]
 8011338:	3b04      	subs	r3, #4
 801133a:	2a00      	cmp	r2, #0
 801133c:	d1cb      	bne.n	80112d6 <quorem+0x94>
 801133e:	3c01      	subs	r4, #1
 8011340:	e7c6      	b.n	80112d0 <quorem+0x8e>
 8011342:	6812      	ldr	r2, [r2, #0]
 8011344:	3b04      	subs	r3, #4
 8011346:	2a00      	cmp	r2, #0
 8011348:	d1ef      	bne.n	801132a <quorem+0xe8>
 801134a:	3c01      	subs	r4, #1
 801134c:	e7ea      	b.n	8011324 <quorem+0xe2>
 801134e:	2000      	movs	r0, #0
 8011350:	e7ee      	b.n	8011330 <quorem+0xee>
 8011352:	0000      	movs	r0, r0
 8011354:	0000      	movs	r0, r0
	...

08011358 <_dtoa_r>:
 8011358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801135c:	69c7      	ldr	r7, [r0, #28]
 801135e:	b099      	sub	sp, #100	@ 0x64
 8011360:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011364:	ec55 4b10 	vmov	r4, r5, d0
 8011368:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801136a:	9109      	str	r1, [sp, #36]	@ 0x24
 801136c:	4683      	mov	fp, r0
 801136e:	920e      	str	r2, [sp, #56]	@ 0x38
 8011370:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011372:	b97f      	cbnz	r7, 8011394 <_dtoa_r+0x3c>
 8011374:	2010      	movs	r0, #16
 8011376:	f000 fdfd 	bl	8011f74 <malloc>
 801137a:	4602      	mov	r2, r0
 801137c:	f8cb 001c 	str.w	r0, [fp, #28]
 8011380:	b920      	cbnz	r0, 801138c <_dtoa_r+0x34>
 8011382:	4ba7      	ldr	r3, [pc, #668]	@ (8011620 <_dtoa_r+0x2c8>)
 8011384:	21ef      	movs	r1, #239	@ 0xef
 8011386:	48a7      	ldr	r0, [pc, #668]	@ (8011624 <_dtoa_r+0x2cc>)
 8011388:	f001 fcde 	bl	8012d48 <__assert_func>
 801138c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011390:	6007      	str	r7, [r0, #0]
 8011392:	60c7      	str	r7, [r0, #12]
 8011394:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011398:	6819      	ldr	r1, [r3, #0]
 801139a:	b159      	cbz	r1, 80113b4 <_dtoa_r+0x5c>
 801139c:	685a      	ldr	r2, [r3, #4]
 801139e:	604a      	str	r2, [r1, #4]
 80113a0:	2301      	movs	r3, #1
 80113a2:	4093      	lsls	r3, r2
 80113a4:	608b      	str	r3, [r1, #8]
 80113a6:	4658      	mov	r0, fp
 80113a8:	f000 feda 	bl	8012160 <_Bfree>
 80113ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80113b0:	2200      	movs	r2, #0
 80113b2:	601a      	str	r2, [r3, #0]
 80113b4:	1e2b      	subs	r3, r5, #0
 80113b6:	bfb9      	ittee	lt
 80113b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80113bc:	9303      	strlt	r3, [sp, #12]
 80113be:	2300      	movge	r3, #0
 80113c0:	6033      	strge	r3, [r6, #0]
 80113c2:	9f03      	ldr	r7, [sp, #12]
 80113c4:	4b98      	ldr	r3, [pc, #608]	@ (8011628 <_dtoa_r+0x2d0>)
 80113c6:	bfbc      	itt	lt
 80113c8:	2201      	movlt	r2, #1
 80113ca:	6032      	strlt	r2, [r6, #0]
 80113cc:	43bb      	bics	r3, r7
 80113ce:	d112      	bne.n	80113f6 <_dtoa_r+0x9e>
 80113d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80113d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80113d6:	6013      	str	r3, [r2, #0]
 80113d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80113dc:	4323      	orrs	r3, r4
 80113de:	f000 854d 	beq.w	8011e7c <_dtoa_r+0xb24>
 80113e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80113e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801163c <_dtoa_r+0x2e4>
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	f000 854f 	beq.w	8011e8c <_dtoa_r+0xb34>
 80113ee:	f10a 0303 	add.w	r3, sl, #3
 80113f2:	f000 bd49 	b.w	8011e88 <_dtoa_r+0xb30>
 80113f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80113fa:	2200      	movs	r2, #0
 80113fc:	ec51 0b17 	vmov	r0, r1, d7
 8011400:	2300      	movs	r3, #0
 8011402:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8011406:	f7ef fb67 	bl	8000ad8 <__aeabi_dcmpeq>
 801140a:	4680      	mov	r8, r0
 801140c:	b158      	cbz	r0, 8011426 <_dtoa_r+0xce>
 801140e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011410:	2301      	movs	r3, #1
 8011412:	6013      	str	r3, [r2, #0]
 8011414:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011416:	b113      	cbz	r3, 801141e <_dtoa_r+0xc6>
 8011418:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801141a:	4b84      	ldr	r3, [pc, #528]	@ (801162c <_dtoa_r+0x2d4>)
 801141c:	6013      	str	r3, [r2, #0]
 801141e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011640 <_dtoa_r+0x2e8>
 8011422:	f000 bd33 	b.w	8011e8c <_dtoa_r+0xb34>
 8011426:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801142a:	aa16      	add	r2, sp, #88	@ 0x58
 801142c:	a917      	add	r1, sp, #92	@ 0x5c
 801142e:	4658      	mov	r0, fp
 8011430:	f001 f980 	bl	8012734 <__d2b>
 8011434:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011438:	4681      	mov	r9, r0
 801143a:	2e00      	cmp	r6, #0
 801143c:	d077      	beq.n	801152e <_dtoa_r+0x1d6>
 801143e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011440:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8011444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011448:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801144c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011450:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011454:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011458:	4619      	mov	r1, r3
 801145a:	2200      	movs	r2, #0
 801145c:	4b74      	ldr	r3, [pc, #464]	@ (8011630 <_dtoa_r+0x2d8>)
 801145e:	f7ee ff1b 	bl	8000298 <__aeabi_dsub>
 8011462:	a369      	add	r3, pc, #420	@ (adr r3, 8011608 <_dtoa_r+0x2b0>)
 8011464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011468:	f7ef f8ce 	bl	8000608 <__aeabi_dmul>
 801146c:	a368      	add	r3, pc, #416	@ (adr r3, 8011610 <_dtoa_r+0x2b8>)
 801146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011472:	f7ee ff13 	bl	800029c <__adddf3>
 8011476:	4604      	mov	r4, r0
 8011478:	4630      	mov	r0, r6
 801147a:	460d      	mov	r5, r1
 801147c:	f7ef f85a 	bl	8000534 <__aeabi_i2d>
 8011480:	a365      	add	r3, pc, #404	@ (adr r3, 8011618 <_dtoa_r+0x2c0>)
 8011482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011486:	f7ef f8bf 	bl	8000608 <__aeabi_dmul>
 801148a:	4602      	mov	r2, r0
 801148c:	460b      	mov	r3, r1
 801148e:	4620      	mov	r0, r4
 8011490:	4629      	mov	r1, r5
 8011492:	f7ee ff03 	bl	800029c <__adddf3>
 8011496:	4604      	mov	r4, r0
 8011498:	460d      	mov	r5, r1
 801149a:	f7ef fb65 	bl	8000b68 <__aeabi_d2iz>
 801149e:	2200      	movs	r2, #0
 80114a0:	4607      	mov	r7, r0
 80114a2:	2300      	movs	r3, #0
 80114a4:	4620      	mov	r0, r4
 80114a6:	4629      	mov	r1, r5
 80114a8:	f7ef fb20 	bl	8000aec <__aeabi_dcmplt>
 80114ac:	b140      	cbz	r0, 80114c0 <_dtoa_r+0x168>
 80114ae:	4638      	mov	r0, r7
 80114b0:	f7ef f840 	bl	8000534 <__aeabi_i2d>
 80114b4:	4622      	mov	r2, r4
 80114b6:	462b      	mov	r3, r5
 80114b8:	f7ef fb0e 	bl	8000ad8 <__aeabi_dcmpeq>
 80114bc:	b900      	cbnz	r0, 80114c0 <_dtoa_r+0x168>
 80114be:	3f01      	subs	r7, #1
 80114c0:	2f16      	cmp	r7, #22
 80114c2:	d851      	bhi.n	8011568 <_dtoa_r+0x210>
 80114c4:	4b5b      	ldr	r3, [pc, #364]	@ (8011634 <_dtoa_r+0x2dc>)
 80114c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80114ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80114d2:	f7ef fb0b 	bl	8000aec <__aeabi_dcmplt>
 80114d6:	2800      	cmp	r0, #0
 80114d8:	d048      	beq.n	801156c <_dtoa_r+0x214>
 80114da:	3f01      	subs	r7, #1
 80114dc:	2300      	movs	r3, #0
 80114de:	9312      	str	r3, [sp, #72]	@ 0x48
 80114e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80114e2:	1b9b      	subs	r3, r3, r6
 80114e4:	1e5a      	subs	r2, r3, #1
 80114e6:	bf44      	itt	mi
 80114e8:	f1c3 0801 	rsbmi	r8, r3, #1
 80114ec:	2300      	movmi	r3, #0
 80114ee:	9208      	str	r2, [sp, #32]
 80114f0:	bf54      	ite	pl
 80114f2:	f04f 0800 	movpl.w	r8, #0
 80114f6:	9308      	strmi	r3, [sp, #32]
 80114f8:	2f00      	cmp	r7, #0
 80114fa:	db39      	blt.n	8011570 <_dtoa_r+0x218>
 80114fc:	9b08      	ldr	r3, [sp, #32]
 80114fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011500:	443b      	add	r3, r7
 8011502:	9308      	str	r3, [sp, #32]
 8011504:	2300      	movs	r3, #0
 8011506:	930a      	str	r3, [sp, #40]	@ 0x28
 8011508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801150a:	2b09      	cmp	r3, #9
 801150c:	d864      	bhi.n	80115d8 <_dtoa_r+0x280>
 801150e:	2b05      	cmp	r3, #5
 8011510:	bfc4      	itt	gt
 8011512:	3b04      	subgt	r3, #4
 8011514:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011518:	f1a3 0302 	sub.w	r3, r3, #2
 801151c:	bfcc      	ite	gt
 801151e:	2400      	movgt	r4, #0
 8011520:	2401      	movle	r4, #1
 8011522:	2b03      	cmp	r3, #3
 8011524:	d863      	bhi.n	80115ee <_dtoa_r+0x296>
 8011526:	e8df f003 	tbb	[pc, r3]
 801152a:	372a      	.short	0x372a
 801152c:	5535      	.short	0x5535
 801152e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011532:	441e      	add	r6, r3
 8011534:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011538:	2b20      	cmp	r3, #32
 801153a:	bfc1      	itttt	gt
 801153c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011540:	409f      	lslgt	r7, r3
 8011542:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011546:	fa24 f303 	lsrgt.w	r3, r4, r3
 801154a:	bfd6      	itet	le
 801154c:	f1c3 0320 	rsble	r3, r3, #32
 8011550:	ea47 0003 	orrgt.w	r0, r7, r3
 8011554:	fa04 f003 	lslle.w	r0, r4, r3
 8011558:	f7ee ffdc 	bl	8000514 <__aeabi_ui2d>
 801155c:	2201      	movs	r2, #1
 801155e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011562:	3e01      	subs	r6, #1
 8011564:	9214      	str	r2, [sp, #80]	@ 0x50
 8011566:	e777      	b.n	8011458 <_dtoa_r+0x100>
 8011568:	2301      	movs	r3, #1
 801156a:	e7b8      	b.n	80114de <_dtoa_r+0x186>
 801156c:	9012      	str	r0, [sp, #72]	@ 0x48
 801156e:	e7b7      	b.n	80114e0 <_dtoa_r+0x188>
 8011570:	427b      	negs	r3, r7
 8011572:	930a      	str	r3, [sp, #40]	@ 0x28
 8011574:	2300      	movs	r3, #0
 8011576:	eba8 0807 	sub.w	r8, r8, r7
 801157a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801157c:	e7c4      	b.n	8011508 <_dtoa_r+0x1b0>
 801157e:	2300      	movs	r3, #0
 8011580:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011582:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011584:	2b00      	cmp	r3, #0
 8011586:	dc35      	bgt.n	80115f4 <_dtoa_r+0x29c>
 8011588:	2301      	movs	r3, #1
 801158a:	9300      	str	r3, [sp, #0]
 801158c:	9307      	str	r3, [sp, #28]
 801158e:	461a      	mov	r2, r3
 8011590:	920e      	str	r2, [sp, #56]	@ 0x38
 8011592:	e00b      	b.n	80115ac <_dtoa_r+0x254>
 8011594:	2301      	movs	r3, #1
 8011596:	e7f3      	b.n	8011580 <_dtoa_r+0x228>
 8011598:	2300      	movs	r3, #0
 801159a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801159c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801159e:	18fb      	adds	r3, r7, r3
 80115a0:	9300      	str	r3, [sp, #0]
 80115a2:	3301      	adds	r3, #1
 80115a4:	2b01      	cmp	r3, #1
 80115a6:	9307      	str	r3, [sp, #28]
 80115a8:	bfb8      	it	lt
 80115aa:	2301      	movlt	r3, #1
 80115ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 80115b0:	2100      	movs	r1, #0
 80115b2:	2204      	movs	r2, #4
 80115b4:	f102 0514 	add.w	r5, r2, #20
 80115b8:	429d      	cmp	r5, r3
 80115ba:	d91f      	bls.n	80115fc <_dtoa_r+0x2a4>
 80115bc:	6041      	str	r1, [r0, #4]
 80115be:	4658      	mov	r0, fp
 80115c0:	f000 fd8e 	bl	80120e0 <_Balloc>
 80115c4:	4682      	mov	sl, r0
 80115c6:	2800      	cmp	r0, #0
 80115c8:	d13c      	bne.n	8011644 <_dtoa_r+0x2ec>
 80115ca:	4b1b      	ldr	r3, [pc, #108]	@ (8011638 <_dtoa_r+0x2e0>)
 80115cc:	4602      	mov	r2, r0
 80115ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80115d2:	e6d8      	b.n	8011386 <_dtoa_r+0x2e>
 80115d4:	2301      	movs	r3, #1
 80115d6:	e7e0      	b.n	801159a <_dtoa_r+0x242>
 80115d8:	2401      	movs	r4, #1
 80115da:	2300      	movs	r3, #0
 80115dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80115de:	940b      	str	r4, [sp, #44]	@ 0x2c
 80115e0:	f04f 33ff 	mov.w	r3, #4294967295
 80115e4:	9300      	str	r3, [sp, #0]
 80115e6:	9307      	str	r3, [sp, #28]
 80115e8:	2200      	movs	r2, #0
 80115ea:	2312      	movs	r3, #18
 80115ec:	e7d0      	b.n	8011590 <_dtoa_r+0x238>
 80115ee:	2301      	movs	r3, #1
 80115f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80115f2:	e7f5      	b.n	80115e0 <_dtoa_r+0x288>
 80115f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80115f6:	9300      	str	r3, [sp, #0]
 80115f8:	9307      	str	r3, [sp, #28]
 80115fa:	e7d7      	b.n	80115ac <_dtoa_r+0x254>
 80115fc:	3101      	adds	r1, #1
 80115fe:	0052      	lsls	r2, r2, #1
 8011600:	e7d8      	b.n	80115b4 <_dtoa_r+0x25c>
 8011602:	bf00      	nop
 8011604:	f3af 8000 	nop.w
 8011608:	636f4361 	.word	0x636f4361
 801160c:	3fd287a7 	.word	0x3fd287a7
 8011610:	8b60c8b3 	.word	0x8b60c8b3
 8011614:	3fc68a28 	.word	0x3fc68a28
 8011618:	509f79fb 	.word	0x509f79fb
 801161c:	3fd34413 	.word	0x3fd34413
 8011620:	080150d9 	.word	0x080150d9
 8011624:	080150f0 	.word	0x080150f0
 8011628:	7ff00000 	.word	0x7ff00000
 801162c:	080150a9 	.word	0x080150a9
 8011630:	3ff80000 	.word	0x3ff80000
 8011634:	080151e8 	.word	0x080151e8
 8011638:	08015148 	.word	0x08015148
 801163c:	080150d5 	.word	0x080150d5
 8011640:	080150a8 	.word	0x080150a8
 8011644:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011648:	6018      	str	r0, [r3, #0]
 801164a:	9b07      	ldr	r3, [sp, #28]
 801164c:	2b0e      	cmp	r3, #14
 801164e:	f200 80a4 	bhi.w	801179a <_dtoa_r+0x442>
 8011652:	2c00      	cmp	r4, #0
 8011654:	f000 80a1 	beq.w	801179a <_dtoa_r+0x442>
 8011658:	2f00      	cmp	r7, #0
 801165a:	dd33      	ble.n	80116c4 <_dtoa_r+0x36c>
 801165c:	4bad      	ldr	r3, [pc, #692]	@ (8011914 <_dtoa_r+0x5bc>)
 801165e:	f007 020f 	and.w	r2, r7, #15
 8011662:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011666:	ed93 7b00 	vldr	d7, [r3]
 801166a:	05f8      	lsls	r0, r7, #23
 801166c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011670:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011674:	d516      	bpl.n	80116a4 <_dtoa_r+0x34c>
 8011676:	4ba8      	ldr	r3, [pc, #672]	@ (8011918 <_dtoa_r+0x5c0>)
 8011678:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801167c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011680:	f7ef f8ec 	bl	800085c <__aeabi_ddiv>
 8011684:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011688:	f004 040f 	and.w	r4, r4, #15
 801168c:	2603      	movs	r6, #3
 801168e:	4da2      	ldr	r5, [pc, #648]	@ (8011918 <_dtoa_r+0x5c0>)
 8011690:	b954      	cbnz	r4, 80116a8 <_dtoa_r+0x350>
 8011692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801169a:	f7ef f8df 	bl	800085c <__aeabi_ddiv>
 801169e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116a2:	e028      	b.n	80116f6 <_dtoa_r+0x39e>
 80116a4:	2602      	movs	r6, #2
 80116a6:	e7f2      	b.n	801168e <_dtoa_r+0x336>
 80116a8:	07e1      	lsls	r1, r4, #31
 80116aa:	d508      	bpl.n	80116be <_dtoa_r+0x366>
 80116ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80116b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80116b4:	f7ee ffa8 	bl	8000608 <__aeabi_dmul>
 80116b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80116bc:	3601      	adds	r6, #1
 80116be:	1064      	asrs	r4, r4, #1
 80116c0:	3508      	adds	r5, #8
 80116c2:	e7e5      	b.n	8011690 <_dtoa_r+0x338>
 80116c4:	f000 80d2 	beq.w	801186c <_dtoa_r+0x514>
 80116c8:	427c      	negs	r4, r7
 80116ca:	4b92      	ldr	r3, [pc, #584]	@ (8011914 <_dtoa_r+0x5bc>)
 80116cc:	4d92      	ldr	r5, [pc, #584]	@ (8011918 <_dtoa_r+0x5c0>)
 80116ce:	f004 020f 	and.w	r2, r4, #15
 80116d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80116d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80116de:	f7ee ff93 	bl	8000608 <__aeabi_dmul>
 80116e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80116e6:	1124      	asrs	r4, r4, #4
 80116e8:	2300      	movs	r3, #0
 80116ea:	2602      	movs	r6, #2
 80116ec:	2c00      	cmp	r4, #0
 80116ee:	f040 80b2 	bne.w	8011856 <_dtoa_r+0x4fe>
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d1d3      	bne.n	801169e <_dtoa_r+0x346>
 80116f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80116f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	f000 80b7 	beq.w	8011870 <_dtoa_r+0x518>
 8011702:	4b86      	ldr	r3, [pc, #536]	@ (801191c <_dtoa_r+0x5c4>)
 8011704:	2200      	movs	r2, #0
 8011706:	4620      	mov	r0, r4
 8011708:	4629      	mov	r1, r5
 801170a:	f7ef f9ef 	bl	8000aec <__aeabi_dcmplt>
 801170e:	2800      	cmp	r0, #0
 8011710:	f000 80ae 	beq.w	8011870 <_dtoa_r+0x518>
 8011714:	9b07      	ldr	r3, [sp, #28]
 8011716:	2b00      	cmp	r3, #0
 8011718:	f000 80aa 	beq.w	8011870 <_dtoa_r+0x518>
 801171c:	9b00      	ldr	r3, [sp, #0]
 801171e:	2b00      	cmp	r3, #0
 8011720:	dd37      	ble.n	8011792 <_dtoa_r+0x43a>
 8011722:	1e7b      	subs	r3, r7, #1
 8011724:	9304      	str	r3, [sp, #16]
 8011726:	4620      	mov	r0, r4
 8011728:	4b7d      	ldr	r3, [pc, #500]	@ (8011920 <_dtoa_r+0x5c8>)
 801172a:	2200      	movs	r2, #0
 801172c:	4629      	mov	r1, r5
 801172e:	f7ee ff6b 	bl	8000608 <__aeabi_dmul>
 8011732:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011736:	9c00      	ldr	r4, [sp, #0]
 8011738:	3601      	adds	r6, #1
 801173a:	4630      	mov	r0, r6
 801173c:	f7ee fefa 	bl	8000534 <__aeabi_i2d>
 8011740:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011744:	f7ee ff60 	bl	8000608 <__aeabi_dmul>
 8011748:	4b76      	ldr	r3, [pc, #472]	@ (8011924 <_dtoa_r+0x5cc>)
 801174a:	2200      	movs	r2, #0
 801174c:	f7ee fda6 	bl	800029c <__adddf3>
 8011750:	4605      	mov	r5, r0
 8011752:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011756:	2c00      	cmp	r4, #0
 8011758:	f040 808d 	bne.w	8011876 <_dtoa_r+0x51e>
 801175c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011760:	4b71      	ldr	r3, [pc, #452]	@ (8011928 <_dtoa_r+0x5d0>)
 8011762:	2200      	movs	r2, #0
 8011764:	f7ee fd98 	bl	8000298 <__aeabi_dsub>
 8011768:	4602      	mov	r2, r0
 801176a:	460b      	mov	r3, r1
 801176c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011770:	462a      	mov	r2, r5
 8011772:	4633      	mov	r3, r6
 8011774:	f7ef f9d8 	bl	8000b28 <__aeabi_dcmpgt>
 8011778:	2800      	cmp	r0, #0
 801177a:	f040 828b 	bne.w	8011c94 <_dtoa_r+0x93c>
 801177e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011782:	462a      	mov	r2, r5
 8011784:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011788:	f7ef f9b0 	bl	8000aec <__aeabi_dcmplt>
 801178c:	2800      	cmp	r0, #0
 801178e:	f040 8128 	bne.w	80119e2 <_dtoa_r+0x68a>
 8011792:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011796:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801179a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801179c:	2b00      	cmp	r3, #0
 801179e:	f2c0 815a 	blt.w	8011a56 <_dtoa_r+0x6fe>
 80117a2:	2f0e      	cmp	r7, #14
 80117a4:	f300 8157 	bgt.w	8011a56 <_dtoa_r+0x6fe>
 80117a8:	4b5a      	ldr	r3, [pc, #360]	@ (8011914 <_dtoa_r+0x5bc>)
 80117aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80117ae:	ed93 7b00 	vldr	d7, [r3]
 80117b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	ed8d 7b00 	vstr	d7, [sp]
 80117ba:	da03      	bge.n	80117c4 <_dtoa_r+0x46c>
 80117bc:	9b07      	ldr	r3, [sp, #28]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	f340 8101 	ble.w	80119c6 <_dtoa_r+0x66e>
 80117c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80117c8:	4656      	mov	r6, sl
 80117ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117ce:	4620      	mov	r0, r4
 80117d0:	4629      	mov	r1, r5
 80117d2:	f7ef f843 	bl	800085c <__aeabi_ddiv>
 80117d6:	f7ef f9c7 	bl	8000b68 <__aeabi_d2iz>
 80117da:	4680      	mov	r8, r0
 80117dc:	f7ee feaa 	bl	8000534 <__aeabi_i2d>
 80117e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117e4:	f7ee ff10 	bl	8000608 <__aeabi_dmul>
 80117e8:	4602      	mov	r2, r0
 80117ea:	460b      	mov	r3, r1
 80117ec:	4620      	mov	r0, r4
 80117ee:	4629      	mov	r1, r5
 80117f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80117f4:	f7ee fd50 	bl	8000298 <__aeabi_dsub>
 80117f8:	f806 4b01 	strb.w	r4, [r6], #1
 80117fc:	9d07      	ldr	r5, [sp, #28]
 80117fe:	eba6 040a 	sub.w	r4, r6, sl
 8011802:	42a5      	cmp	r5, r4
 8011804:	4602      	mov	r2, r0
 8011806:	460b      	mov	r3, r1
 8011808:	f040 8117 	bne.w	8011a3a <_dtoa_r+0x6e2>
 801180c:	f7ee fd46 	bl	800029c <__adddf3>
 8011810:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011814:	4604      	mov	r4, r0
 8011816:	460d      	mov	r5, r1
 8011818:	f7ef f986 	bl	8000b28 <__aeabi_dcmpgt>
 801181c:	2800      	cmp	r0, #0
 801181e:	f040 80f9 	bne.w	8011a14 <_dtoa_r+0x6bc>
 8011822:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011826:	4620      	mov	r0, r4
 8011828:	4629      	mov	r1, r5
 801182a:	f7ef f955 	bl	8000ad8 <__aeabi_dcmpeq>
 801182e:	b118      	cbz	r0, 8011838 <_dtoa_r+0x4e0>
 8011830:	f018 0f01 	tst.w	r8, #1
 8011834:	f040 80ee 	bne.w	8011a14 <_dtoa_r+0x6bc>
 8011838:	4649      	mov	r1, r9
 801183a:	4658      	mov	r0, fp
 801183c:	f000 fc90 	bl	8012160 <_Bfree>
 8011840:	2300      	movs	r3, #0
 8011842:	7033      	strb	r3, [r6, #0]
 8011844:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011846:	3701      	adds	r7, #1
 8011848:	601f      	str	r7, [r3, #0]
 801184a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801184c:	2b00      	cmp	r3, #0
 801184e:	f000 831d 	beq.w	8011e8c <_dtoa_r+0xb34>
 8011852:	601e      	str	r6, [r3, #0]
 8011854:	e31a      	b.n	8011e8c <_dtoa_r+0xb34>
 8011856:	07e2      	lsls	r2, r4, #31
 8011858:	d505      	bpl.n	8011866 <_dtoa_r+0x50e>
 801185a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801185e:	f7ee fed3 	bl	8000608 <__aeabi_dmul>
 8011862:	3601      	adds	r6, #1
 8011864:	2301      	movs	r3, #1
 8011866:	1064      	asrs	r4, r4, #1
 8011868:	3508      	adds	r5, #8
 801186a:	e73f      	b.n	80116ec <_dtoa_r+0x394>
 801186c:	2602      	movs	r6, #2
 801186e:	e742      	b.n	80116f6 <_dtoa_r+0x39e>
 8011870:	9c07      	ldr	r4, [sp, #28]
 8011872:	9704      	str	r7, [sp, #16]
 8011874:	e761      	b.n	801173a <_dtoa_r+0x3e2>
 8011876:	4b27      	ldr	r3, [pc, #156]	@ (8011914 <_dtoa_r+0x5bc>)
 8011878:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801187a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801187e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011882:	4454      	add	r4, sl
 8011884:	2900      	cmp	r1, #0
 8011886:	d053      	beq.n	8011930 <_dtoa_r+0x5d8>
 8011888:	4928      	ldr	r1, [pc, #160]	@ (801192c <_dtoa_r+0x5d4>)
 801188a:	2000      	movs	r0, #0
 801188c:	f7ee ffe6 	bl	800085c <__aeabi_ddiv>
 8011890:	4633      	mov	r3, r6
 8011892:	462a      	mov	r2, r5
 8011894:	f7ee fd00 	bl	8000298 <__aeabi_dsub>
 8011898:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801189c:	4656      	mov	r6, sl
 801189e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118a2:	f7ef f961 	bl	8000b68 <__aeabi_d2iz>
 80118a6:	4605      	mov	r5, r0
 80118a8:	f7ee fe44 	bl	8000534 <__aeabi_i2d>
 80118ac:	4602      	mov	r2, r0
 80118ae:	460b      	mov	r3, r1
 80118b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118b4:	f7ee fcf0 	bl	8000298 <__aeabi_dsub>
 80118b8:	3530      	adds	r5, #48	@ 0x30
 80118ba:	4602      	mov	r2, r0
 80118bc:	460b      	mov	r3, r1
 80118be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80118c2:	f806 5b01 	strb.w	r5, [r6], #1
 80118c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80118ca:	f7ef f90f 	bl	8000aec <__aeabi_dcmplt>
 80118ce:	2800      	cmp	r0, #0
 80118d0:	d171      	bne.n	80119b6 <_dtoa_r+0x65e>
 80118d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80118d6:	4911      	ldr	r1, [pc, #68]	@ (801191c <_dtoa_r+0x5c4>)
 80118d8:	2000      	movs	r0, #0
 80118da:	f7ee fcdd 	bl	8000298 <__aeabi_dsub>
 80118de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80118e2:	f7ef f903 	bl	8000aec <__aeabi_dcmplt>
 80118e6:	2800      	cmp	r0, #0
 80118e8:	f040 8095 	bne.w	8011a16 <_dtoa_r+0x6be>
 80118ec:	42a6      	cmp	r6, r4
 80118ee:	f43f af50 	beq.w	8011792 <_dtoa_r+0x43a>
 80118f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80118f6:	4b0a      	ldr	r3, [pc, #40]	@ (8011920 <_dtoa_r+0x5c8>)
 80118f8:	2200      	movs	r2, #0
 80118fa:	f7ee fe85 	bl	8000608 <__aeabi_dmul>
 80118fe:	4b08      	ldr	r3, [pc, #32]	@ (8011920 <_dtoa_r+0x5c8>)
 8011900:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011904:	2200      	movs	r2, #0
 8011906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801190a:	f7ee fe7d 	bl	8000608 <__aeabi_dmul>
 801190e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011912:	e7c4      	b.n	801189e <_dtoa_r+0x546>
 8011914:	080151e8 	.word	0x080151e8
 8011918:	080151c0 	.word	0x080151c0
 801191c:	3ff00000 	.word	0x3ff00000
 8011920:	40240000 	.word	0x40240000
 8011924:	401c0000 	.word	0x401c0000
 8011928:	40140000 	.word	0x40140000
 801192c:	3fe00000 	.word	0x3fe00000
 8011930:	4631      	mov	r1, r6
 8011932:	4628      	mov	r0, r5
 8011934:	f7ee fe68 	bl	8000608 <__aeabi_dmul>
 8011938:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801193c:	9415      	str	r4, [sp, #84]	@ 0x54
 801193e:	4656      	mov	r6, sl
 8011940:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011944:	f7ef f910 	bl	8000b68 <__aeabi_d2iz>
 8011948:	4605      	mov	r5, r0
 801194a:	f7ee fdf3 	bl	8000534 <__aeabi_i2d>
 801194e:	4602      	mov	r2, r0
 8011950:	460b      	mov	r3, r1
 8011952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011956:	f7ee fc9f 	bl	8000298 <__aeabi_dsub>
 801195a:	3530      	adds	r5, #48	@ 0x30
 801195c:	f806 5b01 	strb.w	r5, [r6], #1
 8011960:	4602      	mov	r2, r0
 8011962:	460b      	mov	r3, r1
 8011964:	42a6      	cmp	r6, r4
 8011966:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801196a:	f04f 0200 	mov.w	r2, #0
 801196e:	d124      	bne.n	80119ba <_dtoa_r+0x662>
 8011970:	4bac      	ldr	r3, [pc, #688]	@ (8011c24 <_dtoa_r+0x8cc>)
 8011972:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011976:	f7ee fc91 	bl	800029c <__adddf3>
 801197a:	4602      	mov	r2, r0
 801197c:	460b      	mov	r3, r1
 801197e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011982:	f7ef f8d1 	bl	8000b28 <__aeabi_dcmpgt>
 8011986:	2800      	cmp	r0, #0
 8011988:	d145      	bne.n	8011a16 <_dtoa_r+0x6be>
 801198a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801198e:	49a5      	ldr	r1, [pc, #660]	@ (8011c24 <_dtoa_r+0x8cc>)
 8011990:	2000      	movs	r0, #0
 8011992:	f7ee fc81 	bl	8000298 <__aeabi_dsub>
 8011996:	4602      	mov	r2, r0
 8011998:	460b      	mov	r3, r1
 801199a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801199e:	f7ef f8a5 	bl	8000aec <__aeabi_dcmplt>
 80119a2:	2800      	cmp	r0, #0
 80119a4:	f43f aef5 	beq.w	8011792 <_dtoa_r+0x43a>
 80119a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80119aa:	1e73      	subs	r3, r6, #1
 80119ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80119ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80119b2:	2b30      	cmp	r3, #48	@ 0x30
 80119b4:	d0f8      	beq.n	80119a8 <_dtoa_r+0x650>
 80119b6:	9f04      	ldr	r7, [sp, #16]
 80119b8:	e73e      	b.n	8011838 <_dtoa_r+0x4e0>
 80119ba:	4b9b      	ldr	r3, [pc, #620]	@ (8011c28 <_dtoa_r+0x8d0>)
 80119bc:	f7ee fe24 	bl	8000608 <__aeabi_dmul>
 80119c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80119c4:	e7bc      	b.n	8011940 <_dtoa_r+0x5e8>
 80119c6:	d10c      	bne.n	80119e2 <_dtoa_r+0x68a>
 80119c8:	4b98      	ldr	r3, [pc, #608]	@ (8011c2c <_dtoa_r+0x8d4>)
 80119ca:	2200      	movs	r2, #0
 80119cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80119d0:	f7ee fe1a 	bl	8000608 <__aeabi_dmul>
 80119d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80119d8:	f7ef f89c 	bl	8000b14 <__aeabi_dcmpge>
 80119dc:	2800      	cmp	r0, #0
 80119de:	f000 8157 	beq.w	8011c90 <_dtoa_r+0x938>
 80119e2:	2400      	movs	r4, #0
 80119e4:	4625      	mov	r5, r4
 80119e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80119e8:	43db      	mvns	r3, r3
 80119ea:	9304      	str	r3, [sp, #16]
 80119ec:	4656      	mov	r6, sl
 80119ee:	2700      	movs	r7, #0
 80119f0:	4621      	mov	r1, r4
 80119f2:	4658      	mov	r0, fp
 80119f4:	f000 fbb4 	bl	8012160 <_Bfree>
 80119f8:	2d00      	cmp	r5, #0
 80119fa:	d0dc      	beq.n	80119b6 <_dtoa_r+0x65e>
 80119fc:	b12f      	cbz	r7, 8011a0a <_dtoa_r+0x6b2>
 80119fe:	42af      	cmp	r7, r5
 8011a00:	d003      	beq.n	8011a0a <_dtoa_r+0x6b2>
 8011a02:	4639      	mov	r1, r7
 8011a04:	4658      	mov	r0, fp
 8011a06:	f000 fbab 	bl	8012160 <_Bfree>
 8011a0a:	4629      	mov	r1, r5
 8011a0c:	4658      	mov	r0, fp
 8011a0e:	f000 fba7 	bl	8012160 <_Bfree>
 8011a12:	e7d0      	b.n	80119b6 <_dtoa_r+0x65e>
 8011a14:	9704      	str	r7, [sp, #16]
 8011a16:	4633      	mov	r3, r6
 8011a18:	461e      	mov	r6, r3
 8011a1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011a1e:	2a39      	cmp	r2, #57	@ 0x39
 8011a20:	d107      	bne.n	8011a32 <_dtoa_r+0x6da>
 8011a22:	459a      	cmp	sl, r3
 8011a24:	d1f8      	bne.n	8011a18 <_dtoa_r+0x6c0>
 8011a26:	9a04      	ldr	r2, [sp, #16]
 8011a28:	3201      	adds	r2, #1
 8011a2a:	9204      	str	r2, [sp, #16]
 8011a2c:	2230      	movs	r2, #48	@ 0x30
 8011a2e:	f88a 2000 	strb.w	r2, [sl]
 8011a32:	781a      	ldrb	r2, [r3, #0]
 8011a34:	3201      	adds	r2, #1
 8011a36:	701a      	strb	r2, [r3, #0]
 8011a38:	e7bd      	b.n	80119b6 <_dtoa_r+0x65e>
 8011a3a:	4b7b      	ldr	r3, [pc, #492]	@ (8011c28 <_dtoa_r+0x8d0>)
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	f7ee fde3 	bl	8000608 <__aeabi_dmul>
 8011a42:	2200      	movs	r2, #0
 8011a44:	2300      	movs	r3, #0
 8011a46:	4604      	mov	r4, r0
 8011a48:	460d      	mov	r5, r1
 8011a4a:	f7ef f845 	bl	8000ad8 <__aeabi_dcmpeq>
 8011a4e:	2800      	cmp	r0, #0
 8011a50:	f43f aebb 	beq.w	80117ca <_dtoa_r+0x472>
 8011a54:	e6f0      	b.n	8011838 <_dtoa_r+0x4e0>
 8011a56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011a58:	2a00      	cmp	r2, #0
 8011a5a:	f000 80db 	beq.w	8011c14 <_dtoa_r+0x8bc>
 8011a5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011a60:	2a01      	cmp	r2, #1
 8011a62:	f300 80bf 	bgt.w	8011be4 <_dtoa_r+0x88c>
 8011a66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011a68:	2a00      	cmp	r2, #0
 8011a6a:	f000 80b7 	beq.w	8011bdc <_dtoa_r+0x884>
 8011a6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011a72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011a74:	4646      	mov	r6, r8
 8011a76:	9a08      	ldr	r2, [sp, #32]
 8011a78:	2101      	movs	r1, #1
 8011a7a:	441a      	add	r2, r3
 8011a7c:	4658      	mov	r0, fp
 8011a7e:	4498      	add	r8, r3
 8011a80:	9208      	str	r2, [sp, #32]
 8011a82:	f000 fc21 	bl	80122c8 <__i2b>
 8011a86:	4605      	mov	r5, r0
 8011a88:	b15e      	cbz	r6, 8011aa2 <_dtoa_r+0x74a>
 8011a8a:	9b08      	ldr	r3, [sp, #32]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	dd08      	ble.n	8011aa2 <_dtoa_r+0x74a>
 8011a90:	42b3      	cmp	r3, r6
 8011a92:	9a08      	ldr	r2, [sp, #32]
 8011a94:	bfa8      	it	ge
 8011a96:	4633      	movge	r3, r6
 8011a98:	eba8 0803 	sub.w	r8, r8, r3
 8011a9c:	1af6      	subs	r6, r6, r3
 8011a9e:	1ad3      	subs	r3, r2, r3
 8011aa0:	9308      	str	r3, [sp, #32]
 8011aa2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011aa4:	b1f3      	cbz	r3, 8011ae4 <_dtoa_r+0x78c>
 8011aa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	f000 80b7 	beq.w	8011c1c <_dtoa_r+0x8c4>
 8011aae:	b18c      	cbz	r4, 8011ad4 <_dtoa_r+0x77c>
 8011ab0:	4629      	mov	r1, r5
 8011ab2:	4622      	mov	r2, r4
 8011ab4:	4658      	mov	r0, fp
 8011ab6:	f000 fcc7 	bl	8012448 <__pow5mult>
 8011aba:	464a      	mov	r2, r9
 8011abc:	4601      	mov	r1, r0
 8011abe:	4605      	mov	r5, r0
 8011ac0:	4658      	mov	r0, fp
 8011ac2:	f000 fc17 	bl	80122f4 <__multiply>
 8011ac6:	4649      	mov	r1, r9
 8011ac8:	9004      	str	r0, [sp, #16]
 8011aca:	4658      	mov	r0, fp
 8011acc:	f000 fb48 	bl	8012160 <_Bfree>
 8011ad0:	9b04      	ldr	r3, [sp, #16]
 8011ad2:	4699      	mov	r9, r3
 8011ad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011ad6:	1b1a      	subs	r2, r3, r4
 8011ad8:	d004      	beq.n	8011ae4 <_dtoa_r+0x78c>
 8011ada:	4649      	mov	r1, r9
 8011adc:	4658      	mov	r0, fp
 8011ade:	f000 fcb3 	bl	8012448 <__pow5mult>
 8011ae2:	4681      	mov	r9, r0
 8011ae4:	2101      	movs	r1, #1
 8011ae6:	4658      	mov	r0, fp
 8011ae8:	f000 fbee 	bl	80122c8 <__i2b>
 8011aec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011aee:	4604      	mov	r4, r0
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	f000 81cf 	beq.w	8011e94 <_dtoa_r+0xb3c>
 8011af6:	461a      	mov	r2, r3
 8011af8:	4601      	mov	r1, r0
 8011afa:	4658      	mov	r0, fp
 8011afc:	f000 fca4 	bl	8012448 <__pow5mult>
 8011b00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011b02:	2b01      	cmp	r3, #1
 8011b04:	4604      	mov	r4, r0
 8011b06:	f300 8095 	bgt.w	8011c34 <_dtoa_r+0x8dc>
 8011b0a:	9b02      	ldr	r3, [sp, #8]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	f040 8087 	bne.w	8011c20 <_dtoa_r+0x8c8>
 8011b12:	9b03      	ldr	r3, [sp, #12]
 8011b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	f040 8089 	bne.w	8011c30 <_dtoa_r+0x8d8>
 8011b1e:	9b03      	ldr	r3, [sp, #12]
 8011b20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011b24:	0d1b      	lsrs	r3, r3, #20
 8011b26:	051b      	lsls	r3, r3, #20
 8011b28:	b12b      	cbz	r3, 8011b36 <_dtoa_r+0x7de>
 8011b2a:	9b08      	ldr	r3, [sp, #32]
 8011b2c:	3301      	adds	r3, #1
 8011b2e:	9308      	str	r3, [sp, #32]
 8011b30:	f108 0801 	add.w	r8, r8, #1
 8011b34:	2301      	movs	r3, #1
 8011b36:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	f000 81b0 	beq.w	8011ea0 <_dtoa_r+0xb48>
 8011b40:	6923      	ldr	r3, [r4, #16]
 8011b42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011b46:	6918      	ldr	r0, [r3, #16]
 8011b48:	f000 fb72 	bl	8012230 <__hi0bits>
 8011b4c:	f1c0 0020 	rsb	r0, r0, #32
 8011b50:	9b08      	ldr	r3, [sp, #32]
 8011b52:	4418      	add	r0, r3
 8011b54:	f010 001f 	ands.w	r0, r0, #31
 8011b58:	d077      	beq.n	8011c4a <_dtoa_r+0x8f2>
 8011b5a:	f1c0 0320 	rsb	r3, r0, #32
 8011b5e:	2b04      	cmp	r3, #4
 8011b60:	dd6b      	ble.n	8011c3a <_dtoa_r+0x8e2>
 8011b62:	9b08      	ldr	r3, [sp, #32]
 8011b64:	f1c0 001c 	rsb	r0, r0, #28
 8011b68:	4403      	add	r3, r0
 8011b6a:	4480      	add	r8, r0
 8011b6c:	4406      	add	r6, r0
 8011b6e:	9308      	str	r3, [sp, #32]
 8011b70:	f1b8 0f00 	cmp.w	r8, #0
 8011b74:	dd05      	ble.n	8011b82 <_dtoa_r+0x82a>
 8011b76:	4649      	mov	r1, r9
 8011b78:	4642      	mov	r2, r8
 8011b7a:	4658      	mov	r0, fp
 8011b7c:	f000 fcbe 	bl	80124fc <__lshift>
 8011b80:	4681      	mov	r9, r0
 8011b82:	9b08      	ldr	r3, [sp, #32]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	dd05      	ble.n	8011b94 <_dtoa_r+0x83c>
 8011b88:	4621      	mov	r1, r4
 8011b8a:	461a      	mov	r2, r3
 8011b8c:	4658      	mov	r0, fp
 8011b8e:	f000 fcb5 	bl	80124fc <__lshift>
 8011b92:	4604      	mov	r4, r0
 8011b94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d059      	beq.n	8011c4e <_dtoa_r+0x8f6>
 8011b9a:	4621      	mov	r1, r4
 8011b9c:	4648      	mov	r0, r9
 8011b9e:	f000 fd19 	bl	80125d4 <__mcmp>
 8011ba2:	2800      	cmp	r0, #0
 8011ba4:	da53      	bge.n	8011c4e <_dtoa_r+0x8f6>
 8011ba6:	1e7b      	subs	r3, r7, #1
 8011ba8:	9304      	str	r3, [sp, #16]
 8011baa:	4649      	mov	r1, r9
 8011bac:	2300      	movs	r3, #0
 8011bae:	220a      	movs	r2, #10
 8011bb0:	4658      	mov	r0, fp
 8011bb2:	f000 faf7 	bl	80121a4 <__multadd>
 8011bb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011bb8:	4681      	mov	r9, r0
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	f000 8172 	beq.w	8011ea4 <_dtoa_r+0xb4c>
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	4629      	mov	r1, r5
 8011bc4:	220a      	movs	r2, #10
 8011bc6:	4658      	mov	r0, fp
 8011bc8:	f000 faec 	bl	80121a4 <__multadd>
 8011bcc:	9b00      	ldr	r3, [sp, #0]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	4605      	mov	r5, r0
 8011bd2:	dc67      	bgt.n	8011ca4 <_dtoa_r+0x94c>
 8011bd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011bd6:	2b02      	cmp	r3, #2
 8011bd8:	dc41      	bgt.n	8011c5e <_dtoa_r+0x906>
 8011bda:	e063      	b.n	8011ca4 <_dtoa_r+0x94c>
 8011bdc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011bde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8011be2:	e746      	b.n	8011a72 <_dtoa_r+0x71a>
 8011be4:	9b07      	ldr	r3, [sp, #28]
 8011be6:	1e5c      	subs	r4, r3, #1
 8011be8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011bea:	42a3      	cmp	r3, r4
 8011bec:	bfbf      	itttt	lt
 8011bee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011bf0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8011bf2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8011bf4:	1ae3      	sublt	r3, r4, r3
 8011bf6:	bfb4      	ite	lt
 8011bf8:	18d2      	addlt	r2, r2, r3
 8011bfa:	1b1c      	subge	r4, r3, r4
 8011bfc:	9b07      	ldr	r3, [sp, #28]
 8011bfe:	bfbc      	itt	lt
 8011c00:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8011c02:	2400      	movlt	r4, #0
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	bfb5      	itete	lt
 8011c08:	eba8 0603 	sublt.w	r6, r8, r3
 8011c0c:	9b07      	ldrge	r3, [sp, #28]
 8011c0e:	2300      	movlt	r3, #0
 8011c10:	4646      	movge	r6, r8
 8011c12:	e730      	b.n	8011a76 <_dtoa_r+0x71e>
 8011c14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011c16:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8011c18:	4646      	mov	r6, r8
 8011c1a:	e735      	b.n	8011a88 <_dtoa_r+0x730>
 8011c1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011c1e:	e75c      	b.n	8011ada <_dtoa_r+0x782>
 8011c20:	2300      	movs	r3, #0
 8011c22:	e788      	b.n	8011b36 <_dtoa_r+0x7de>
 8011c24:	3fe00000 	.word	0x3fe00000
 8011c28:	40240000 	.word	0x40240000
 8011c2c:	40140000 	.word	0x40140000
 8011c30:	9b02      	ldr	r3, [sp, #8]
 8011c32:	e780      	b.n	8011b36 <_dtoa_r+0x7de>
 8011c34:	2300      	movs	r3, #0
 8011c36:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c38:	e782      	b.n	8011b40 <_dtoa_r+0x7e8>
 8011c3a:	d099      	beq.n	8011b70 <_dtoa_r+0x818>
 8011c3c:	9a08      	ldr	r2, [sp, #32]
 8011c3e:	331c      	adds	r3, #28
 8011c40:	441a      	add	r2, r3
 8011c42:	4498      	add	r8, r3
 8011c44:	441e      	add	r6, r3
 8011c46:	9208      	str	r2, [sp, #32]
 8011c48:	e792      	b.n	8011b70 <_dtoa_r+0x818>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	e7f6      	b.n	8011c3c <_dtoa_r+0x8e4>
 8011c4e:	9b07      	ldr	r3, [sp, #28]
 8011c50:	9704      	str	r7, [sp, #16]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	dc20      	bgt.n	8011c98 <_dtoa_r+0x940>
 8011c56:	9300      	str	r3, [sp, #0]
 8011c58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c5a:	2b02      	cmp	r3, #2
 8011c5c:	dd1e      	ble.n	8011c9c <_dtoa_r+0x944>
 8011c5e:	9b00      	ldr	r3, [sp, #0]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	f47f aec0 	bne.w	80119e6 <_dtoa_r+0x68e>
 8011c66:	4621      	mov	r1, r4
 8011c68:	2205      	movs	r2, #5
 8011c6a:	4658      	mov	r0, fp
 8011c6c:	f000 fa9a 	bl	80121a4 <__multadd>
 8011c70:	4601      	mov	r1, r0
 8011c72:	4604      	mov	r4, r0
 8011c74:	4648      	mov	r0, r9
 8011c76:	f000 fcad 	bl	80125d4 <__mcmp>
 8011c7a:	2800      	cmp	r0, #0
 8011c7c:	f77f aeb3 	ble.w	80119e6 <_dtoa_r+0x68e>
 8011c80:	4656      	mov	r6, sl
 8011c82:	2331      	movs	r3, #49	@ 0x31
 8011c84:	f806 3b01 	strb.w	r3, [r6], #1
 8011c88:	9b04      	ldr	r3, [sp, #16]
 8011c8a:	3301      	adds	r3, #1
 8011c8c:	9304      	str	r3, [sp, #16]
 8011c8e:	e6ae      	b.n	80119ee <_dtoa_r+0x696>
 8011c90:	9c07      	ldr	r4, [sp, #28]
 8011c92:	9704      	str	r7, [sp, #16]
 8011c94:	4625      	mov	r5, r4
 8011c96:	e7f3      	b.n	8011c80 <_dtoa_r+0x928>
 8011c98:	9b07      	ldr	r3, [sp, #28]
 8011c9a:	9300      	str	r3, [sp, #0]
 8011c9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	f000 8104 	beq.w	8011eac <_dtoa_r+0xb54>
 8011ca4:	2e00      	cmp	r6, #0
 8011ca6:	dd05      	ble.n	8011cb4 <_dtoa_r+0x95c>
 8011ca8:	4629      	mov	r1, r5
 8011caa:	4632      	mov	r2, r6
 8011cac:	4658      	mov	r0, fp
 8011cae:	f000 fc25 	bl	80124fc <__lshift>
 8011cb2:	4605      	mov	r5, r0
 8011cb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d05a      	beq.n	8011d70 <_dtoa_r+0xa18>
 8011cba:	6869      	ldr	r1, [r5, #4]
 8011cbc:	4658      	mov	r0, fp
 8011cbe:	f000 fa0f 	bl	80120e0 <_Balloc>
 8011cc2:	4606      	mov	r6, r0
 8011cc4:	b928      	cbnz	r0, 8011cd2 <_dtoa_r+0x97a>
 8011cc6:	4b84      	ldr	r3, [pc, #528]	@ (8011ed8 <_dtoa_r+0xb80>)
 8011cc8:	4602      	mov	r2, r0
 8011cca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011cce:	f7ff bb5a 	b.w	8011386 <_dtoa_r+0x2e>
 8011cd2:	692a      	ldr	r2, [r5, #16]
 8011cd4:	3202      	adds	r2, #2
 8011cd6:	0092      	lsls	r2, r2, #2
 8011cd8:	f105 010c 	add.w	r1, r5, #12
 8011cdc:	300c      	adds	r0, #12
 8011cde:	f7ff faa2 	bl	8011226 <memcpy>
 8011ce2:	2201      	movs	r2, #1
 8011ce4:	4631      	mov	r1, r6
 8011ce6:	4658      	mov	r0, fp
 8011ce8:	f000 fc08 	bl	80124fc <__lshift>
 8011cec:	f10a 0301 	add.w	r3, sl, #1
 8011cf0:	9307      	str	r3, [sp, #28]
 8011cf2:	9b00      	ldr	r3, [sp, #0]
 8011cf4:	4453      	add	r3, sl
 8011cf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011cf8:	9b02      	ldr	r3, [sp, #8]
 8011cfa:	f003 0301 	and.w	r3, r3, #1
 8011cfe:	462f      	mov	r7, r5
 8011d00:	930a      	str	r3, [sp, #40]	@ 0x28
 8011d02:	4605      	mov	r5, r0
 8011d04:	9b07      	ldr	r3, [sp, #28]
 8011d06:	4621      	mov	r1, r4
 8011d08:	3b01      	subs	r3, #1
 8011d0a:	4648      	mov	r0, r9
 8011d0c:	9300      	str	r3, [sp, #0]
 8011d0e:	f7ff fa98 	bl	8011242 <quorem>
 8011d12:	4639      	mov	r1, r7
 8011d14:	9002      	str	r0, [sp, #8]
 8011d16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011d1a:	4648      	mov	r0, r9
 8011d1c:	f000 fc5a 	bl	80125d4 <__mcmp>
 8011d20:	462a      	mov	r2, r5
 8011d22:	9008      	str	r0, [sp, #32]
 8011d24:	4621      	mov	r1, r4
 8011d26:	4658      	mov	r0, fp
 8011d28:	f000 fc70 	bl	801260c <__mdiff>
 8011d2c:	68c2      	ldr	r2, [r0, #12]
 8011d2e:	4606      	mov	r6, r0
 8011d30:	bb02      	cbnz	r2, 8011d74 <_dtoa_r+0xa1c>
 8011d32:	4601      	mov	r1, r0
 8011d34:	4648      	mov	r0, r9
 8011d36:	f000 fc4d 	bl	80125d4 <__mcmp>
 8011d3a:	4602      	mov	r2, r0
 8011d3c:	4631      	mov	r1, r6
 8011d3e:	4658      	mov	r0, fp
 8011d40:	920e      	str	r2, [sp, #56]	@ 0x38
 8011d42:	f000 fa0d 	bl	8012160 <_Bfree>
 8011d46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011d4a:	9e07      	ldr	r6, [sp, #28]
 8011d4c:	ea43 0102 	orr.w	r1, r3, r2
 8011d50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011d52:	4319      	orrs	r1, r3
 8011d54:	d110      	bne.n	8011d78 <_dtoa_r+0xa20>
 8011d56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011d5a:	d029      	beq.n	8011db0 <_dtoa_r+0xa58>
 8011d5c:	9b08      	ldr	r3, [sp, #32]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	dd02      	ble.n	8011d68 <_dtoa_r+0xa10>
 8011d62:	9b02      	ldr	r3, [sp, #8]
 8011d64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8011d68:	9b00      	ldr	r3, [sp, #0]
 8011d6a:	f883 8000 	strb.w	r8, [r3]
 8011d6e:	e63f      	b.n	80119f0 <_dtoa_r+0x698>
 8011d70:	4628      	mov	r0, r5
 8011d72:	e7bb      	b.n	8011cec <_dtoa_r+0x994>
 8011d74:	2201      	movs	r2, #1
 8011d76:	e7e1      	b.n	8011d3c <_dtoa_r+0x9e4>
 8011d78:	9b08      	ldr	r3, [sp, #32]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	db04      	blt.n	8011d88 <_dtoa_r+0xa30>
 8011d7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011d80:	430b      	orrs	r3, r1
 8011d82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011d84:	430b      	orrs	r3, r1
 8011d86:	d120      	bne.n	8011dca <_dtoa_r+0xa72>
 8011d88:	2a00      	cmp	r2, #0
 8011d8a:	dded      	ble.n	8011d68 <_dtoa_r+0xa10>
 8011d8c:	4649      	mov	r1, r9
 8011d8e:	2201      	movs	r2, #1
 8011d90:	4658      	mov	r0, fp
 8011d92:	f000 fbb3 	bl	80124fc <__lshift>
 8011d96:	4621      	mov	r1, r4
 8011d98:	4681      	mov	r9, r0
 8011d9a:	f000 fc1b 	bl	80125d4 <__mcmp>
 8011d9e:	2800      	cmp	r0, #0
 8011da0:	dc03      	bgt.n	8011daa <_dtoa_r+0xa52>
 8011da2:	d1e1      	bne.n	8011d68 <_dtoa_r+0xa10>
 8011da4:	f018 0f01 	tst.w	r8, #1
 8011da8:	d0de      	beq.n	8011d68 <_dtoa_r+0xa10>
 8011daa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011dae:	d1d8      	bne.n	8011d62 <_dtoa_r+0xa0a>
 8011db0:	9a00      	ldr	r2, [sp, #0]
 8011db2:	2339      	movs	r3, #57	@ 0x39
 8011db4:	7013      	strb	r3, [r2, #0]
 8011db6:	4633      	mov	r3, r6
 8011db8:	461e      	mov	r6, r3
 8011dba:	3b01      	subs	r3, #1
 8011dbc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011dc0:	2a39      	cmp	r2, #57	@ 0x39
 8011dc2:	d052      	beq.n	8011e6a <_dtoa_r+0xb12>
 8011dc4:	3201      	adds	r2, #1
 8011dc6:	701a      	strb	r2, [r3, #0]
 8011dc8:	e612      	b.n	80119f0 <_dtoa_r+0x698>
 8011dca:	2a00      	cmp	r2, #0
 8011dcc:	dd07      	ble.n	8011dde <_dtoa_r+0xa86>
 8011dce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011dd2:	d0ed      	beq.n	8011db0 <_dtoa_r+0xa58>
 8011dd4:	9a00      	ldr	r2, [sp, #0]
 8011dd6:	f108 0301 	add.w	r3, r8, #1
 8011dda:	7013      	strb	r3, [r2, #0]
 8011ddc:	e608      	b.n	80119f0 <_dtoa_r+0x698>
 8011dde:	9b07      	ldr	r3, [sp, #28]
 8011de0:	9a07      	ldr	r2, [sp, #28]
 8011de2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8011de6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011de8:	4293      	cmp	r3, r2
 8011dea:	d028      	beq.n	8011e3e <_dtoa_r+0xae6>
 8011dec:	4649      	mov	r1, r9
 8011dee:	2300      	movs	r3, #0
 8011df0:	220a      	movs	r2, #10
 8011df2:	4658      	mov	r0, fp
 8011df4:	f000 f9d6 	bl	80121a4 <__multadd>
 8011df8:	42af      	cmp	r7, r5
 8011dfa:	4681      	mov	r9, r0
 8011dfc:	f04f 0300 	mov.w	r3, #0
 8011e00:	f04f 020a 	mov.w	r2, #10
 8011e04:	4639      	mov	r1, r7
 8011e06:	4658      	mov	r0, fp
 8011e08:	d107      	bne.n	8011e1a <_dtoa_r+0xac2>
 8011e0a:	f000 f9cb 	bl	80121a4 <__multadd>
 8011e0e:	4607      	mov	r7, r0
 8011e10:	4605      	mov	r5, r0
 8011e12:	9b07      	ldr	r3, [sp, #28]
 8011e14:	3301      	adds	r3, #1
 8011e16:	9307      	str	r3, [sp, #28]
 8011e18:	e774      	b.n	8011d04 <_dtoa_r+0x9ac>
 8011e1a:	f000 f9c3 	bl	80121a4 <__multadd>
 8011e1e:	4629      	mov	r1, r5
 8011e20:	4607      	mov	r7, r0
 8011e22:	2300      	movs	r3, #0
 8011e24:	220a      	movs	r2, #10
 8011e26:	4658      	mov	r0, fp
 8011e28:	f000 f9bc 	bl	80121a4 <__multadd>
 8011e2c:	4605      	mov	r5, r0
 8011e2e:	e7f0      	b.n	8011e12 <_dtoa_r+0xaba>
 8011e30:	9b00      	ldr	r3, [sp, #0]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	bfcc      	ite	gt
 8011e36:	461e      	movgt	r6, r3
 8011e38:	2601      	movle	r6, #1
 8011e3a:	4456      	add	r6, sl
 8011e3c:	2700      	movs	r7, #0
 8011e3e:	4649      	mov	r1, r9
 8011e40:	2201      	movs	r2, #1
 8011e42:	4658      	mov	r0, fp
 8011e44:	f000 fb5a 	bl	80124fc <__lshift>
 8011e48:	4621      	mov	r1, r4
 8011e4a:	4681      	mov	r9, r0
 8011e4c:	f000 fbc2 	bl	80125d4 <__mcmp>
 8011e50:	2800      	cmp	r0, #0
 8011e52:	dcb0      	bgt.n	8011db6 <_dtoa_r+0xa5e>
 8011e54:	d102      	bne.n	8011e5c <_dtoa_r+0xb04>
 8011e56:	f018 0f01 	tst.w	r8, #1
 8011e5a:	d1ac      	bne.n	8011db6 <_dtoa_r+0xa5e>
 8011e5c:	4633      	mov	r3, r6
 8011e5e:	461e      	mov	r6, r3
 8011e60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011e64:	2a30      	cmp	r2, #48	@ 0x30
 8011e66:	d0fa      	beq.n	8011e5e <_dtoa_r+0xb06>
 8011e68:	e5c2      	b.n	80119f0 <_dtoa_r+0x698>
 8011e6a:	459a      	cmp	sl, r3
 8011e6c:	d1a4      	bne.n	8011db8 <_dtoa_r+0xa60>
 8011e6e:	9b04      	ldr	r3, [sp, #16]
 8011e70:	3301      	adds	r3, #1
 8011e72:	9304      	str	r3, [sp, #16]
 8011e74:	2331      	movs	r3, #49	@ 0x31
 8011e76:	f88a 3000 	strb.w	r3, [sl]
 8011e7a:	e5b9      	b.n	80119f0 <_dtoa_r+0x698>
 8011e7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011e7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011edc <_dtoa_r+0xb84>
 8011e82:	b11b      	cbz	r3, 8011e8c <_dtoa_r+0xb34>
 8011e84:	f10a 0308 	add.w	r3, sl, #8
 8011e88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011e8a:	6013      	str	r3, [r2, #0]
 8011e8c:	4650      	mov	r0, sl
 8011e8e:	b019      	add	sp, #100	@ 0x64
 8011e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e96:	2b01      	cmp	r3, #1
 8011e98:	f77f ae37 	ble.w	8011b0a <_dtoa_r+0x7b2>
 8011e9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ea0:	2001      	movs	r0, #1
 8011ea2:	e655      	b.n	8011b50 <_dtoa_r+0x7f8>
 8011ea4:	9b00      	ldr	r3, [sp, #0]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	f77f aed6 	ble.w	8011c58 <_dtoa_r+0x900>
 8011eac:	4656      	mov	r6, sl
 8011eae:	4621      	mov	r1, r4
 8011eb0:	4648      	mov	r0, r9
 8011eb2:	f7ff f9c6 	bl	8011242 <quorem>
 8011eb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011eba:	f806 8b01 	strb.w	r8, [r6], #1
 8011ebe:	9b00      	ldr	r3, [sp, #0]
 8011ec0:	eba6 020a 	sub.w	r2, r6, sl
 8011ec4:	4293      	cmp	r3, r2
 8011ec6:	ddb3      	ble.n	8011e30 <_dtoa_r+0xad8>
 8011ec8:	4649      	mov	r1, r9
 8011eca:	2300      	movs	r3, #0
 8011ecc:	220a      	movs	r2, #10
 8011ece:	4658      	mov	r0, fp
 8011ed0:	f000 f968 	bl	80121a4 <__multadd>
 8011ed4:	4681      	mov	r9, r0
 8011ed6:	e7ea      	b.n	8011eae <_dtoa_r+0xb56>
 8011ed8:	08015148 	.word	0x08015148
 8011edc:	080150cc 	.word	0x080150cc

08011ee0 <_free_r>:
 8011ee0:	b538      	push	{r3, r4, r5, lr}
 8011ee2:	4605      	mov	r5, r0
 8011ee4:	2900      	cmp	r1, #0
 8011ee6:	d041      	beq.n	8011f6c <_free_r+0x8c>
 8011ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011eec:	1f0c      	subs	r4, r1, #4
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	bfb8      	it	lt
 8011ef2:	18e4      	addlt	r4, r4, r3
 8011ef4:	f000 f8e8 	bl	80120c8 <__malloc_lock>
 8011ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8011f70 <_free_r+0x90>)
 8011efa:	6813      	ldr	r3, [r2, #0]
 8011efc:	b933      	cbnz	r3, 8011f0c <_free_r+0x2c>
 8011efe:	6063      	str	r3, [r4, #4]
 8011f00:	6014      	str	r4, [r2, #0]
 8011f02:	4628      	mov	r0, r5
 8011f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f08:	f000 b8e4 	b.w	80120d4 <__malloc_unlock>
 8011f0c:	42a3      	cmp	r3, r4
 8011f0e:	d908      	bls.n	8011f22 <_free_r+0x42>
 8011f10:	6820      	ldr	r0, [r4, #0]
 8011f12:	1821      	adds	r1, r4, r0
 8011f14:	428b      	cmp	r3, r1
 8011f16:	bf01      	itttt	eq
 8011f18:	6819      	ldreq	r1, [r3, #0]
 8011f1a:	685b      	ldreq	r3, [r3, #4]
 8011f1c:	1809      	addeq	r1, r1, r0
 8011f1e:	6021      	streq	r1, [r4, #0]
 8011f20:	e7ed      	b.n	8011efe <_free_r+0x1e>
 8011f22:	461a      	mov	r2, r3
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	b10b      	cbz	r3, 8011f2c <_free_r+0x4c>
 8011f28:	42a3      	cmp	r3, r4
 8011f2a:	d9fa      	bls.n	8011f22 <_free_r+0x42>
 8011f2c:	6811      	ldr	r1, [r2, #0]
 8011f2e:	1850      	adds	r0, r2, r1
 8011f30:	42a0      	cmp	r0, r4
 8011f32:	d10b      	bne.n	8011f4c <_free_r+0x6c>
 8011f34:	6820      	ldr	r0, [r4, #0]
 8011f36:	4401      	add	r1, r0
 8011f38:	1850      	adds	r0, r2, r1
 8011f3a:	4283      	cmp	r3, r0
 8011f3c:	6011      	str	r1, [r2, #0]
 8011f3e:	d1e0      	bne.n	8011f02 <_free_r+0x22>
 8011f40:	6818      	ldr	r0, [r3, #0]
 8011f42:	685b      	ldr	r3, [r3, #4]
 8011f44:	6053      	str	r3, [r2, #4]
 8011f46:	4408      	add	r0, r1
 8011f48:	6010      	str	r0, [r2, #0]
 8011f4a:	e7da      	b.n	8011f02 <_free_r+0x22>
 8011f4c:	d902      	bls.n	8011f54 <_free_r+0x74>
 8011f4e:	230c      	movs	r3, #12
 8011f50:	602b      	str	r3, [r5, #0]
 8011f52:	e7d6      	b.n	8011f02 <_free_r+0x22>
 8011f54:	6820      	ldr	r0, [r4, #0]
 8011f56:	1821      	adds	r1, r4, r0
 8011f58:	428b      	cmp	r3, r1
 8011f5a:	bf04      	itt	eq
 8011f5c:	6819      	ldreq	r1, [r3, #0]
 8011f5e:	685b      	ldreq	r3, [r3, #4]
 8011f60:	6063      	str	r3, [r4, #4]
 8011f62:	bf04      	itt	eq
 8011f64:	1809      	addeq	r1, r1, r0
 8011f66:	6021      	streq	r1, [r4, #0]
 8011f68:	6054      	str	r4, [r2, #4]
 8011f6a:	e7ca      	b.n	8011f02 <_free_r+0x22>
 8011f6c:	bd38      	pop	{r3, r4, r5, pc}
 8011f6e:	bf00      	nop
 8011f70:	20002fc0 	.word	0x20002fc0

08011f74 <malloc>:
 8011f74:	4b02      	ldr	r3, [pc, #8]	@ (8011f80 <malloc+0xc>)
 8011f76:	4601      	mov	r1, r0
 8011f78:	6818      	ldr	r0, [r3, #0]
 8011f7a:	f000 b825 	b.w	8011fc8 <_malloc_r>
 8011f7e:	bf00      	nop
 8011f80:	20000164 	.word	0x20000164

08011f84 <sbrk_aligned>:
 8011f84:	b570      	push	{r4, r5, r6, lr}
 8011f86:	4e0f      	ldr	r6, [pc, #60]	@ (8011fc4 <sbrk_aligned+0x40>)
 8011f88:	460c      	mov	r4, r1
 8011f8a:	6831      	ldr	r1, [r6, #0]
 8011f8c:	4605      	mov	r5, r0
 8011f8e:	b911      	cbnz	r1, 8011f96 <sbrk_aligned+0x12>
 8011f90:	f000 feca 	bl	8012d28 <_sbrk_r>
 8011f94:	6030      	str	r0, [r6, #0]
 8011f96:	4621      	mov	r1, r4
 8011f98:	4628      	mov	r0, r5
 8011f9a:	f000 fec5 	bl	8012d28 <_sbrk_r>
 8011f9e:	1c43      	adds	r3, r0, #1
 8011fa0:	d103      	bne.n	8011faa <sbrk_aligned+0x26>
 8011fa2:	f04f 34ff 	mov.w	r4, #4294967295
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	bd70      	pop	{r4, r5, r6, pc}
 8011faa:	1cc4      	adds	r4, r0, #3
 8011fac:	f024 0403 	bic.w	r4, r4, #3
 8011fb0:	42a0      	cmp	r0, r4
 8011fb2:	d0f8      	beq.n	8011fa6 <sbrk_aligned+0x22>
 8011fb4:	1a21      	subs	r1, r4, r0
 8011fb6:	4628      	mov	r0, r5
 8011fb8:	f000 feb6 	bl	8012d28 <_sbrk_r>
 8011fbc:	3001      	adds	r0, #1
 8011fbe:	d1f2      	bne.n	8011fa6 <sbrk_aligned+0x22>
 8011fc0:	e7ef      	b.n	8011fa2 <sbrk_aligned+0x1e>
 8011fc2:	bf00      	nop
 8011fc4:	20002fbc 	.word	0x20002fbc

08011fc8 <_malloc_r>:
 8011fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fcc:	1ccd      	adds	r5, r1, #3
 8011fce:	f025 0503 	bic.w	r5, r5, #3
 8011fd2:	3508      	adds	r5, #8
 8011fd4:	2d0c      	cmp	r5, #12
 8011fd6:	bf38      	it	cc
 8011fd8:	250c      	movcc	r5, #12
 8011fda:	2d00      	cmp	r5, #0
 8011fdc:	4606      	mov	r6, r0
 8011fde:	db01      	blt.n	8011fe4 <_malloc_r+0x1c>
 8011fe0:	42a9      	cmp	r1, r5
 8011fe2:	d904      	bls.n	8011fee <_malloc_r+0x26>
 8011fe4:	230c      	movs	r3, #12
 8011fe6:	6033      	str	r3, [r6, #0]
 8011fe8:	2000      	movs	r0, #0
 8011fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80120c4 <_malloc_r+0xfc>
 8011ff2:	f000 f869 	bl	80120c8 <__malloc_lock>
 8011ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8011ffa:	461c      	mov	r4, r3
 8011ffc:	bb44      	cbnz	r4, 8012050 <_malloc_r+0x88>
 8011ffe:	4629      	mov	r1, r5
 8012000:	4630      	mov	r0, r6
 8012002:	f7ff ffbf 	bl	8011f84 <sbrk_aligned>
 8012006:	1c43      	adds	r3, r0, #1
 8012008:	4604      	mov	r4, r0
 801200a:	d158      	bne.n	80120be <_malloc_r+0xf6>
 801200c:	f8d8 4000 	ldr.w	r4, [r8]
 8012010:	4627      	mov	r7, r4
 8012012:	2f00      	cmp	r7, #0
 8012014:	d143      	bne.n	801209e <_malloc_r+0xd6>
 8012016:	2c00      	cmp	r4, #0
 8012018:	d04b      	beq.n	80120b2 <_malloc_r+0xea>
 801201a:	6823      	ldr	r3, [r4, #0]
 801201c:	4639      	mov	r1, r7
 801201e:	4630      	mov	r0, r6
 8012020:	eb04 0903 	add.w	r9, r4, r3
 8012024:	f000 fe80 	bl	8012d28 <_sbrk_r>
 8012028:	4581      	cmp	r9, r0
 801202a:	d142      	bne.n	80120b2 <_malloc_r+0xea>
 801202c:	6821      	ldr	r1, [r4, #0]
 801202e:	1a6d      	subs	r5, r5, r1
 8012030:	4629      	mov	r1, r5
 8012032:	4630      	mov	r0, r6
 8012034:	f7ff ffa6 	bl	8011f84 <sbrk_aligned>
 8012038:	3001      	adds	r0, #1
 801203a:	d03a      	beq.n	80120b2 <_malloc_r+0xea>
 801203c:	6823      	ldr	r3, [r4, #0]
 801203e:	442b      	add	r3, r5
 8012040:	6023      	str	r3, [r4, #0]
 8012042:	f8d8 3000 	ldr.w	r3, [r8]
 8012046:	685a      	ldr	r2, [r3, #4]
 8012048:	bb62      	cbnz	r2, 80120a4 <_malloc_r+0xdc>
 801204a:	f8c8 7000 	str.w	r7, [r8]
 801204e:	e00f      	b.n	8012070 <_malloc_r+0xa8>
 8012050:	6822      	ldr	r2, [r4, #0]
 8012052:	1b52      	subs	r2, r2, r5
 8012054:	d420      	bmi.n	8012098 <_malloc_r+0xd0>
 8012056:	2a0b      	cmp	r2, #11
 8012058:	d917      	bls.n	801208a <_malloc_r+0xc2>
 801205a:	1961      	adds	r1, r4, r5
 801205c:	42a3      	cmp	r3, r4
 801205e:	6025      	str	r5, [r4, #0]
 8012060:	bf18      	it	ne
 8012062:	6059      	strne	r1, [r3, #4]
 8012064:	6863      	ldr	r3, [r4, #4]
 8012066:	bf08      	it	eq
 8012068:	f8c8 1000 	streq.w	r1, [r8]
 801206c:	5162      	str	r2, [r4, r5]
 801206e:	604b      	str	r3, [r1, #4]
 8012070:	4630      	mov	r0, r6
 8012072:	f000 f82f 	bl	80120d4 <__malloc_unlock>
 8012076:	f104 000b 	add.w	r0, r4, #11
 801207a:	1d23      	adds	r3, r4, #4
 801207c:	f020 0007 	bic.w	r0, r0, #7
 8012080:	1ac2      	subs	r2, r0, r3
 8012082:	bf1c      	itt	ne
 8012084:	1a1b      	subne	r3, r3, r0
 8012086:	50a3      	strne	r3, [r4, r2]
 8012088:	e7af      	b.n	8011fea <_malloc_r+0x22>
 801208a:	6862      	ldr	r2, [r4, #4]
 801208c:	42a3      	cmp	r3, r4
 801208e:	bf0c      	ite	eq
 8012090:	f8c8 2000 	streq.w	r2, [r8]
 8012094:	605a      	strne	r2, [r3, #4]
 8012096:	e7eb      	b.n	8012070 <_malloc_r+0xa8>
 8012098:	4623      	mov	r3, r4
 801209a:	6864      	ldr	r4, [r4, #4]
 801209c:	e7ae      	b.n	8011ffc <_malloc_r+0x34>
 801209e:	463c      	mov	r4, r7
 80120a0:	687f      	ldr	r7, [r7, #4]
 80120a2:	e7b6      	b.n	8012012 <_malloc_r+0x4a>
 80120a4:	461a      	mov	r2, r3
 80120a6:	685b      	ldr	r3, [r3, #4]
 80120a8:	42a3      	cmp	r3, r4
 80120aa:	d1fb      	bne.n	80120a4 <_malloc_r+0xdc>
 80120ac:	2300      	movs	r3, #0
 80120ae:	6053      	str	r3, [r2, #4]
 80120b0:	e7de      	b.n	8012070 <_malloc_r+0xa8>
 80120b2:	230c      	movs	r3, #12
 80120b4:	6033      	str	r3, [r6, #0]
 80120b6:	4630      	mov	r0, r6
 80120b8:	f000 f80c 	bl	80120d4 <__malloc_unlock>
 80120bc:	e794      	b.n	8011fe8 <_malloc_r+0x20>
 80120be:	6005      	str	r5, [r0, #0]
 80120c0:	e7d6      	b.n	8012070 <_malloc_r+0xa8>
 80120c2:	bf00      	nop
 80120c4:	20002fc0 	.word	0x20002fc0

080120c8 <__malloc_lock>:
 80120c8:	4801      	ldr	r0, [pc, #4]	@ (80120d0 <__malloc_lock+0x8>)
 80120ca:	f7ff b8aa 	b.w	8011222 <__retarget_lock_acquire_recursive>
 80120ce:	bf00      	nop
 80120d0:	20002fb8 	.word	0x20002fb8

080120d4 <__malloc_unlock>:
 80120d4:	4801      	ldr	r0, [pc, #4]	@ (80120dc <__malloc_unlock+0x8>)
 80120d6:	f7ff b8a5 	b.w	8011224 <__retarget_lock_release_recursive>
 80120da:	bf00      	nop
 80120dc:	20002fb8 	.word	0x20002fb8

080120e0 <_Balloc>:
 80120e0:	b570      	push	{r4, r5, r6, lr}
 80120e2:	69c6      	ldr	r6, [r0, #28]
 80120e4:	4604      	mov	r4, r0
 80120e6:	460d      	mov	r5, r1
 80120e8:	b976      	cbnz	r6, 8012108 <_Balloc+0x28>
 80120ea:	2010      	movs	r0, #16
 80120ec:	f7ff ff42 	bl	8011f74 <malloc>
 80120f0:	4602      	mov	r2, r0
 80120f2:	61e0      	str	r0, [r4, #28]
 80120f4:	b920      	cbnz	r0, 8012100 <_Balloc+0x20>
 80120f6:	4b18      	ldr	r3, [pc, #96]	@ (8012158 <_Balloc+0x78>)
 80120f8:	4818      	ldr	r0, [pc, #96]	@ (801215c <_Balloc+0x7c>)
 80120fa:	216b      	movs	r1, #107	@ 0x6b
 80120fc:	f000 fe24 	bl	8012d48 <__assert_func>
 8012100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012104:	6006      	str	r6, [r0, #0]
 8012106:	60c6      	str	r6, [r0, #12]
 8012108:	69e6      	ldr	r6, [r4, #28]
 801210a:	68f3      	ldr	r3, [r6, #12]
 801210c:	b183      	cbz	r3, 8012130 <_Balloc+0x50>
 801210e:	69e3      	ldr	r3, [r4, #28]
 8012110:	68db      	ldr	r3, [r3, #12]
 8012112:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012116:	b9b8      	cbnz	r0, 8012148 <_Balloc+0x68>
 8012118:	2101      	movs	r1, #1
 801211a:	fa01 f605 	lsl.w	r6, r1, r5
 801211e:	1d72      	adds	r2, r6, #5
 8012120:	0092      	lsls	r2, r2, #2
 8012122:	4620      	mov	r0, r4
 8012124:	f000 fe2e 	bl	8012d84 <_calloc_r>
 8012128:	b160      	cbz	r0, 8012144 <_Balloc+0x64>
 801212a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801212e:	e00e      	b.n	801214e <_Balloc+0x6e>
 8012130:	2221      	movs	r2, #33	@ 0x21
 8012132:	2104      	movs	r1, #4
 8012134:	4620      	mov	r0, r4
 8012136:	f000 fe25 	bl	8012d84 <_calloc_r>
 801213a:	69e3      	ldr	r3, [r4, #28]
 801213c:	60f0      	str	r0, [r6, #12]
 801213e:	68db      	ldr	r3, [r3, #12]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d1e4      	bne.n	801210e <_Balloc+0x2e>
 8012144:	2000      	movs	r0, #0
 8012146:	bd70      	pop	{r4, r5, r6, pc}
 8012148:	6802      	ldr	r2, [r0, #0]
 801214a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801214e:	2300      	movs	r3, #0
 8012150:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012154:	e7f7      	b.n	8012146 <_Balloc+0x66>
 8012156:	bf00      	nop
 8012158:	080150d9 	.word	0x080150d9
 801215c:	08015159 	.word	0x08015159

08012160 <_Bfree>:
 8012160:	b570      	push	{r4, r5, r6, lr}
 8012162:	69c6      	ldr	r6, [r0, #28]
 8012164:	4605      	mov	r5, r0
 8012166:	460c      	mov	r4, r1
 8012168:	b976      	cbnz	r6, 8012188 <_Bfree+0x28>
 801216a:	2010      	movs	r0, #16
 801216c:	f7ff ff02 	bl	8011f74 <malloc>
 8012170:	4602      	mov	r2, r0
 8012172:	61e8      	str	r0, [r5, #28]
 8012174:	b920      	cbnz	r0, 8012180 <_Bfree+0x20>
 8012176:	4b09      	ldr	r3, [pc, #36]	@ (801219c <_Bfree+0x3c>)
 8012178:	4809      	ldr	r0, [pc, #36]	@ (80121a0 <_Bfree+0x40>)
 801217a:	218f      	movs	r1, #143	@ 0x8f
 801217c:	f000 fde4 	bl	8012d48 <__assert_func>
 8012180:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012184:	6006      	str	r6, [r0, #0]
 8012186:	60c6      	str	r6, [r0, #12]
 8012188:	b13c      	cbz	r4, 801219a <_Bfree+0x3a>
 801218a:	69eb      	ldr	r3, [r5, #28]
 801218c:	6862      	ldr	r2, [r4, #4]
 801218e:	68db      	ldr	r3, [r3, #12]
 8012190:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012194:	6021      	str	r1, [r4, #0]
 8012196:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801219a:	bd70      	pop	{r4, r5, r6, pc}
 801219c:	080150d9 	.word	0x080150d9
 80121a0:	08015159 	.word	0x08015159

080121a4 <__multadd>:
 80121a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121a8:	690d      	ldr	r5, [r1, #16]
 80121aa:	4607      	mov	r7, r0
 80121ac:	460c      	mov	r4, r1
 80121ae:	461e      	mov	r6, r3
 80121b0:	f101 0c14 	add.w	ip, r1, #20
 80121b4:	2000      	movs	r0, #0
 80121b6:	f8dc 3000 	ldr.w	r3, [ip]
 80121ba:	b299      	uxth	r1, r3
 80121bc:	fb02 6101 	mla	r1, r2, r1, r6
 80121c0:	0c1e      	lsrs	r6, r3, #16
 80121c2:	0c0b      	lsrs	r3, r1, #16
 80121c4:	fb02 3306 	mla	r3, r2, r6, r3
 80121c8:	b289      	uxth	r1, r1
 80121ca:	3001      	adds	r0, #1
 80121cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80121d0:	4285      	cmp	r5, r0
 80121d2:	f84c 1b04 	str.w	r1, [ip], #4
 80121d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80121da:	dcec      	bgt.n	80121b6 <__multadd+0x12>
 80121dc:	b30e      	cbz	r6, 8012222 <__multadd+0x7e>
 80121de:	68a3      	ldr	r3, [r4, #8]
 80121e0:	42ab      	cmp	r3, r5
 80121e2:	dc19      	bgt.n	8012218 <__multadd+0x74>
 80121e4:	6861      	ldr	r1, [r4, #4]
 80121e6:	4638      	mov	r0, r7
 80121e8:	3101      	adds	r1, #1
 80121ea:	f7ff ff79 	bl	80120e0 <_Balloc>
 80121ee:	4680      	mov	r8, r0
 80121f0:	b928      	cbnz	r0, 80121fe <__multadd+0x5a>
 80121f2:	4602      	mov	r2, r0
 80121f4:	4b0c      	ldr	r3, [pc, #48]	@ (8012228 <__multadd+0x84>)
 80121f6:	480d      	ldr	r0, [pc, #52]	@ (801222c <__multadd+0x88>)
 80121f8:	21ba      	movs	r1, #186	@ 0xba
 80121fa:	f000 fda5 	bl	8012d48 <__assert_func>
 80121fe:	6922      	ldr	r2, [r4, #16]
 8012200:	3202      	adds	r2, #2
 8012202:	f104 010c 	add.w	r1, r4, #12
 8012206:	0092      	lsls	r2, r2, #2
 8012208:	300c      	adds	r0, #12
 801220a:	f7ff f80c 	bl	8011226 <memcpy>
 801220e:	4621      	mov	r1, r4
 8012210:	4638      	mov	r0, r7
 8012212:	f7ff ffa5 	bl	8012160 <_Bfree>
 8012216:	4644      	mov	r4, r8
 8012218:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801221c:	3501      	adds	r5, #1
 801221e:	615e      	str	r6, [r3, #20]
 8012220:	6125      	str	r5, [r4, #16]
 8012222:	4620      	mov	r0, r4
 8012224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012228:	08015148 	.word	0x08015148
 801222c:	08015159 	.word	0x08015159

08012230 <__hi0bits>:
 8012230:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012234:	4603      	mov	r3, r0
 8012236:	bf36      	itet	cc
 8012238:	0403      	lslcc	r3, r0, #16
 801223a:	2000      	movcs	r0, #0
 801223c:	2010      	movcc	r0, #16
 801223e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012242:	bf3c      	itt	cc
 8012244:	021b      	lslcc	r3, r3, #8
 8012246:	3008      	addcc	r0, #8
 8012248:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801224c:	bf3c      	itt	cc
 801224e:	011b      	lslcc	r3, r3, #4
 8012250:	3004      	addcc	r0, #4
 8012252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012256:	bf3c      	itt	cc
 8012258:	009b      	lslcc	r3, r3, #2
 801225a:	3002      	addcc	r0, #2
 801225c:	2b00      	cmp	r3, #0
 801225e:	db05      	blt.n	801226c <__hi0bits+0x3c>
 8012260:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012264:	f100 0001 	add.w	r0, r0, #1
 8012268:	bf08      	it	eq
 801226a:	2020      	moveq	r0, #32
 801226c:	4770      	bx	lr

0801226e <__lo0bits>:
 801226e:	6803      	ldr	r3, [r0, #0]
 8012270:	4602      	mov	r2, r0
 8012272:	f013 0007 	ands.w	r0, r3, #7
 8012276:	d00b      	beq.n	8012290 <__lo0bits+0x22>
 8012278:	07d9      	lsls	r1, r3, #31
 801227a:	d421      	bmi.n	80122c0 <__lo0bits+0x52>
 801227c:	0798      	lsls	r0, r3, #30
 801227e:	bf49      	itett	mi
 8012280:	085b      	lsrmi	r3, r3, #1
 8012282:	089b      	lsrpl	r3, r3, #2
 8012284:	2001      	movmi	r0, #1
 8012286:	6013      	strmi	r3, [r2, #0]
 8012288:	bf5c      	itt	pl
 801228a:	6013      	strpl	r3, [r2, #0]
 801228c:	2002      	movpl	r0, #2
 801228e:	4770      	bx	lr
 8012290:	b299      	uxth	r1, r3
 8012292:	b909      	cbnz	r1, 8012298 <__lo0bits+0x2a>
 8012294:	0c1b      	lsrs	r3, r3, #16
 8012296:	2010      	movs	r0, #16
 8012298:	b2d9      	uxtb	r1, r3
 801229a:	b909      	cbnz	r1, 80122a0 <__lo0bits+0x32>
 801229c:	3008      	adds	r0, #8
 801229e:	0a1b      	lsrs	r3, r3, #8
 80122a0:	0719      	lsls	r1, r3, #28
 80122a2:	bf04      	itt	eq
 80122a4:	091b      	lsreq	r3, r3, #4
 80122a6:	3004      	addeq	r0, #4
 80122a8:	0799      	lsls	r1, r3, #30
 80122aa:	bf04      	itt	eq
 80122ac:	089b      	lsreq	r3, r3, #2
 80122ae:	3002      	addeq	r0, #2
 80122b0:	07d9      	lsls	r1, r3, #31
 80122b2:	d403      	bmi.n	80122bc <__lo0bits+0x4e>
 80122b4:	085b      	lsrs	r3, r3, #1
 80122b6:	f100 0001 	add.w	r0, r0, #1
 80122ba:	d003      	beq.n	80122c4 <__lo0bits+0x56>
 80122bc:	6013      	str	r3, [r2, #0]
 80122be:	4770      	bx	lr
 80122c0:	2000      	movs	r0, #0
 80122c2:	4770      	bx	lr
 80122c4:	2020      	movs	r0, #32
 80122c6:	4770      	bx	lr

080122c8 <__i2b>:
 80122c8:	b510      	push	{r4, lr}
 80122ca:	460c      	mov	r4, r1
 80122cc:	2101      	movs	r1, #1
 80122ce:	f7ff ff07 	bl	80120e0 <_Balloc>
 80122d2:	4602      	mov	r2, r0
 80122d4:	b928      	cbnz	r0, 80122e2 <__i2b+0x1a>
 80122d6:	4b05      	ldr	r3, [pc, #20]	@ (80122ec <__i2b+0x24>)
 80122d8:	4805      	ldr	r0, [pc, #20]	@ (80122f0 <__i2b+0x28>)
 80122da:	f240 1145 	movw	r1, #325	@ 0x145
 80122de:	f000 fd33 	bl	8012d48 <__assert_func>
 80122e2:	2301      	movs	r3, #1
 80122e4:	6144      	str	r4, [r0, #20]
 80122e6:	6103      	str	r3, [r0, #16]
 80122e8:	bd10      	pop	{r4, pc}
 80122ea:	bf00      	nop
 80122ec:	08015148 	.word	0x08015148
 80122f0:	08015159 	.word	0x08015159

080122f4 <__multiply>:
 80122f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122f8:	4614      	mov	r4, r2
 80122fa:	690a      	ldr	r2, [r1, #16]
 80122fc:	6923      	ldr	r3, [r4, #16]
 80122fe:	429a      	cmp	r2, r3
 8012300:	bfa8      	it	ge
 8012302:	4623      	movge	r3, r4
 8012304:	460f      	mov	r7, r1
 8012306:	bfa4      	itt	ge
 8012308:	460c      	movge	r4, r1
 801230a:	461f      	movge	r7, r3
 801230c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012310:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012314:	68a3      	ldr	r3, [r4, #8]
 8012316:	6861      	ldr	r1, [r4, #4]
 8012318:	eb0a 0609 	add.w	r6, sl, r9
 801231c:	42b3      	cmp	r3, r6
 801231e:	b085      	sub	sp, #20
 8012320:	bfb8      	it	lt
 8012322:	3101      	addlt	r1, #1
 8012324:	f7ff fedc 	bl	80120e0 <_Balloc>
 8012328:	b930      	cbnz	r0, 8012338 <__multiply+0x44>
 801232a:	4602      	mov	r2, r0
 801232c:	4b44      	ldr	r3, [pc, #272]	@ (8012440 <__multiply+0x14c>)
 801232e:	4845      	ldr	r0, [pc, #276]	@ (8012444 <__multiply+0x150>)
 8012330:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012334:	f000 fd08 	bl	8012d48 <__assert_func>
 8012338:	f100 0514 	add.w	r5, r0, #20
 801233c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012340:	462b      	mov	r3, r5
 8012342:	2200      	movs	r2, #0
 8012344:	4543      	cmp	r3, r8
 8012346:	d321      	bcc.n	801238c <__multiply+0x98>
 8012348:	f107 0114 	add.w	r1, r7, #20
 801234c:	f104 0214 	add.w	r2, r4, #20
 8012350:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012354:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012358:	9302      	str	r3, [sp, #8]
 801235a:	1b13      	subs	r3, r2, r4
 801235c:	3b15      	subs	r3, #21
 801235e:	f023 0303 	bic.w	r3, r3, #3
 8012362:	3304      	adds	r3, #4
 8012364:	f104 0715 	add.w	r7, r4, #21
 8012368:	42ba      	cmp	r2, r7
 801236a:	bf38      	it	cc
 801236c:	2304      	movcc	r3, #4
 801236e:	9301      	str	r3, [sp, #4]
 8012370:	9b02      	ldr	r3, [sp, #8]
 8012372:	9103      	str	r1, [sp, #12]
 8012374:	428b      	cmp	r3, r1
 8012376:	d80c      	bhi.n	8012392 <__multiply+0x9e>
 8012378:	2e00      	cmp	r6, #0
 801237a:	dd03      	ble.n	8012384 <__multiply+0x90>
 801237c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012380:	2b00      	cmp	r3, #0
 8012382:	d05b      	beq.n	801243c <__multiply+0x148>
 8012384:	6106      	str	r6, [r0, #16]
 8012386:	b005      	add	sp, #20
 8012388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801238c:	f843 2b04 	str.w	r2, [r3], #4
 8012390:	e7d8      	b.n	8012344 <__multiply+0x50>
 8012392:	f8b1 a000 	ldrh.w	sl, [r1]
 8012396:	f1ba 0f00 	cmp.w	sl, #0
 801239a:	d024      	beq.n	80123e6 <__multiply+0xf2>
 801239c:	f104 0e14 	add.w	lr, r4, #20
 80123a0:	46a9      	mov	r9, r5
 80123a2:	f04f 0c00 	mov.w	ip, #0
 80123a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80123aa:	f8d9 3000 	ldr.w	r3, [r9]
 80123ae:	fa1f fb87 	uxth.w	fp, r7
 80123b2:	b29b      	uxth	r3, r3
 80123b4:	fb0a 330b 	mla	r3, sl, fp, r3
 80123b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80123bc:	f8d9 7000 	ldr.w	r7, [r9]
 80123c0:	4463      	add	r3, ip
 80123c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80123c6:	fb0a c70b 	mla	r7, sl, fp, ip
 80123ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80123ce:	b29b      	uxth	r3, r3
 80123d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80123d4:	4572      	cmp	r2, lr
 80123d6:	f849 3b04 	str.w	r3, [r9], #4
 80123da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80123de:	d8e2      	bhi.n	80123a6 <__multiply+0xb2>
 80123e0:	9b01      	ldr	r3, [sp, #4]
 80123e2:	f845 c003 	str.w	ip, [r5, r3]
 80123e6:	9b03      	ldr	r3, [sp, #12]
 80123e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80123ec:	3104      	adds	r1, #4
 80123ee:	f1b9 0f00 	cmp.w	r9, #0
 80123f2:	d021      	beq.n	8012438 <__multiply+0x144>
 80123f4:	682b      	ldr	r3, [r5, #0]
 80123f6:	f104 0c14 	add.w	ip, r4, #20
 80123fa:	46ae      	mov	lr, r5
 80123fc:	f04f 0a00 	mov.w	sl, #0
 8012400:	f8bc b000 	ldrh.w	fp, [ip]
 8012404:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012408:	fb09 770b 	mla	r7, r9, fp, r7
 801240c:	4457      	add	r7, sl
 801240e:	b29b      	uxth	r3, r3
 8012410:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012414:	f84e 3b04 	str.w	r3, [lr], #4
 8012418:	f85c 3b04 	ldr.w	r3, [ip], #4
 801241c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012420:	f8be 3000 	ldrh.w	r3, [lr]
 8012424:	fb09 330a 	mla	r3, r9, sl, r3
 8012428:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801242c:	4562      	cmp	r2, ip
 801242e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012432:	d8e5      	bhi.n	8012400 <__multiply+0x10c>
 8012434:	9f01      	ldr	r7, [sp, #4]
 8012436:	51eb      	str	r3, [r5, r7]
 8012438:	3504      	adds	r5, #4
 801243a:	e799      	b.n	8012370 <__multiply+0x7c>
 801243c:	3e01      	subs	r6, #1
 801243e:	e79b      	b.n	8012378 <__multiply+0x84>
 8012440:	08015148 	.word	0x08015148
 8012444:	08015159 	.word	0x08015159

08012448 <__pow5mult>:
 8012448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801244c:	4615      	mov	r5, r2
 801244e:	f012 0203 	ands.w	r2, r2, #3
 8012452:	4607      	mov	r7, r0
 8012454:	460e      	mov	r6, r1
 8012456:	d007      	beq.n	8012468 <__pow5mult+0x20>
 8012458:	4c25      	ldr	r4, [pc, #148]	@ (80124f0 <__pow5mult+0xa8>)
 801245a:	3a01      	subs	r2, #1
 801245c:	2300      	movs	r3, #0
 801245e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012462:	f7ff fe9f 	bl	80121a4 <__multadd>
 8012466:	4606      	mov	r6, r0
 8012468:	10ad      	asrs	r5, r5, #2
 801246a:	d03d      	beq.n	80124e8 <__pow5mult+0xa0>
 801246c:	69fc      	ldr	r4, [r7, #28]
 801246e:	b97c      	cbnz	r4, 8012490 <__pow5mult+0x48>
 8012470:	2010      	movs	r0, #16
 8012472:	f7ff fd7f 	bl	8011f74 <malloc>
 8012476:	4602      	mov	r2, r0
 8012478:	61f8      	str	r0, [r7, #28]
 801247a:	b928      	cbnz	r0, 8012488 <__pow5mult+0x40>
 801247c:	4b1d      	ldr	r3, [pc, #116]	@ (80124f4 <__pow5mult+0xac>)
 801247e:	481e      	ldr	r0, [pc, #120]	@ (80124f8 <__pow5mult+0xb0>)
 8012480:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012484:	f000 fc60 	bl	8012d48 <__assert_func>
 8012488:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801248c:	6004      	str	r4, [r0, #0]
 801248e:	60c4      	str	r4, [r0, #12]
 8012490:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012494:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012498:	b94c      	cbnz	r4, 80124ae <__pow5mult+0x66>
 801249a:	f240 2171 	movw	r1, #625	@ 0x271
 801249e:	4638      	mov	r0, r7
 80124a0:	f7ff ff12 	bl	80122c8 <__i2b>
 80124a4:	2300      	movs	r3, #0
 80124a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80124aa:	4604      	mov	r4, r0
 80124ac:	6003      	str	r3, [r0, #0]
 80124ae:	f04f 0900 	mov.w	r9, #0
 80124b2:	07eb      	lsls	r3, r5, #31
 80124b4:	d50a      	bpl.n	80124cc <__pow5mult+0x84>
 80124b6:	4631      	mov	r1, r6
 80124b8:	4622      	mov	r2, r4
 80124ba:	4638      	mov	r0, r7
 80124bc:	f7ff ff1a 	bl	80122f4 <__multiply>
 80124c0:	4631      	mov	r1, r6
 80124c2:	4680      	mov	r8, r0
 80124c4:	4638      	mov	r0, r7
 80124c6:	f7ff fe4b 	bl	8012160 <_Bfree>
 80124ca:	4646      	mov	r6, r8
 80124cc:	106d      	asrs	r5, r5, #1
 80124ce:	d00b      	beq.n	80124e8 <__pow5mult+0xa0>
 80124d0:	6820      	ldr	r0, [r4, #0]
 80124d2:	b938      	cbnz	r0, 80124e4 <__pow5mult+0x9c>
 80124d4:	4622      	mov	r2, r4
 80124d6:	4621      	mov	r1, r4
 80124d8:	4638      	mov	r0, r7
 80124da:	f7ff ff0b 	bl	80122f4 <__multiply>
 80124de:	6020      	str	r0, [r4, #0]
 80124e0:	f8c0 9000 	str.w	r9, [r0]
 80124e4:	4604      	mov	r4, r0
 80124e6:	e7e4      	b.n	80124b2 <__pow5mult+0x6a>
 80124e8:	4630      	mov	r0, r6
 80124ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124ee:	bf00      	nop
 80124f0:	080151b4 	.word	0x080151b4
 80124f4:	080150d9 	.word	0x080150d9
 80124f8:	08015159 	.word	0x08015159

080124fc <__lshift>:
 80124fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012500:	460c      	mov	r4, r1
 8012502:	6849      	ldr	r1, [r1, #4]
 8012504:	6923      	ldr	r3, [r4, #16]
 8012506:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801250a:	68a3      	ldr	r3, [r4, #8]
 801250c:	4607      	mov	r7, r0
 801250e:	4691      	mov	r9, r2
 8012510:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012514:	f108 0601 	add.w	r6, r8, #1
 8012518:	42b3      	cmp	r3, r6
 801251a:	db0b      	blt.n	8012534 <__lshift+0x38>
 801251c:	4638      	mov	r0, r7
 801251e:	f7ff fddf 	bl	80120e0 <_Balloc>
 8012522:	4605      	mov	r5, r0
 8012524:	b948      	cbnz	r0, 801253a <__lshift+0x3e>
 8012526:	4602      	mov	r2, r0
 8012528:	4b28      	ldr	r3, [pc, #160]	@ (80125cc <__lshift+0xd0>)
 801252a:	4829      	ldr	r0, [pc, #164]	@ (80125d0 <__lshift+0xd4>)
 801252c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012530:	f000 fc0a 	bl	8012d48 <__assert_func>
 8012534:	3101      	adds	r1, #1
 8012536:	005b      	lsls	r3, r3, #1
 8012538:	e7ee      	b.n	8012518 <__lshift+0x1c>
 801253a:	2300      	movs	r3, #0
 801253c:	f100 0114 	add.w	r1, r0, #20
 8012540:	f100 0210 	add.w	r2, r0, #16
 8012544:	4618      	mov	r0, r3
 8012546:	4553      	cmp	r3, sl
 8012548:	db33      	blt.n	80125b2 <__lshift+0xb6>
 801254a:	6920      	ldr	r0, [r4, #16]
 801254c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012550:	f104 0314 	add.w	r3, r4, #20
 8012554:	f019 091f 	ands.w	r9, r9, #31
 8012558:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801255c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012560:	d02b      	beq.n	80125ba <__lshift+0xbe>
 8012562:	f1c9 0e20 	rsb	lr, r9, #32
 8012566:	468a      	mov	sl, r1
 8012568:	2200      	movs	r2, #0
 801256a:	6818      	ldr	r0, [r3, #0]
 801256c:	fa00 f009 	lsl.w	r0, r0, r9
 8012570:	4310      	orrs	r0, r2
 8012572:	f84a 0b04 	str.w	r0, [sl], #4
 8012576:	f853 2b04 	ldr.w	r2, [r3], #4
 801257a:	459c      	cmp	ip, r3
 801257c:	fa22 f20e 	lsr.w	r2, r2, lr
 8012580:	d8f3      	bhi.n	801256a <__lshift+0x6e>
 8012582:	ebac 0304 	sub.w	r3, ip, r4
 8012586:	3b15      	subs	r3, #21
 8012588:	f023 0303 	bic.w	r3, r3, #3
 801258c:	3304      	adds	r3, #4
 801258e:	f104 0015 	add.w	r0, r4, #21
 8012592:	4584      	cmp	ip, r0
 8012594:	bf38      	it	cc
 8012596:	2304      	movcc	r3, #4
 8012598:	50ca      	str	r2, [r1, r3]
 801259a:	b10a      	cbz	r2, 80125a0 <__lshift+0xa4>
 801259c:	f108 0602 	add.w	r6, r8, #2
 80125a0:	3e01      	subs	r6, #1
 80125a2:	4638      	mov	r0, r7
 80125a4:	612e      	str	r6, [r5, #16]
 80125a6:	4621      	mov	r1, r4
 80125a8:	f7ff fdda 	bl	8012160 <_Bfree>
 80125ac:	4628      	mov	r0, r5
 80125ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80125b6:	3301      	adds	r3, #1
 80125b8:	e7c5      	b.n	8012546 <__lshift+0x4a>
 80125ba:	3904      	subs	r1, #4
 80125bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80125c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80125c4:	459c      	cmp	ip, r3
 80125c6:	d8f9      	bhi.n	80125bc <__lshift+0xc0>
 80125c8:	e7ea      	b.n	80125a0 <__lshift+0xa4>
 80125ca:	bf00      	nop
 80125cc:	08015148 	.word	0x08015148
 80125d0:	08015159 	.word	0x08015159

080125d4 <__mcmp>:
 80125d4:	690a      	ldr	r2, [r1, #16]
 80125d6:	4603      	mov	r3, r0
 80125d8:	6900      	ldr	r0, [r0, #16]
 80125da:	1a80      	subs	r0, r0, r2
 80125dc:	b530      	push	{r4, r5, lr}
 80125de:	d10e      	bne.n	80125fe <__mcmp+0x2a>
 80125e0:	3314      	adds	r3, #20
 80125e2:	3114      	adds	r1, #20
 80125e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80125e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80125ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80125f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80125f4:	4295      	cmp	r5, r2
 80125f6:	d003      	beq.n	8012600 <__mcmp+0x2c>
 80125f8:	d205      	bcs.n	8012606 <__mcmp+0x32>
 80125fa:	f04f 30ff 	mov.w	r0, #4294967295
 80125fe:	bd30      	pop	{r4, r5, pc}
 8012600:	42a3      	cmp	r3, r4
 8012602:	d3f3      	bcc.n	80125ec <__mcmp+0x18>
 8012604:	e7fb      	b.n	80125fe <__mcmp+0x2a>
 8012606:	2001      	movs	r0, #1
 8012608:	e7f9      	b.n	80125fe <__mcmp+0x2a>
	...

0801260c <__mdiff>:
 801260c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012610:	4689      	mov	r9, r1
 8012612:	4606      	mov	r6, r0
 8012614:	4611      	mov	r1, r2
 8012616:	4648      	mov	r0, r9
 8012618:	4614      	mov	r4, r2
 801261a:	f7ff ffdb 	bl	80125d4 <__mcmp>
 801261e:	1e05      	subs	r5, r0, #0
 8012620:	d112      	bne.n	8012648 <__mdiff+0x3c>
 8012622:	4629      	mov	r1, r5
 8012624:	4630      	mov	r0, r6
 8012626:	f7ff fd5b 	bl	80120e0 <_Balloc>
 801262a:	4602      	mov	r2, r0
 801262c:	b928      	cbnz	r0, 801263a <__mdiff+0x2e>
 801262e:	4b3f      	ldr	r3, [pc, #252]	@ (801272c <__mdiff+0x120>)
 8012630:	f240 2137 	movw	r1, #567	@ 0x237
 8012634:	483e      	ldr	r0, [pc, #248]	@ (8012730 <__mdiff+0x124>)
 8012636:	f000 fb87 	bl	8012d48 <__assert_func>
 801263a:	2301      	movs	r3, #1
 801263c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012640:	4610      	mov	r0, r2
 8012642:	b003      	add	sp, #12
 8012644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012648:	bfbc      	itt	lt
 801264a:	464b      	movlt	r3, r9
 801264c:	46a1      	movlt	r9, r4
 801264e:	4630      	mov	r0, r6
 8012650:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012654:	bfba      	itte	lt
 8012656:	461c      	movlt	r4, r3
 8012658:	2501      	movlt	r5, #1
 801265a:	2500      	movge	r5, #0
 801265c:	f7ff fd40 	bl	80120e0 <_Balloc>
 8012660:	4602      	mov	r2, r0
 8012662:	b918      	cbnz	r0, 801266c <__mdiff+0x60>
 8012664:	4b31      	ldr	r3, [pc, #196]	@ (801272c <__mdiff+0x120>)
 8012666:	f240 2145 	movw	r1, #581	@ 0x245
 801266a:	e7e3      	b.n	8012634 <__mdiff+0x28>
 801266c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012670:	6926      	ldr	r6, [r4, #16]
 8012672:	60c5      	str	r5, [r0, #12]
 8012674:	f109 0310 	add.w	r3, r9, #16
 8012678:	f109 0514 	add.w	r5, r9, #20
 801267c:	f104 0e14 	add.w	lr, r4, #20
 8012680:	f100 0b14 	add.w	fp, r0, #20
 8012684:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012688:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801268c:	9301      	str	r3, [sp, #4]
 801268e:	46d9      	mov	r9, fp
 8012690:	f04f 0c00 	mov.w	ip, #0
 8012694:	9b01      	ldr	r3, [sp, #4]
 8012696:	f85e 0b04 	ldr.w	r0, [lr], #4
 801269a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801269e:	9301      	str	r3, [sp, #4]
 80126a0:	fa1f f38a 	uxth.w	r3, sl
 80126a4:	4619      	mov	r1, r3
 80126a6:	b283      	uxth	r3, r0
 80126a8:	1acb      	subs	r3, r1, r3
 80126aa:	0c00      	lsrs	r0, r0, #16
 80126ac:	4463      	add	r3, ip
 80126ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80126b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80126b6:	b29b      	uxth	r3, r3
 80126b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80126bc:	4576      	cmp	r6, lr
 80126be:	f849 3b04 	str.w	r3, [r9], #4
 80126c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80126c6:	d8e5      	bhi.n	8012694 <__mdiff+0x88>
 80126c8:	1b33      	subs	r3, r6, r4
 80126ca:	3b15      	subs	r3, #21
 80126cc:	f023 0303 	bic.w	r3, r3, #3
 80126d0:	3415      	adds	r4, #21
 80126d2:	3304      	adds	r3, #4
 80126d4:	42a6      	cmp	r6, r4
 80126d6:	bf38      	it	cc
 80126d8:	2304      	movcc	r3, #4
 80126da:	441d      	add	r5, r3
 80126dc:	445b      	add	r3, fp
 80126de:	461e      	mov	r6, r3
 80126e0:	462c      	mov	r4, r5
 80126e2:	4544      	cmp	r4, r8
 80126e4:	d30e      	bcc.n	8012704 <__mdiff+0xf8>
 80126e6:	f108 0103 	add.w	r1, r8, #3
 80126ea:	1b49      	subs	r1, r1, r5
 80126ec:	f021 0103 	bic.w	r1, r1, #3
 80126f0:	3d03      	subs	r5, #3
 80126f2:	45a8      	cmp	r8, r5
 80126f4:	bf38      	it	cc
 80126f6:	2100      	movcc	r1, #0
 80126f8:	440b      	add	r3, r1
 80126fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80126fe:	b191      	cbz	r1, 8012726 <__mdiff+0x11a>
 8012700:	6117      	str	r7, [r2, #16]
 8012702:	e79d      	b.n	8012640 <__mdiff+0x34>
 8012704:	f854 1b04 	ldr.w	r1, [r4], #4
 8012708:	46e6      	mov	lr, ip
 801270a:	0c08      	lsrs	r0, r1, #16
 801270c:	fa1c fc81 	uxtah	ip, ip, r1
 8012710:	4471      	add	r1, lr
 8012712:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012716:	b289      	uxth	r1, r1
 8012718:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801271c:	f846 1b04 	str.w	r1, [r6], #4
 8012720:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012724:	e7dd      	b.n	80126e2 <__mdiff+0xd6>
 8012726:	3f01      	subs	r7, #1
 8012728:	e7e7      	b.n	80126fa <__mdiff+0xee>
 801272a:	bf00      	nop
 801272c:	08015148 	.word	0x08015148
 8012730:	08015159 	.word	0x08015159

08012734 <__d2b>:
 8012734:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012738:	460f      	mov	r7, r1
 801273a:	2101      	movs	r1, #1
 801273c:	ec59 8b10 	vmov	r8, r9, d0
 8012740:	4616      	mov	r6, r2
 8012742:	f7ff fccd 	bl	80120e0 <_Balloc>
 8012746:	4604      	mov	r4, r0
 8012748:	b930      	cbnz	r0, 8012758 <__d2b+0x24>
 801274a:	4602      	mov	r2, r0
 801274c:	4b23      	ldr	r3, [pc, #140]	@ (80127dc <__d2b+0xa8>)
 801274e:	4824      	ldr	r0, [pc, #144]	@ (80127e0 <__d2b+0xac>)
 8012750:	f240 310f 	movw	r1, #783	@ 0x30f
 8012754:	f000 faf8 	bl	8012d48 <__assert_func>
 8012758:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801275c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012760:	b10d      	cbz	r5, 8012766 <__d2b+0x32>
 8012762:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012766:	9301      	str	r3, [sp, #4]
 8012768:	f1b8 0300 	subs.w	r3, r8, #0
 801276c:	d023      	beq.n	80127b6 <__d2b+0x82>
 801276e:	4668      	mov	r0, sp
 8012770:	9300      	str	r3, [sp, #0]
 8012772:	f7ff fd7c 	bl	801226e <__lo0bits>
 8012776:	e9dd 1200 	ldrd	r1, r2, [sp]
 801277a:	b1d0      	cbz	r0, 80127b2 <__d2b+0x7e>
 801277c:	f1c0 0320 	rsb	r3, r0, #32
 8012780:	fa02 f303 	lsl.w	r3, r2, r3
 8012784:	430b      	orrs	r3, r1
 8012786:	40c2      	lsrs	r2, r0
 8012788:	6163      	str	r3, [r4, #20]
 801278a:	9201      	str	r2, [sp, #4]
 801278c:	9b01      	ldr	r3, [sp, #4]
 801278e:	61a3      	str	r3, [r4, #24]
 8012790:	2b00      	cmp	r3, #0
 8012792:	bf0c      	ite	eq
 8012794:	2201      	moveq	r2, #1
 8012796:	2202      	movne	r2, #2
 8012798:	6122      	str	r2, [r4, #16]
 801279a:	b1a5      	cbz	r5, 80127c6 <__d2b+0x92>
 801279c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80127a0:	4405      	add	r5, r0
 80127a2:	603d      	str	r5, [r7, #0]
 80127a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80127a8:	6030      	str	r0, [r6, #0]
 80127aa:	4620      	mov	r0, r4
 80127ac:	b003      	add	sp, #12
 80127ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127b2:	6161      	str	r1, [r4, #20]
 80127b4:	e7ea      	b.n	801278c <__d2b+0x58>
 80127b6:	a801      	add	r0, sp, #4
 80127b8:	f7ff fd59 	bl	801226e <__lo0bits>
 80127bc:	9b01      	ldr	r3, [sp, #4]
 80127be:	6163      	str	r3, [r4, #20]
 80127c0:	3020      	adds	r0, #32
 80127c2:	2201      	movs	r2, #1
 80127c4:	e7e8      	b.n	8012798 <__d2b+0x64>
 80127c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80127ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80127ce:	6038      	str	r0, [r7, #0]
 80127d0:	6918      	ldr	r0, [r3, #16]
 80127d2:	f7ff fd2d 	bl	8012230 <__hi0bits>
 80127d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80127da:	e7e5      	b.n	80127a8 <__d2b+0x74>
 80127dc:	08015148 	.word	0x08015148
 80127e0:	08015159 	.word	0x08015159

080127e4 <__ssputs_r>:
 80127e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127e8:	688e      	ldr	r6, [r1, #8]
 80127ea:	461f      	mov	r7, r3
 80127ec:	42be      	cmp	r6, r7
 80127ee:	680b      	ldr	r3, [r1, #0]
 80127f0:	4682      	mov	sl, r0
 80127f2:	460c      	mov	r4, r1
 80127f4:	4690      	mov	r8, r2
 80127f6:	d82d      	bhi.n	8012854 <__ssputs_r+0x70>
 80127f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80127fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012800:	d026      	beq.n	8012850 <__ssputs_r+0x6c>
 8012802:	6965      	ldr	r5, [r4, #20]
 8012804:	6909      	ldr	r1, [r1, #16]
 8012806:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801280a:	eba3 0901 	sub.w	r9, r3, r1
 801280e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012812:	1c7b      	adds	r3, r7, #1
 8012814:	444b      	add	r3, r9
 8012816:	106d      	asrs	r5, r5, #1
 8012818:	429d      	cmp	r5, r3
 801281a:	bf38      	it	cc
 801281c:	461d      	movcc	r5, r3
 801281e:	0553      	lsls	r3, r2, #21
 8012820:	d527      	bpl.n	8012872 <__ssputs_r+0x8e>
 8012822:	4629      	mov	r1, r5
 8012824:	f7ff fbd0 	bl	8011fc8 <_malloc_r>
 8012828:	4606      	mov	r6, r0
 801282a:	b360      	cbz	r0, 8012886 <__ssputs_r+0xa2>
 801282c:	6921      	ldr	r1, [r4, #16]
 801282e:	464a      	mov	r2, r9
 8012830:	f7fe fcf9 	bl	8011226 <memcpy>
 8012834:	89a3      	ldrh	r3, [r4, #12]
 8012836:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801283a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801283e:	81a3      	strh	r3, [r4, #12]
 8012840:	6126      	str	r6, [r4, #16]
 8012842:	6165      	str	r5, [r4, #20]
 8012844:	444e      	add	r6, r9
 8012846:	eba5 0509 	sub.w	r5, r5, r9
 801284a:	6026      	str	r6, [r4, #0]
 801284c:	60a5      	str	r5, [r4, #8]
 801284e:	463e      	mov	r6, r7
 8012850:	42be      	cmp	r6, r7
 8012852:	d900      	bls.n	8012856 <__ssputs_r+0x72>
 8012854:	463e      	mov	r6, r7
 8012856:	6820      	ldr	r0, [r4, #0]
 8012858:	4632      	mov	r2, r6
 801285a:	4641      	mov	r1, r8
 801285c:	f000 fa28 	bl	8012cb0 <memmove>
 8012860:	68a3      	ldr	r3, [r4, #8]
 8012862:	1b9b      	subs	r3, r3, r6
 8012864:	60a3      	str	r3, [r4, #8]
 8012866:	6823      	ldr	r3, [r4, #0]
 8012868:	4433      	add	r3, r6
 801286a:	6023      	str	r3, [r4, #0]
 801286c:	2000      	movs	r0, #0
 801286e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012872:	462a      	mov	r2, r5
 8012874:	f000 faac 	bl	8012dd0 <_realloc_r>
 8012878:	4606      	mov	r6, r0
 801287a:	2800      	cmp	r0, #0
 801287c:	d1e0      	bne.n	8012840 <__ssputs_r+0x5c>
 801287e:	6921      	ldr	r1, [r4, #16]
 8012880:	4650      	mov	r0, sl
 8012882:	f7ff fb2d 	bl	8011ee0 <_free_r>
 8012886:	230c      	movs	r3, #12
 8012888:	f8ca 3000 	str.w	r3, [sl]
 801288c:	89a3      	ldrh	r3, [r4, #12]
 801288e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012892:	81a3      	strh	r3, [r4, #12]
 8012894:	f04f 30ff 	mov.w	r0, #4294967295
 8012898:	e7e9      	b.n	801286e <__ssputs_r+0x8a>
	...

0801289c <_svfiprintf_r>:
 801289c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128a0:	4698      	mov	r8, r3
 80128a2:	898b      	ldrh	r3, [r1, #12]
 80128a4:	061b      	lsls	r3, r3, #24
 80128a6:	b09d      	sub	sp, #116	@ 0x74
 80128a8:	4607      	mov	r7, r0
 80128aa:	460d      	mov	r5, r1
 80128ac:	4614      	mov	r4, r2
 80128ae:	d510      	bpl.n	80128d2 <_svfiprintf_r+0x36>
 80128b0:	690b      	ldr	r3, [r1, #16]
 80128b2:	b973      	cbnz	r3, 80128d2 <_svfiprintf_r+0x36>
 80128b4:	2140      	movs	r1, #64	@ 0x40
 80128b6:	f7ff fb87 	bl	8011fc8 <_malloc_r>
 80128ba:	6028      	str	r0, [r5, #0]
 80128bc:	6128      	str	r0, [r5, #16]
 80128be:	b930      	cbnz	r0, 80128ce <_svfiprintf_r+0x32>
 80128c0:	230c      	movs	r3, #12
 80128c2:	603b      	str	r3, [r7, #0]
 80128c4:	f04f 30ff 	mov.w	r0, #4294967295
 80128c8:	b01d      	add	sp, #116	@ 0x74
 80128ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128ce:	2340      	movs	r3, #64	@ 0x40
 80128d0:	616b      	str	r3, [r5, #20]
 80128d2:	2300      	movs	r3, #0
 80128d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80128d6:	2320      	movs	r3, #32
 80128d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80128dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80128e0:	2330      	movs	r3, #48	@ 0x30
 80128e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012a80 <_svfiprintf_r+0x1e4>
 80128e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80128ea:	f04f 0901 	mov.w	r9, #1
 80128ee:	4623      	mov	r3, r4
 80128f0:	469a      	mov	sl, r3
 80128f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80128f6:	b10a      	cbz	r2, 80128fc <_svfiprintf_r+0x60>
 80128f8:	2a25      	cmp	r2, #37	@ 0x25
 80128fa:	d1f9      	bne.n	80128f0 <_svfiprintf_r+0x54>
 80128fc:	ebba 0b04 	subs.w	fp, sl, r4
 8012900:	d00b      	beq.n	801291a <_svfiprintf_r+0x7e>
 8012902:	465b      	mov	r3, fp
 8012904:	4622      	mov	r2, r4
 8012906:	4629      	mov	r1, r5
 8012908:	4638      	mov	r0, r7
 801290a:	f7ff ff6b 	bl	80127e4 <__ssputs_r>
 801290e:	3001      	adds	r0, #1
 8012910:	f000 80a7 	beq.w	8012a62 <_svfiprintf_r+0x1c6>
 8012914:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012916:	445a      	add	r2, fp
 8012918:	9209      	str	r2, [sp, #36]	@ 0x24
 801291a:	f89a 3000 	ldrb.w	r3, [sl]
 801291e:	2b00      	cmp	r3, #0
 8012920:	f000 809f 	beq.w	8012a62 <_svfiprintf_r+0x1c6>
 8012924:	2300      	movs	r3, #0
 8012926:	f04f 32ff 	mov.w	r2, #4294967295
 801292a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801292e:	f10a 0a01 	add.w	sl, sl, #1
 8012932:	9304      	str	r3, [sp, #16]
 8012934:	9307      	str	r3, [sp, #28]
 8012936:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801293a:	931a      	str	r3, [sp, #104]	@ 0x68
 801293c:	4654      	mov	r4, sl
 801293e:	2205      	movs	r2, #5
 8012940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012944:	484e      	ldr	r0, [pc, #312]	@ (8012a80 <_svfiprintf_r+0x1e4>)
 8012946:	f7ed fc4b 	bl	80001e0 <memchr>
 801294a:	9a04      	ldr	r2, [sp, #16]
 801294c:	b9d8      	cbnz	r0, 8012986 <_svfiprintf_r+0xea>
 801294e:	06d0      	lsls	r0, r2, #27
 8012950:	bf44      	itt	mi
 8012952:	2320      	movmi	r3, #32
 8012954:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012958:	0711      	lsls	r1, r2, #28
 801295a:	bf44      	itt	mi
 801295c:	232b      	movmi	r3, #43	@ 0x2b
 801295e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012962:	f89a 3000 	ldrb.w	r3, [sl]
 8012966:	2b2a      	cmp	r3, #42	@ 0x2a
 8012968:	d015      	beq.n	8012996 <_svfiprintf_r+0xfa>
 801296a:	9a07      	ldr	r2, [sp, #28]
 801296c:	4654      	mov	r4, sl
 801296e:	2000      	movs	r0, #0
 8012970:	f04f 0c0a 	mov.w	ip, #10
 8012974:	4621      	mov	r1, r4
 8012976:	f811 3b01 	ldrb.w	r3, [r1], #1
 801297a:	3b30      	subs	r3, #48	@ 0x30
 801297c:	2b09      	cmp	r3, #9
 801297e:	d94b      	bls.n	8012a18 <_svfiprintf_r+0x17c>
 8012980:	b1b0      	cbz	r0, 80129b0 <_svfiprintf_r+0x114>
 8012982:	9207      	str	r2, [sp, #28]
 8012984:	e014      	b.n	80129b0 <_svfiprintf_r+0x114>
 8012986:	eba0 0308 	sub.w	r3, r0, r8
 801298a:	fa09 f303 	lsl.w	r3, r9, r3
 801298e:	4313      	orrs	r3, r2
 8012990:	9304      	str	r3, [sp, #16]
 8012992:	46a2      	mov	sl, r4
 8012994:	e7d2      	b.n	801293c <_svfiprintf_r+0xa0>
 8012996:	9b03      	ldr	r3, [sp, #12]
 8012998:	1d19      	adds	r1, r3, #4
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	9103      	str	r1, [sp, #12]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	bfbb      	ittet	lt
 80129a2:	425b      	neglt	r3, r3
 80129a4:	f042 0202 	orrlt.w	r2, r2, #2
 80129a8:	9307      	strge	r3, [sp, #28]
 80129aa:	9307      	strlt	r3, [sp, #28]
 80129ac:	bfb8      	it	lt
 80129ae:	9204      	strlt	r2, [sp, #16]
 80129b0:	7823      	ldrb	r3, [r4, #0]
 80129b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80129b4:	d10a      	bne.n	80129cc <_svfiprintf_r+0x130>
 80129b6:	7863      	ldrb	r3, [r4, #1]
 80129b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80129ba:	d132      	bne.n	8012a22 <_svfiprintf_r+0x186>
 80129bc:	9b03      	ldr	r3, [sp, #12]
 80129be:	1d1a      	adds	r2, r3, #4
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	9203      	str	r2, [sp, #12]
 80129c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80129c8:	3402      	adds	r4, #2
 80129ca:	9305      	str	r3, [sp, #20]
 80129cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012a90 <_svfiprintf_r+0x1f4>
 80129d0:	7821      	ldrb	r1, [r4, #0]
 80129d2:	2203      	movs	r2, #3
 80129d4:	4650      	mov	r0, sl
 80129d6:	f7ed fc03 	bl	80001e0 <memchr>
 80129da:	b138      	cbz	r0, 80129ec <_svfiprintf_r+0x150>
 80129dc:	9b04      	ldr	r3, [sp, #16]
 80129de:	eba0 000a 	sub.w	r0, r0, sl
 80129e2:	2240      	movs	r2, #64	@ 0x40
 80129e4:	4082      	lsls	r2, r0
 80129e6:	4313      	orrs	r3, r2
 80129e8:	3401      	adds	r4, #1
 80129ea:	9304      	str	r3, [sp, #16]
 80129ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129f0:	4824      	ldr	r0, [pc, #144]	@ (8012a84 <_svfiprintf_r+0x1e8>)
 80129f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80129f6:	2206      	movs	r2, #6
 80129f8:	f7ed fbf2 	bl	80001e0 <memchr>
 80129fc:	2800      	cmp	r0, #0
 80129fe:	d036      	beq.n	8012a6e <_svfiprintf_r+0x1d2>
 8012a00:	4b21      	ldr	r3, [pc, #132]	@ (8012a88 <_svfiprintf_r+0x1ec>)
 8012a02:	bb1b      	cbnz	r3, 8012a4c <_svfiprintf_r+0x1b0>
 8012a04:	9b03      	ldr	r3, [sp, #12]
 8012a06:	3307      	adds	r3, #7
 8012a08:	f023 0307 	bic.w	r3, r3, #7
 8012a0c:	3308      	adds	r3, #8
 8012a0e:	9303      	str	r3, [sp, #12]
 8012a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a12:	4433      	add	r3, r6
 8012a14:	9309      	str	r3, [sp, #36]	@ 0x24
 8012a16:	e76a      	b.n	80128ee <_svfiprintf_r+0x52>
 8012a18:	fb0c 3202 	mla	r2, ip, r2, r3
 8012a1c:	460c      	mov	r4, r1
 8012a1e:	2001      	movs	r0, #1
 8012a20:	e7a8      	b.n	8012974 <_svfiprintf_r+0xd8>
 8012a22:	2300      	movs	r3, #0
 8012a24:	3401      	adds	r4, #1
 8012a26:	9305      	str	r3, [sp, #20]
 8012a28:	4619      	mov	r1, r3
 8012a2a:	f04f 0c0a 	mov.w	ip, #10
 8012a2e:	4620      	mov	r0, r4
 8012a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a34:	3a30      	subs	r2, #48	@ 0x30
 8012a36:	2a09      	cmp	r2, #9
 8012a38:	d903      	bls.n	8012a42 <_svfiprintf_r+0x1a6>
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d0c6      	beq.n	80129cc <_svfiprintf_r+0x130>
 8012a3e:	9105      	str	r1, [sp, #20]
 8012a40:	e7c4      	b.n	80129cc <_svfiprintf_r+0x130>
 8012a42:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a46:	4604      	mov	r4, r0
 8012a48:	2301      	movs	r3, #1
 8012a4a:	e7f0      	b.n	8012a2e <_svfiprintf_r+0x192>
 8012a4c:	ab03      	add	r3, sp, #12
 8012a4e:	9300      	str	r3, [sp, #0]
 8012a50:	462a      	mov	r2, r5
 8012a52:	4b0e      	ldr	r3, [pc, #56]	@ (8012a8c <_svfiprintf_r+0x1f0>)
 8012a54:	a904      	add	r1, sp, #16
 8012a56:	4638      	mov	r0, r7
 8012a58:	f7fd fd96 	bl	8010588 <_printf_float>
 8012a5c:	1c42      	adds	r2, r0, #1
 8012a5e:	4606      	mov	r6, r0
 8012a60:	d1d6      	bne.n	8012a10 <_svfiprintf_r+0x174>
 8012a62:	89ab      	ldrh	r3, [r5, #12]
 8012a64:	065b      	lsls	r3, r3, #25
 8012a66:	f53f af2d 	bmi.w	80128c4 <_svfiprintf_r+0x28>
 8012a6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a6c:	e72c      	b.n	80128c8 <_svfiprintf_r+0x2c>
 8012a6e:	ab03      	add	r3, sp, #12
 8012a70:	9300      	str	r3, [sp, #0]
 8012a72:	462a      	mov	r2, r5
 8012a74:	4b05      	ldr	r3, [pc, #20]	@ (8012a8c <_svfiprintf_r+0x1f0>)
 8012a76:	a904      	add	r1, sp, #16
 8012a78:	4638      	mov	r0, r7
 8012a7a:	f7fe f81d 	bl	8010ab8 <_printf_i>
 8012a7e:	e7ed      	b.n	8012a5c <_svfiprintf_r+0x1c0>
 8012a80:	080152b0 	.word	0x080152b0
 8012a84:	080152ba 	.word	0x080152ba
 8012a88:	08010589 	.word	0x08010589
 8012a8c:	080127e5 	.word	0x080127e5
 8012a90:	080152b6 	.word	0x080152b6

08012a94 <__sflush_r>:
 8012a94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a9c:	0716      	lsls	r6, r2, #28
 8012a9e:	4605      	mov	r5, r0
 8012aa0:	460c      	mov	r4, r1
 8012aa2:	d454      	bmi.n	8012b4e <__sflush_r+0xba>
 8012aa4:	684b      	ldr	r3, [r1, #4]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	dc02      	bgt.n	8012ab0 <__sflush_r+0x1c>
 8012aaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	dd48      	ble.n	8012b42 <__sflush_r+0xae>
 8012ab0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012ab2:	2e00      	cmp	r6, #0
 8012ab4:	d045      	beq.n	8012b42 <__sflush_r+0xae>
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012abc:	682f      	ldr	r7, [r5, #0]
 8012abe:	6a21      	ldr	r1, [r4, #32]
 8012ac0:	602b      	str	r3, [r5, #0]
 8012ac2:	d030      	beq.n	8012b26 <__sflush_r+0x92>
 8012ac4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012ac6:	89a3      	ldrh	r3, [r4, #12]
 8012ac8:	0759      	lsls	r1, r3, #29
 8012aca:	d505      	bpl.n	8012ad8 <__sflush_r+0x44>
 8012acc:	6863      	ldr	r3, [r4, #4]
 8012ace:	1ad2      	subs	r2, r2, r3
 8012ad0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012ad2:	b10b      	cbz	r3, 8012ad8 <__sflush_r+0x44>
 8012ad4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012ad6:	1ad2      	subs	r2, r2, r3
 8012ad8:	2300      	movs	r3, #0
 8012ada:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012adc:	6a21      	ldr	r1, [r4, #32]
 8012ade:	4628      	mov	r0, r5
 8012ae0:	47b0      	blx	r6
 8012ae2:	1c43      	adds	r3, r0, #1
 8012ae4:	89a3      	ldrh	r3, [r4, #12]
 8012ae6:	d106      	bne.n	8012af6 <__sflush_r+0x62>
 8012ae8:	6829      	ldr	r1, [r5, #0]
 8012aea:	291d      	cmp	r1, #29
 8012aec:	d82b      	bhi.n	8012b46 <__sflush_r+0xb2>
 8012aee:	4a2a      	ldr	r2, [pc, #168]	@ (8012b98 <__sflush_r+0x104>)
 8012af0:	410a      	asrs	r2, r1
 8012af2:	07d6      	lsls	r6, r2, #31
 8012af4:	d427      	bmi.n	8012b46 <__sflush_r+0xb2>
 8012af6:	2200      	movs	r2, #0
 8012af8:	6062      	str	r2, [r4, #4]
 8012afa:	04d9      	lsls	r1, r3, #19
 8012afc:	6922      	ldr	r2, [r4, #16]
 8012afe:	6022      	str	r2, [r4, #0]
 8012b00:	d504      	bpl.n	8012b0c <__sflush_r+0x78>
 8012b02:	1c42      	adds	r2, r0, #1
 8012b04:	d101      	bne.n	8012b0a <__sflush_r+0x76>
 8012b06:	682b      	ldr	r3, [r5, #0]
 8012b08:	b903      	cbnz	r3, 8012b0c <__sflush_r+0x78>
 8012b0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8012b0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012b0e:	602f      	str	r7, [r5, #0]
 8012b10:	b1b9      	cbz	r1, 8012b42 <__sflush_r+0xae>
 8012b12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012b16:	4299      	cmp	r1, r3
 8012b18:	d002      	beq.n	8012b20 <__sflush_r+0x8c>
 8012b1a:	4628      	mov	r0, r5
 8012b1c:	f7ff f9e0 	bl	8011ee0 <_free_r>
 8012b20:	2300      	movs	r3, #0
 8012b22:	6363      	str	r3, [r4, #52]	@ 0x34
 8012b24:	e00d      	b.n	8012b42 <__sflush_r+0xae>
 8012b26:	2301      	movs	r3, #1
 8012b28:	4628      	mov	r0, r5
 8012b2a:	47b0      	blx	r6
 8012b2c:	4602      	mov	r2, r0
 8012b2e:	1c50      	adds	r0, r2, #1
 8012b30:	d1c9      	bne.n	8012ac6 <__sflush_r+0x32>
 8012b32:	682b      	ldr	r3, [r5, #0]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d0c6      	beq.n	8012ac6 <__sflush_r+0x32>
 8012b38:	2b1d      	cmp	r3, #29
 8012b3a:	d001      	beq.n	8012b40 <__sflush_r+0xac>
 8012b3c:	2b16      	cmp	r3, #22
 8012b3e:	d11e      	bne.n	8012b7e <__sflush_r+0xea>
 8012b40:	602f      	str	r7, [r5, #0]
 8012b42:	2000      	movs	r0, #0
 8012b44:	e022      	b.n	8012b8c <__sflush_r+0xf8>
 8012b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b4a:	b21b      	sxth	r3, r3
 8012b4c:	e01b      	b.n	8012b86 <__sflush_r+0xf2>
 8012b4e:	690f      	ldr	r7, [r1, #16]
 8012b50:	2f00      	cmp	r7, #0
 8012b52:	d0f6      	beq.n	8012b42 <__sflush_r+0xae>
 8012b54:	0793      	lsls	r3, r2, #30
 8012b56:	680e      	ldr	r6, [r1, #0]
 8012b58:	bf08      	it	eq
 8012b5a:	694b      	ldreq	r3, [r1, #20]
 8012b5c:	600f      	str	r7, [r1, #0]
 8012b5e:	bf18      	it	ne
 8012b60:	2300      	movne	r3, #0
 8012b62:	eba6 0807 	sub.w	r8, r6, r7
 8012b66:	608b      	str	r3, [r1, #8]
 8012b68:	f1b8 0f00 	cmp.w	r8, #0
 8012b6c:	dde9      	ble.n	8012b42 <__sflush_r+0xae>
 8012b6e:	6a21      	ldr	r1, [r4, #32]
 8012b70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012b72:	4643      	mov	r3, r8
 8012b74:	463a      	mov	r2, r7
 8012b76:	4628      	mov	r0, r5
 8012b78:	47b0      	blx	r6
 8012b7a:	2800      	cmp	r0, #0
 8012b7c:	dc08      	bgt.n	8012b90 <__sflush_r+0xfc>
 8012b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b86:	81a3      	strh	r3, [r4, #12]
 8012b88:	f04f 30ff 	mov.w	r0, #4294967295
 8012b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b90:	4407      	add	r7, r0
 8012b92:	eba8 0800 	sub.w	r8, r8, r0
 8012b96:	e7e7      	b.n	8012b68 <__sflush_r+0xd4>
 8012b98:	dfbffffe 	.word	0xdfbffffe

08012b9c <_fflush_r>:
 8012b9c:	b538      	push	{r3, r4, r5, lr}
 8012b9e:	690b      	ldr	r3, [r1, #16]
 8012ba0:	4605      	mov	r5, r0
 8012ba2:	460c      	mov	r4, r1
 8012ba4:	b913      	cbnz	r3, 8012bac <_fflush_r+0x10>
 8012ba6:	2500      	movs	r5, #0
 8012ba8:	4628      	mov	r0, r5
 8012baa:	bd38      	pop	{r3, r4, r5, pc}
 8012bac:	b118      	cbz	r0, 8012bb6 <_fflush_r+0x1a>
 8012bae:	6a03      	ldr	r3, [r0, #32]
 8012bb0:	b90b      	cbnz	r3, 8012bb6 <_fflush_r+0x1a>
 8012bb2:	f7fe f92d 	bl	8010e10 <__sinit>
 8012bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d0f3      	beq.n	8012ba6 <_fflush_r+0xa>
 8012bbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012bc0:	07d0      	lsls	r0, r2, #31
 8012bc2:	d404      	bmi.n	8012bce <_fflush_r+0x32>
 8012bc4:	0599      	lsls	r1, r3, #22
 8012bc6:	d402      	bmi.n	8012bce <_fflush_r+0x32>
 8012bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012bca:	f7fe fb2a 	bl	8011222 <__retarget_lock_acquire_recursive>
 8012bce:	4628      	mov	r0, r5
 8012bd0:	4621      	mov	r1, r4
 8012bd2:	f7ff ff5f 	bl	8012a94 <__sflush_r>
 8012bd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012bd8:	07da      	lsls	r2, r3, #31
 8012bda:	4605      	mov	r5, r0
 8012bdc:	d4e4      	bmi.n	8012ba8 <_fflush_r+0xc>
 8012bde:	89a3      	ldrh	r3, [r4, #12]
 8012be0:	059b      	lsls	r3, r3, #22
 8012be2:	d4e1      	bmi.n	8012ba8 <_fflush_r+0xc>
 8012be4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012be6:	f7fe fb1d 	bl	8011224 <__retarget_lock_release_recursive>
 8012bea:	e7dd      	b.n	8012ba8 <_fflush_r+0xc>

08012bec <__swhatbuf_r>:
 8012bec:	b570      	push	{r4, r5, r6, lr}
 8012bee:	460c      	mov	r4, r1
 8012bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bf4:	2900      	cmp	r1, #0
 8012bf6:	b096      	sub	sp, #88	@ 0x58
 8012bf8:	4615      	mov	r5, r2
 8012bfa:	461e      	mov	r6, r3
 8012bfc:	da0d      	bge.n	8012c1a <__swhatbuf_r+0x2e>
 8012bfe:	89a3      	ldrh	r3, [r4, #12]
 8012c00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012c04:	f04f 0100 	mov.w	r1, #0
 8012c08:	bf14      	ite	ne
 8012c0a:	2340      	movne	r3, #64	@ 0x40
 8012c0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012c10:	2000      	movs	r0, #0
 8012c12:	6031      	str	r1, [r6, #0]
 8012c14:	602b      	str	r3, [r5, #0]
 8012c16:	b016      	add	sp, #88	@ 0x58
 8012c18:	bd70      	pop	{r4, r5, r6, pc}
 8012c1a:	466a      	mov	r2, sp
 8012c1c:	f000 f862 	bl	8012ce4 <_fstat_r>
 8012c20:	2800      	cmp	r0, #0
 8012c22:	dbec      	blt.n	8012bfe <__swhatbuf_r+0x12>
 8012c24:	9901      	ldr	r1, [sp, #4]
 8012c26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012c2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012c2e:	4259      	negs	r1, r3
 8012c30:	4159      	adcs	r1, r3
 8012c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012c36:	e7eb      	b.n	8012c10 <__swhatbuf_r+0x24>

08012c38 <__smakebuf_r>:
 8012c38:	898b      	ldrh	r3, [r1, #12]
 8012c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c3c:	079d      	lsls	r5, r3, #30
 8012c3e:	4606      	mov	r6, r0
 8012c40:	460c      	mov	r4, r1
 8012c42:	d507      	bpl.n	8012c54 <__smakebuf_r+0x1c>
 8012c44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012c48:	6023      	str	r3, [r4, #0]
 8012c4a:	6123      	str	r3, [r4, #16]
 8012c4c:	2301      	movs	r3, #1
 8012c4e:	6163      	str	r3, [r4, #20]
 8012c50:	b003      	add	sp, #12
 8012c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c54:	ab01      	add	r3, sp, #4
 8012c56:	466a      	mov	r2, sp
 8012c58:	f7ff ffc8 	bl	8012bec <__swhatbuf_r>
 8012c5c:	9f00      	ldr	r7, [sp, #0]
 8012c5e:	4605      	mov	r5, r0
 8012c60:	4639      	mov	r1, r7
 8012c62:	4630      	mov	r0, r6
 8012c64:	f7ff f9b0 	bl	8011fc8 <_malloc_r>
 8012c68:	b948      	cbnz	r0, 8012c7e <__smakebuf_r+0x46>
 8012c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c6e:	059a      	lsls	r2, r3, #22
 8012c70:	d4ee      	bmi.n	8012c50 <__smakebuf_r+0x18>
 8012c72:	f023 0303 	bic.w	r3, r3, #3
 8012c76:	f043 0302 	orr.w	r3, r3, #2
 8012c7a:	81a3      	strh	r3, [r4, #12]
 8012c7c:	e7e2      	b.n	8012c44 <__smakebuf_r+0xc>
 8012c7e:	89a3      	ldrh	r3, [r4, #12]
 8012c80:	6020      	str	r0, [r4, #0]
 8012c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c86:	81a3      	strh	r3, [r4, #12]
 8012c88:	9b01      	ldr	r3, [sp, #4]
 8012c8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012c8e:	b15b      	cbz	r3, 8012ca8 <__smakebuf_r+0x70>
 8012c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c94:	4630      	mov	r0, r6
 8012c96:	f000 f837 	bl	8012d08 <_isatty_r>
 8012c9a:	b128      	cbz	r0, 8012ca8 <__smakebuf_r+0x70>
 8012c9c:	89a3      	ldrh	r3, [r4, #12]
 8012c9e:	f023 0303 	bic.w	r3, r3, #3
 8012ca2:	f043 0301 	orr.w	r3, r3, #1
 8012ca6:	81a3      	strh	r3, [r4, #12]
 8012ca8:	89a3      	ldrh	r3, [r4, #12]
 8012caa:	431d      	orrs	r5, r3
 8012cac:	81a5      	strh	r5, [r4, #12]
 8012cae:	e7cf      	b.n	8012c50 <__smakebuf_r+0x18>

08012cb0 <memmove>:
 8012cb0:	4288      	cmp	r0, r1
 8012cb2:	b510      	push	{r4, lr}
 8012cb4:	eb01 0402 	add.w	r4, r1, r2
 8012cb8:	d902      	bls.n	8012cc0 <memmove+0x10>
 8012cba:	4284      	cmp	r4, r0
 8012cbc:	4623      	mov	r3, r4
 8012cbe:	d807      	bhi.n	8012cd0 <memmove+0x20>
 8012cc0:	1e43      	subs	r3, r0, #1
 8012cc2:	42a1      	cmp	r1, r4
 8012cc4:	d008      	beq.n	8012cd8 <memmove+0x28>
 8012cc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012cca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012cce:	e7f8      	b.n	8012cc2 <memmove+0x12>
 8012cd0:	4402      	add	r2, r0
 8012cd2:	4601      	mov	r1, r0
 8012cd4:	428a      	cmp	r2, r1
 8012cd6:	d100      	bne.n	8012cda <memmove+0x2a>
 8012cd8:	bd10      	pop	{r4, pc}
 8012cda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012cde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012ce2:	e7f7      	b.n	8012cd4 <memmove+0x24>

08012ce4 <_fstat_r>:
 8012ce4:	b538      	push	{r3, r4, r5, lr}
 8012ce6:	4d07      	ldr	r5, [pc, #28]	@ (8012d04 <_fstat_r+0x20>)
 8012ce8:	2300      	movs	r3, #0
 8012cea:	4604      	mov	r4, r0
 8012cec:	4608      	mov	r0, r1
 8012cee:	4611      	mov	r1, r2
 8012cf0:	602b      	str	r3, [r5, #0]
 8012cf2:	f7f0 fa67 	bl	80031c4 <_fstat>
 8012cf6:	1c43      	adds	r3, r0, #1
 8012cf8:	d102      	bne.n	8012d00 <_fstat_r+0x1c>
 8012cfa:	682b      	ldr	r3, [r5, #0]
 8012cfc:	b103      	cbz	r3, 8012d00 <_fstat_r+0x1c>
 8012cfe:	6023      	str	r3, [r4, #0]
 8012d00:	bd38      	pop	{r3, r4, r5, pc}
 8012d02:	bf00      	nop
 8012d04:	20002fb4 	.word	0x20002fb4

08012d08 <_isatty_r>:
 8012d08:	b538      	push	{r3, r4, r5, lr}
 8012d0a:	4d06      	ldr	r5, [pc, #24]	@ (8012d24 <_isatty_r+0x1c>)
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	4604      	mov	r4, r0
 8012d10:	4608      	mov	r0, r1
 8012d12:	602b      	str	r3, [r5, #0]
 8012d14:	f7f0 fa66 	bl	80031e4 <_isatty>
 8012d18:	1c43      	adds	r3, r0, #1
 8012d1a:	d102      	bne.n	8012d22 <_isatty_r+0x1a>
 8012d1c:	682b      	ldr	r3, [r5, #0]
 8012d1e:	b103      	cbz	r3, 8012d22 <_isatty_r+0x1a>
 8012d20:	6023      	str	r3, [r4, #0]
 8012d22:	bd38      	pop	{r3, r4, r5, pc}
 8012d24:	20002fb4 	.word	0x20002fb4

08012d28 <_sbrk_r>:
 8012d28:	b538      	push	{r3, r4, r5, lr}
 8012d2a:	4d06      	ldr	r5, [pc, #24]	@ (8012d44 <_sbrk_r+0x1c>)
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	4604      	mov	r4, r0
 8012d30:	4608      	mov	r0, r1
 8012d32:	602b      	str	r3, [r5, #0]
 8012d34:	f7f0 fa6e 	bl	8003214 <_sbrk>
 8012d38:	1c43      	adds	r3, r0, #1
 8012d3a:	d102      	bne.n	8012d42 <_sbrk_r+0x1a>
 8012d3c:	682b      	ldr	r3, [r5, #0]
 8012d3e:	b103      	cbz	r3, 8012d42 <_sbrk_r+0x1a>
 8012d40:	6023      	str	r3, [r4, #0]
 8012d42:	bd38      	pop	{r3, r4, r5, pc}
 8012d44:	20002fb4 	.word	0x20002fb4

08012d48 <__assert_func>:
 8012d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d4a:	4614      	mov	r4, r2
 8012d4c:	461a      	mov	r2, r3
 8012d4e:	4b09      	ldr	r3, [pc, #36]	@ (8012d74 <__assert_func+0x2c>)
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	4605      	mov	r5, r0
 8012d54:	68d8      	ldr	r0, [r3, #12]
 8012d56:	b954      	cbnz	r4, 8012d6e <__assert_func+0x26>
 8012d58:	4b07      	ldr	r3, [pc, #28]	@ (8012d78 <__assert_func+0x30>)
 8012d5a:	461c      	mov	r4, r3
 8012d5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012d60:	9100      	str	r1, [sp, #0]
 8012d62:	462b      	mov	r3, r5
 8012d64:	4905      	ldr	r1, [pc, #20]	@ (8012d7c <__assert_func+0x34>)
 8012d66:	f000 f86f 	bl	8012e48 <fiprintf>
 8012d6a:	f000 f87f 	bl	8012e6c <abort>
 8012d6e:	4b04      	ldr	r3, [pc, #16]	@ (8012d80 <__assert_func+0x38>)
 8012d70:	e7f4      	b.n	8012d5c <__assert_func+0x14>
 8012d72:	bf00      	nop
 8012d74:	20000164 	.word	0x20000164
 8012d78:	08015306 	.word	0x08015306
 8012d7c:	080152d8 	.word	0x080152d8
 8012d80:	080152cb 	.word	0x080152cb

08012d84 <_calloc_r>:
 8012d84:	b570      	push	{r4, r5, r6, lr}
 8012d86:	fba1 5402 	umull	r5, r4, r1, r2
 8012d8a:	b93c      	cbnz	r4, 8012d9c <_calloc_r+0x18>
 8012d8c:	4629      	mov	r1, r5
 8012d8e:	f7ff f91b 	bl	8011fc8 <_malloc_r>
 8012d92:	4606      	mov	r6, r0
 8012d94:	b928      	cbnz	r0, 8012da2 <_calloc_r+0x1e>
 8012d96:	2600      	movs	r6, #0
 8012d98:	4630      	mov	r0, r6
 8012d9a:	bd70      	pop	{r4, r5, r6, pc}
 8012d9c:	220c      	movs	r2, #12
 8012d9e:	6002      	str	r2, [r0, #0]
 8012da0:	e7f9      	b.n	8012d96 <_calloc_r+0x12>
 8012da2:	462a      	mov	r2, r5
 8012da4:	4621      	mov	r1, r4
 8012da6:	f7fe f9bf 	bl	8011128 <memset>
 8012daa:	e7f5      	b.n	8012d98 <_calloc_r+0x14>

08012dac <__ascii_mbtowc>:
 8012dac:	b082      	sub	sp, #8
 8012dae:	b901      	cbnz	r1, 8012db2 <__ascii_mbtowc+0x6>
 8012db0:	a901      	add	r1, sp, #4
 8012db2:	b142      	cbz	r2, 8012dc6 <__ascii_mbtowc+0x1a>
 8012db4:	b14b      	cbz	r3, 8012dca <__ascii_mbtowc+0x1e>
 8012db6:	7813      	ldrb	r3, [r2, #0]
 8012db8:	600b      	str	r3, [r1, #0]
 8012dba:	7812      	ldrb	r2, [r2, #0]
 8012dbc:	1e10      	subs	r0, r2, #0
 8012dbe:	bf18      	it	ne
 8012dc0:	2001      	movne	r0, #1
 8012dc2:	b002      	add	sp, #8
 8012dc4:	4770      	bx	lr
 8012dc6:	4610      	mov	r0, r2
 8012dc8:	e7fb      	b.n	8012dc2 <__ascii_mbtowc+0x16>
 8012dca:	f06f 0001 	mvn.w	r0, #1
 8012dce:	e7f8      	b.n	8012dc2 <__ascii_mbtowc+0x16>

08012dd0 <_realloc_r>:
 8012dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dd4:	4680      	mov	r8, r0
 8012dd6:	4615      	mov	r5, r2
 8012dd8:	460c      	mov	r4, r1
 8012dda:	b921      	cbnz	r1, 8012de6 <_realloc_r+0x16>
 8012ddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012de0:	4611      	mov	r1, r2
 8012de2:	f7ff b8f1 	b.w	8011fc8 <_malloc_r>
 8012de6:	b92a      	cbnz	r2, 8012df4 <_realloc_r+0x24>
 8012de8:	f7ff f87a 	bl	8011ee0 <_free_r>
 8012dec:	2400      	movs	r4, #0
 8012dee:	4620      	mov	r0, r4
 8012df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012df4:	f000 f841 	bl	8012e7a <_malloc_usable_size_r>
 8012df8:	4285      	cmp	r5, r0
 8012dfa:	4606      	mov	r6, r0
 8012dfc:	d802      	bhi.n	8012e04 <_realloc_r+0x34>
 8012dfe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012e02:	d8f4      	bhi.n	8012dee <_realloc_r+0x1e>
 8012e04:	4629      	mov	r1, r5
 8012e06:	4640      	mov	r0, r8
 8012e08:	f7ff f8de 	bl	8011fc8 <_malloc_r>
 8012e0c:	4607      	mov	r7, r0
 8012e0e:	2800      	cmp	r0, #0
 8012e10:	d0ec      	beq.n	8012dec <_realloc_r+0x1c>
 8012e12:	42b5      	cmp	r5, r6
 8012e14:	462a      	mov	r2, r5
 8012e16:	4621      	mov	r1, r4
 8012e18:	bf28      	it	cs
 8012e1a:	4632      	movcs	r2, r6
 8012e1c:	f7fe fa03 	bl	8011226 <memcpy>
 8012e20:	4621      	mov	r1, r4
 8012e22:	4640      	mov	r0, r8
 8012e24:	f7ff f85c 	bl	8011ee0 <_free_r>
 8012e28:	463c      	mov	r4, r7
 8012e2a:	e7e0      	b.n	8012dee <_realloc_r+0x1e>

08012e2c <__ascii_wctomb>:
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	4608      	mov	r0, r1
 8012e30:	b141      	cbz	r1, 8012e44 <__ascii_wctomb+0x18>
 8012e32:	2aff      	cmp	r2, #255	@ 0xff
 8012e34:	d904      	bls.n	8012e40 <__ascii_wctomb+0x14>
 8012e36:	228a      	movs	r2, #138	@ 0x8a
 8012e38:	601a      	str	r2, [r3, #0]
 8012e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8012e3e:	4770      	bx	lr
 8012e40:	700a      	strb	r2, [r1, #0]
 8012e42:	2001      	movs	r0, #1
 8012e44:	4770      	bx	lr
	...

08012e48 <fiprintf>:
 8012e48:	b40e      	push	{r1, r2, r3}
 8012e4a:	b503      	push	{r0, r1, lr}
 8012e4c:	4601      	mov	r1, r0
 8012e4e:	ab03      	add	r3, sp, #12
 8012e50:	4805      	ldr	r0, [pc, #20]	@ (8012e68 <fiprintf+0x20>)
 8012e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e56:	6800      	ldr	r0, [r0, #0]
 8012e58:	9301      	str	r3, [sp, #4]
 8012e5a:	f000 f83f 	bl	8012edc <_vfiprintf_r>
 8012e5e:	b002      	add	sp, #8
 8012e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e64:	b003      	add	sp, #12
 8012e66:	4770      	bx	lr
 8012e68:	20000164 	.word	0x20000164

08012e6c <abort>:
 8012e6c:	b508      	push	{r3, lr}
 8012e6e:	2006      	movs	r0, #6
 8012e70:	f000 f974 	bl	801315c <raise>
 8012e74:	2001      	movs	r0, #1
 8012e76:	f7f0 f955 	bl	8003124 <_exit>

08012e7a <_malloc_usable_size_r>:
 8012e7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e7e:	1f18      	subs	r0, r3, #4
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	bfbc      	itt	lt
 8012e84:	580b      	ldrlt	r3, [r1, r0]
 8012e86:	18c0      	addlt	r0, r0, r3
 8012e88:	4770      	bx	lr

08012e8a <__sfputc_r>:
 8012e8a:	6893      	ldr	r3, [r2, #8]
 8012e8c:	3b01      	subs	r3, #1
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	b410      	push	{r4}
 8012e92:	6093      	str	r3, [r2, #8]
 8012e94:	da08      	bge.n	8012ea8 <__sfputc_r+0x1e>
 8012e96:	6994      	ldr	r4, [r2, #24]
 8012e98:	42a3      	cmp	r3, r4
 8012e9a:	db01      	blt.n	8012ea0 <__sfputc_r+0x16>
 8012e9c:	290a      	cmp	r1, #10
 8012e9e:	d103      	bne.n	8012ea8 <__sfputc_r+0x1e>
 8012ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ea4:	f7fe b8ab 	b.w	8010ffe <__swbuf_r>
 8012ea8:	6813      	ldr	r3, [r2, #0]
 8012eaa:	1c58      	adds	r0, r3, #1
 8012eac:	6010      	str	r0, [r2, #0]
 8012eae:	7019      	strb	r1, [r3, #0]
 8012eb0:	4608      	mov	r0, r1
 8012eb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012eb6:	4770      	bx	lr

08012eb8 <__sfputs_r>:
 8012eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eba:	4606      	mov	r6, r0
 8012ebc:	460f      	mov	r7, r1
 8012ebe:	4614      	mov	r4, r2
 8012ec0:	18d5      	adds	r5, r2, r3
 8012ec2:	42ac      	cmp	r4, r5
 8012ec4:	d101      	bne.n	8012eca <__sfputs_r+0x12>
 8012ec6:	2000      	movs	r0, #0
 8012ec8:	e007      	b.n	8012eda <__sfputs_r+0x22>
 8012eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ece:	463a      	mov	r2, r7
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	f7ff ffda 	bl	8012e8a <__sfputc_r>
 8012ed6:	1c43      	adds	r3, r0, #1
 8012ed8:	d1f3      	bne.n	8012ec2 <__sfputs_r+0xa>
 8012eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012edc <_vfiprintf_r>:
 8012edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ee0:	460d      	mov	r5, r1
 8012ee2:	b09d      	sub	sp, #116	@ 0x74
 8012ee4:	4614      	mov	r4, r2
 8012ee6:	4698      	mov	r8, r3
 8012ee8:	4606      	mov	r6, r0
 8012eea:	b118      	cbz	r0, 8012ef4 <_vfiprintf_r+0x18>
 8012eec:	6a03      	ldr	r3, [r0, #32]
 8012eee:	b90b      	cbnz	r3, 8012ef4 <_vfiprintf_r+0x18>
 8012ef0:	f7fd ff8e 	bl	8010e10 <__sinit>
 8012ef4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012ef6:	07d9      	lsls	r1, r3, #31
 8012ef8:	d405      	bmi.n	8012f06 <_vfiprintf_r+0x2a>
 8012efa:	89ab      	ldrh	r3, [r5, #12]
 8012efc:	059a      	lsls	r2, r3, #22
 8012efe:	d402      	bmi.n	8012f06 <_vfiprintf_r+0x2a>
 8012f00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012f02:	f7fe f98e 	bl	8011222 <__retarget_lock_acquire_recursive>
 8012f06:	89ab      	ldrh	r3, [r5, #12]
 8012f08:	071b      	lsls	r3, r3, #28
 8012f0a:	d501      	bpl.n	8012f10 <_vfiprintf_r+0x34>
 8012f0c:	692b      	ldr	r3, [r5, #16]
 8012f0e:	b99b      	cbnz	r3, 8012f38 <_vfiprintf_r+0x5c>
 8012f10:	4629      	mov	r1, r5
 8012f12:	4630      	mov	r0, r6
 8012f14:	f7fe f8b2 	bl	801107c <__swsetup_r>
 8012f18:	b170      	cbz	r0, 8012f38 <_vfiprintf_r+0x5c>
 8012f1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012f1c:	07dc      	lsls	r4, r3, #31
 8012f1e:	d504      	bpl.n	8012f2a <_vfiprintf_r+0x4e>
 8012f20:	f04f 30ff 	mov.w	r0, #4294967295
 8012f24:	b01d      	add	sp, #116	@ 0x74
 8012f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f2a:	89ab      	ldrh	r3, [r5, #12]
 8012f2c:	0598      	lsls	r0, r3, #22
 8012f2e:	d4f7      	bmi.n	8012f20 <_vfiprintf_r+0x44>
 8012f30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012f32:	f7fe f977 	bl	8011224 <__retarget_lock_release_recursive>
 8012f36:	e7f3      	b.n	8012f20 <_vfiprintf_r+0x44>
 8012f38:	2300      	movs	r3, #0
 8012f3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f3c:	2320      	movs	r3, #32
 8012f3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012f42:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f46:	2330      	movs	r3, #48	@ 0x30
 8012f48:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80130f8 <_vfiprintf_r+0x21c>
 8012f4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012f50:	f04f 0901 	mov.w	r9, #1
 8012f54:	4623      	mov	r3, r4
 8012f56:	469a      	mov	sl, r3
 8012f58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f5c:	b10a      	cbz	r2, 8012f62 <_vfiprintf_r+0x86>
 8012f5e:	2a25      	cmp	r2, #37	@ 0x25
 8012f60:	d1f9      	bne.n	8012f56 <_vfiprintf_r+0x7a>
 8012f62:	ebba 0b04 	subs.w	fp, sl, r4
 8012f66:	d00b      	beq.n	8012f80 <_vfiprintf_r+0xa4>
 8012f68:	465b      	mov	r3, fp
 8012f6a:	4622      	mov	r2, r4
 8012f6c:	4629      	mov	r1, r5
 8012f6e:	4630      	mov	r0, r6
 8012f70:	f7ff ffa2 	bl	8012eb8 <__sfputs_r>
 8012f74:	3001      	adds	r0, #1
 8012f76:	f000 80a7 	beq.w	80130c8 <_vfiprintf_r+0x1ec>
 8012f7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012f7c:	445a      	add	r2, fp
 8012f7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8012f80:	f89a 3000 	ldrb.w	r3, [sl]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	f000 809f 	beq.w	80130c8 <_vfiprintf_r+0x1ec>
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8012f90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f94:	f10a 0a01 	add.w	sl, sl, #1
 8012f98:	9304      	str	r3, [sp, #16]
 8012f9a:	9307      	str	r3, [sp, #28]
 8012f9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012fa0:	931a      	str	r3, [sp, #104]	@ 0x68
 8012fa2:	4654      	mov	r4, sl
 8012fa4:	2205      	movs	r2, #5
 8012fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012faa:	4853      	ldr	r0, [pc, #332]	@ (80130f8 <_vfiprintf_r+0x21c>)
 8012fac:	f7ed f918 	bl	80001e0 <memchr>
 8012fb0:	9a04      	ldr	r2, [sp, #16]
 8012fb2:	b9d8      	cbnz	r0, 8012fec <_vfiprintf_r+0x110>
 8012fb4:	06d1      	lsls	r1, r2, #27
 8012fb6:	bf44      	itt	mi
 8012fb8:	2320      	movmi	r3, #32
 8012fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012fbe:	0713      	lsls	r3, r2, #28
 8012fc0:	bf44      	itt	mi
 8012fc2:	232b      	movmi	r3, #43	@ 0x2b
 8012fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8012fcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8012fce:	d015      	beq.n	8012ffc <_vfiprintf_r+0x120>
 8012fd0:	9a07      	ldr	r2, [sp, #28]
 8012fd2:	4654      	mov	r4, sl
 8012fd4:	2000      	movs	r0, #0
 8012fd6:	f04f 0c0a 	mov.w	ip, #10
 8012fda:	4621      	mov	r1, r4
 8012fdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012fe0:	3b30      	subs	r3, #48	@ 0x30
 8012fe2:	2b09      	cmp	r3, #9
 8012fe4:	d94b      	bls.n	801307e <_vfiprintf_r+0x1a2>
 8012fe6:	b1b0      	cbz	r0, 8013016 <_vfiprintf_r+0x13a>
 8012fe8:	9207      	str	r2, [sp, #28]
 8012fea:	e014      	b.n	8013016 <_vfiprintf_r+0x13a>
 8012fec:	eba0 0308 	sub.w	r3, r0, r8
 8012ff0:	fa09 f303 	lsl.w	r3, r9, r3
 8012ff4:	4313      	orrs	r3, r2
 8012ff6:	9304      	str	r3, [sp, #16]
 8012ff8:	46a2      	mov	sl, r4
 8012ffa:	e7d2      	b.n	8012fa2 <_vfiprintf_r+0xc6>
 8012ffc:	9b03      	ldr	r3, [sp, #12]
 8012ffe:	1d19      	adds	r1, r3, #4
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	9103      	str	r1, [sp, #12]
 8013004:	2b00      	cmp	r3, #0
 8013006:	bfbb      	ittet	lt
 8013008:	425b      	neglt	r3, r3
 801300a:	f042 0202 	orrlt.w	r2, r2, #2
 801300e:	9307      	strge	r3, [sp, #28]
 8013010:	9307      	strlt	r3, [sp, #28]
 8013012:	bfb8      	it	lt
 8013014:	9204      	strlt	r2, [sp, #16]
 8013016:	7823      	ldrb	r3, [r4, #0]
 8013018:	2b2e      	cmp	r3, #46	@ 0x2e
 801301a:	d10a      	bne.n	8013032 <_vfiprintf_r+0x156>
 801301c:	7863      	ldrb	r3, [r4, #1]
 801301e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013020:	d132      	bne.n	8013088 <_vfiprintf_r+0x1ac>
 8013022:	9b03      	ldr	r3, [sp, #12]
 8013024:	1d1a      	adds	r2, r3, #4
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	9203      	str	r2, [sp, #12]
 801302a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801302e:	3402      	adds	r4, #2
 8013030:	9305      	str	r3, [sp, #20]
 8013032:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013108 <_vfiprintf_r+0x22c>
 8013036:	7821      	ldrb	r1, [r4, #0]
 8013038:	2203      	movs	r2, #3
 801303a:	4650      	mov	r0, sl
 801303c:	f7ed f8d0 	bl	80001e0 <memchr>
 8013040:	b138      	cbz	r0, 8013052 <_vfiprintf_r+0x176>
 8013042:	9b04      	ldr	r3, [sp, #16]
 8013044:	eba0 000a 	sub.w	r0, r0, sl
 8013048:	2240      	movs	r2, #64	@ 0x40
 801304a:	4082      	lsls	r2, r0
 801304c:	4313      	orrs	r3, r2
 801304e:	3401      	adds	r4, #1
 8013050:	9304      	str	r3, [sp, #16]
 8013052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013056:	4829      	ldr	r0, [pc, #164]	@ (80130fc <_vfiprintf_r+0x220>)
 8013058:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801305c:	2206      	movs	r2, #6
 801305e:	f7ed f8bf 	bl	80001e0 <memchr>
 8013062:	2800      	cmp	r0, #0
 8013064:	d03f      	beq.n	80130e6 <_vfiprintf_r+0x20a>
 8013066:	4b26      	ldr	r3, [pc, #152]	@ (8013100 <_vfiprintf_r+0x224>)
 8013068:	bb1b      	cbnz	r3, 80130b2 <_vfiprintf_r+0x1d6>
 801306a:	9b03      	ldr	r3, [sp, #12]
 801306c:	3307      	adds	r3, #7
 801306e:	f023 0307 	bic.w	r3, r3, #7
 8013072:	3308      	adds	r3, #8
 8013074:	9303      	str	r3, [sp, #12]
 8013076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013078:	443b      	add	r3, r7
 801307a:	9309      	str	r3, [sp, #36]	@ 0x24
 801307c:	e76a      	b.n	8012f54 <_vfiprintf_r+0x78>
 801307e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013082:	460c      	mov	r4, r1
 8013084:	2001      	movs	r0, #1
 8013086:	e7a8      	b.n	8012fda <_vfiprintf_r+0xfe>
 8013088:	2300      	movs	r3, #0
 801308a:	3401      	adds	r4, #1
 801308c:	9305      	str	r3, [sp, #20]
 801308e:	4619      	mov	r1, r3
 8013090:	f04f 0c0a 	mov.w	ip, #10
 8013094:	4620      	mov	r0, r4
 8013096:	f810 2b01 	ldrb.w	r2, [r0], #1
 801309a:	3a30      	subs	r2, #48	@ 0x30
 801309c:	2a09      	cmp	r2, #9
 801309e:	d903      	bls.n	80130a8 <_vfiprintf_r+0x1cc>
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d0c6      	beq.n	8013032 <_vfiprintf_r+0x156>
 80130a4:	9105      	str	r1, [sp, #20]
 80130a6:	e7c4      	b.n	8013032 <_vfiprintf_r+0x156>
 80130a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80130ac:	4604      	mov	r4, r0
 80130ae:	2301      	movs	r3, #1
 80130b0:	e7f0      	b.n	8013094 <_vfiprintf_r+0x1b8>
 80130b2:	ab03      	add	r3, sp, #12
 80130b4:	9300      	str	r3, [sp, #0]
 80130b6:	462a      	mov	r2, r5
 80130b8:	4b12      	ldr	r3, [pc, #72]	@ (8013104 <_vfiprintf_r+0x228>)
 80130ba:	a904      	add	r1, sp, #16
 80130bc:	4630      	mov	r0, r6
 80130be:	f7fd fa63 	bl	8010588 <_printf_float>
 80130c2:	4607      	mov	r7, r0
 80130c4:	1c78      	adds	r0, r7, #1
 80130c6:	d1d6      	bne.n	8013076 <_vfiprintf_r+0x19a>
 80130c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80130ca:	07d9      	lsls	r1, r3, #31
 80130cc:	d405      	bmi.n	80130da <_vfiprintf_r+0x1fe>
 80130ce:	89ab      	ldrh	r3, [r5, #12]
 80130d0:	059a      	lsls	r2, r3, #22
 80130d2:	d402      	bmi.n	80130da <_vfiprintf_r+0x1fe>
 80130d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80130d6:	f7fe f8a5 	bl	8011224 <__retarget_lock_release_recursive>
 80130da:	89ab      	ldrh	r3, [r5, #12]
 80130dc:	065b      	lsls	r3, r3, #25
 80130de:	f53f af1f 	bmi.w	8012f20 <_vfiprintf_r+0x44>
 80130e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80130e4:	e71e      	b.n	8012f24 <_vfiprintf_r+0x48>
 80130e6:	ab03      	add	r3, sp, #12
 80130e8:	9300      	str	r3, [sp, #0]
 80130ea:	462a      	mov	r2, r5
 80130ec:	4b05      	ldr	r3, [pc, #20]	@ (8013104 <_vfiprintf_r+0x228>)
 80130ee:	a904      	add	r1, sp, #16
 80130f0:	4630      	mov	r0, r6
 80130f2:	f7fd fce1 	bl	8010ab8 <_printf_i>
 80130f6:	e7e4      	b.n	80130c2 <_vfiprintf_r+0x1e6>
 80130f8:	080152b0 	.word	0x080152b0
 80130fc:	080152ba 	.word	0x080152ba
 8013100:	08010589 	.word	0x08010589
 8013104:	08012eb9 	.word	0x08012eb9
 8013108:	080152b6 	.word	0x080152b6

0801310c <_raise_r>:
 801310c:	291f      	cmp	r1, #31
 801310e:	b538      	push	{r3, r4, r5, lr}
 8013110:	4605      	mov	r5, r0
 8013112:	460c      	mov	r4, r1
 8013114:	d904      	bls.n	8013120 <_raise_r+0x14>
 8013116:	2316      	movs	r3, #22
 8013118:	6003      	str	r3, [r0, #0]
 801311a:	f04f 30ff 	mov.w	r0, #4294967295
 801311e:	bd38      	pop	{r3, r4, r5, pc}
 8013120:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013122:	b112      	cbz	r2, 801312a <_raise_r+0x1e>
 8013124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013128:	b94b      	cbnz	r3, 801313e <_raise_r+0x32>
 801312a:	4628      	mov	r0, r5
 801312c:	f000 f830 	bl	8013190 <_getpid_r>
 8013130:	4622      	mov	r2, r4
 8013132:	4601      	mov	r1, r0
 8013134:	4628      	mov	r0, r5
 8013136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801313a:	f000 b817 	b.w	801316c <_kill_r>
 801313e:	2b01      	cmp	r3, #1
 8013140:	d00a      	beq.n	8013158 <_raise_r+0x4c>
 8013142:	1c59      	adds	r1, r3, #1
 8013144:	d103      	bne.n	801314e <_raise_r+0x42>
 8013146:	2316      	movs	r3, #22
 8013148:	6003      	str	r3, [r0, #0]
 801314a:	2001      	movs	r0, #1
 801314c:	e7e7      	b.n	801311e <_raise_r+0x12>
 801314e:	2100      	movs	r1, #0
 8013150:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013154:	4620      	mov	r0, r4
 8013156:	4798      	blx	r3
 8013158:	2000      	movs	r0, #0
 801315a:	e7e0      	b.n	801311e <_raise_r+0x12>

0801315c <raise>:
 801315c:	4b02      	ldr	r3, [pc, #8]	@ (8013168 <raise+0xc>)
 801315e:	4601      	mov	r1, r0
 8013160:	6818      	ldr	r0, [r3, #0]
 8013162:	f7ff bfd3 	b.w	801310c <_raise_r>
 8013166:	bf00      	nop
 8013168:	20000164 	.word	0x20000164

0801316c <_kill_r>:
 801316c:	b538      	push	{r3, r4, r5, lr}
 801316e:	4d07      	ldr	r5, [pc, #28]	@ (801318c <_kill_r+0x20>)
 8013170:	2300      	movs	r3, #0
 8013172:	4604      	mov	r4, r0
 8013174:	4608      	mov	r0, r1
 8013176:	4611      	mov	r1, r2
 8013178:	602b      	str	r3, [r5, #0]
 801317a:	f7ef ffc3 	bl	8003104 <_kill>
 801317e:	1c43      	adds	r3, r0, #1
 8013180:	d102      	bne.n	8013188 <_kill_r+0x1c>
 8013182:	682b      	ldr	r3, [r5, #0]
 8013184:	b103      	cbz	r3, 8013188 <_kill_r+0x1c>
 8013186:	6023      	str	r3, [r4, #0]
 8013188:	bd38      	pop	{r3, r4, r5, pc}
 801318a:	bf00      	nop
 801318c:	20002fb4 	.word	0x20002fb4

08013190 <_getpid_r>:
 8013190:	f7ef bfb0 	b.w	80030f4 <_getpid>

08013194 <_init>:
 8013194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013196:	bf00      	nop
 8013198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801319a:	bc08      	pop	{r3}
 801319c:	469e      	mov	lr, r3
 801319e:	4770      	bx	lr

080131a0 <_fini>:
 80131a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131a2:	bf00      	nop
 80131a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131a6:	bc08      	pop	{r3}
 80131a8:	469e      	mov	lr, r3
 80131aa:	4770      	bx	lr
